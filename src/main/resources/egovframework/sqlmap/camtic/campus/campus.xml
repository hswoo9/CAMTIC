<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="campus">
    <select id="getCodeList" resultType="map" parameterType="map">
        /* campus.getCodeList */
        SELECT
            *
        FROM
            CAMPUS.DJ_CAMPUS_CODE CC
        WHERE
            ACTIVE = 'Y'
        <if test='campusGroupCodeId != null and campusGroupCodeId != ""'>
            AND CAMPUS_GROUP_CODE_ID = #{campusGroupCodeId}
        </if>
    </select>

    <select id="getCodeOne" resultType="map" parameterType="map">
        /* campus.getCodeOne */
        SELECT
            *
        FROM
            CAMPUS.DJ_CAMPUS_CODE CC
        WHERE
            ACTIVE = 'Y'
            <if test='campusCodeId != null and campusCodeId != ""'>
                AND CAMPUS_CODE_ID = #{campusCodeId}
            </if>
            <if test='campusGroupCodeId != null and campusGroupCodeId != ""'>
                AND CAMPUS_GROUP_CODE_ID = #{campusGroupCodeId} AND CAMPUS_DT_CODE = #{pk}
            </if>
    </select>

    <select id="getRealEduTimeYear" resultType="map" parameterType="map">
        /* getRealEduTimeYear */
        SELECT
            IFNULL(SUM(ER.REAL_EDU_TIME), 0) AS REAL_EDU_TIME
        FROM
            CAMPUS.DJ_EDU_INFO EI
        LEFT JOIN
            CAMPUS.DJ_EDU_RESULT ER ON EI.EDU_INFO_ID = ER.EDU_INFO_ID
        WHERE
            LEFT(EI.START_DT, 4) = #{eduYear}
        AND EI.EDU_FORM_TYPE = #{eduFormType}
        AND EI.REG_EMP_SEQ = #{empSeq}
        AND ER.MNG_CHECK = 'Y'
    </select>

    <select id="getRealEduTimeStudyWeekly" resultType="map" parameterType="map">
        /* getRealEduTimeStudyWeekly */
        SELECT
            IFNULL(SUM(JOURNAL_TIME), 0) AS REAL_EDU_TIME
        FROM
            CAMPUS.DJ_STUDY_JOURNAL CSJ
        LEFT JOIN
            CAMPUS.DJ_STUDY_USER CSU ON CSJ.STUDY_INFO_SN = CSU.STUDY_INFO_SN
        WHERE
            CSJ.STUDY_INFO_SN = #{studyInfoSn}
        AND CSU.STUDY_EMP_SEQ = #{empSeq}
        AND CSJ.ACTIVE = 'Y'
        AND JOURNAL_DT BETWEEN (SELECT ADDDATE( #{applyDt}, - WEEKDAY(#{applyDt}) + 0 ) AS MONDAY) AND (SELECT ADDDATE( #{applyDt}, - WEEKDAY(#{applyDt}) + 6 ) AS MONDAY)
    </select>

    <select id="getRealEduTimePropagWeekly" resultType="map" parameterType="map">
        /* getRealEduTimePropagWeekly */
        SELECT
            IFNULL(SUM(JOURNAL_TIME), 0) AS REAL_EDU_TIME
        FROM
            CAMPUS.DJ_STUDY_JOURNAL CSJ
        LEFT JOIN
            CAMPUS.DJ_STUDY_USER CSU ON CSJ.STUDY_INFO_SN = CSU.STUDY_INFO_SN
        WHERE
            CSJ.STUDY_INFO_SN = #{studyInfoSn}
          AND STUDY_EMP_SEQ = #{empSeq}
          AND CSJ.ACTIVE = 'Y'
          AND JOURNAL_DT BETWEEN (SELECT ADDDATE( #{applyDt}, - WEEKDAY(#{applyDt}) + 0 ) AS MONDAY) AND (SELECT ADDDATE( #{applyDt}, - WEEKDAY(#{applyDt}) + 6 ) AS MONDAY)
    </select>

    <select id="getEduInfoList" resultType="map" parameterType="map">
        /* getEduInfoList */
        SELECT
            RE.*
        FROM
            (
                SELECT
                    @ROWNUM := @ROWNUM + 1 AS ROW_NUM,
                    EI.EDU_INFO_ID,
                    EI.REG_EMP_SEQ,
                    EI.REG_EMP_NAME,
                    EI.EDU_NAME,
                    EI.START_DT,
                    EI.END_DT,
                    EI.DUTY_CLASS,
                    CASE
                        WHEN EI.CARE_LOCATION IS NULL
                        THEN CARE_NAME
                        ELSE EI.CARE_LOCATION
                    END AS CARE_LOCATION,
                    CONCAT('Level. ', EI.LEVEL_ID) AS LEVEL_ID,
                    EI.EDU_FORM_TYPE,
                    EI.STATUS,
                    EI.TERM_TIME,
                    IFNULL(ER.STATUS, 1) AS RES_STATUS,
                    ER.MNG_CHECK,
                    EI.OBJECT_FORUM_TYPE,
                    IFNULL(EI.BOOK_PAGE_VAL, 0) AS BOOK_PAGE_VAL,
                    EI.TREA_UNIT,
                    EI.TREA_TYPE,
                    EI.TREA_USER,
                    EI.BOOK_UNIT,
                    IFNULL(ER.REAL_EDU_TIME, 0) AS REAL_EDU_TIME
                FROM
                    CAMPUS.DJ_EDU_INFO EI
                LEFT JOIN
                    CAMPUS.DJ_EDU_RESULT ER ON EI.EDU_INFO_ID = ER.EDU_INFO_ID,
                (SELECT @ROWNUM := 0) TMP
                WHERE
                    EI.REG_EMP_SEQ = #{empSeq}
                AND (DATE_FORMAT(START_DT, '%Y') = #{eduYear})
                ORDER BY EI.EDU_INFO_ID
            ) RE
        ORDER BY RE.EDU_INFO_ID DESC
    </select>

    <select id="getEduInfoOne" resultType="map" parameterType="map">
        /* getEduInfoOne */
        SELECT
            *
        FROM
            CAMPUS.DJ_EDU_INFO EI
        WHERE
            EI.EDU_INFO_ID = #{eduInfoId}
    </select>

    <select id="getEduResultOne" resultType="map" parameterType="map">
        /* getEduResultOne */
        SELECT
            EI.EDU_INFO_ID,
            EI.EDU_CATEGORY_DETAIL_ID,
            EI.EDU_CATEGORY_DETAIL_NAME,
            EI.LEVEL_ID,
            EI.EDU_NAME,
            EI.EDU_OBJECT,
            EI.EDU_CONTENT,
            EI.START_DT,
            EI.END_DT,
            EI.TERM_DAY,
            EI.TERM_TIME,
            EI.CARE_NAME,
            EI.CARE_LOCATION,
            EI.CARE_TEL_NUM,
            EI.EDU_MONEY,
            EI.EDU_MONEY_TYPE,
            EI.RETURN_MONEY,
            EI.RETURN_DOC,
            EI.STATUS,
            EI.ATTACH_DOC_NAME,
            EI.FILE_SN,
            EI.REG_DT,
            EI.EDU_FORM_TYPE,
            EI.OBJECT_FORUM_TYPE,
            EI.OBJECT_FORUM_VAL,
            EI.BOOK_WRITER_NAME,
            EI.BOOK_PAGE_VAL,
            EI.BOOK_PULISH_NAME,
            EI.TREA_ORIGIN,
            EI.TREA_UNIT,
            EI.TREA_TYPE,
            EI.TREA_USER,
            EI.BOOK_UNIT,
            EI.COMP_TYPE,
            ER.EDU_TEACHER_NAME,
            ER.EDU_EVAL,
            ER.EDU_POINT,
            ER.FBLIST,
            EP.DUTY_CLASS,
            IFNULL(ER.STATUS, 1) AS RES_STATUS,
            ER.EDU_RESULT_ID,
            CC.CAMPUS_DT_CODE_NM AS EDU_FORM_NAME,
            HEI.EMP_NAME_KR,
            HEI.DEPT_NAME,
            HEI.DEPT_TEAM_NAME,
            HEI.POSITION_NAME,
            DI.DOC_ID,
            DI.APPRO_KEY,
            DI.DOC_MENU_CD,
            RDI.DOC_ID AS RES_DOC_ID,
            RDI.APPRO_KEY AS RES_APPRO_KEY,
            RDI.DOC_MENU_CD AS RES_DOC_MENU_CD,
            EP.EDU_PLAN,
            ECD.EDU_CATEGORY_NAME
        FROM
            CAMPUS.DJ_EDU_INFO EI
        LEFT JOIN
            CAMPUS.DJ_EDU_RESULT ER ON EI.EDU_INFO_ID = ER.EDU_INFO_ID
        LEFT JOIN
            CAMPUS.DJ_CAMPUS_CODE CC ON EI.EDU_FORM_TYPE = CC.CAMPUS_DT_CODE AND CC.CAMPUS_MD_CODE = 03
        LEFT JOIN
            CAMPUS.DJ_EDU_CATEGORY_DETAIL ECD ON EI.EDU_CATEGORY_DETAIL_ID = ECD.EDU_CATEGORY_DETAIL_ID
        LEFT JOIN
            CAMPUS.DJ_EDU_PLAN EP ON ECD.EDU_CATEGORY_ID = EP.EDU_CATEGORY_ID AND EI.DUTY_CLASS = EP.DUTY_CLASS AND EI.REG_EMP_SEQ = EP.REG_EMP_SEQ AND DATE_FORMAT(EI.REG_DT, '%Y') = EP.TARGET_YEAR
        LEFT JOIN
            CAM_HR.DJ_EMP_INFO HEI ON HEI.EMP_SEQ = EI.REG_EMP_SEQ
        LEFT JOIN
            DJ_CAMTIC.A_DOC_INFO DI ON DI.DOC_ID = EI.DOC_ID
        LEFT JOIN
            DJ_CAMTIC.A_DOC_INFO RDI ON RDI.DOC_ID = ER.DOC_ID
        WHERE
            EI.EDU_INFO_ID = #{eduInfoId}
    </select>

    <select id="getTargetYearList" resultType="map" parameterType="map">
        /* getTargetYearList */
        SELECT
            CONCAT(ET.TARGET_YEAR, '년') AS TEXT,
            ET.TARGET_YEAR AS VALUE
        FROM
            CAMPUS.DJ_EDU_TARGET ET
        WHERE
            ET.REG_EMP_SEQ = #{empSeq}
        ORDER BY EDU_TARGET_ID DESC
    </select>

    <select id="getTargetOne" resultType="map" parameterType="map">
        /* getTargetOne */
        SELECT
            EDU_TARGET_ID,
            TARGET_YEAR,
            TARGET_CODE,
            LOGIN_ID,
            STATUS,
            REG_EMP_SEQ,
            REG_DATE
        FROM
            CAMPUS.DJ_EDU_TARGET ET
        WHERE
            TARGET_YEAR = #{targetYear}
        AND REG_EMP_SEQ = #{empSeq}
    </select>

    <select id="getTargetList" resultType="map" parameterType="map">
        /* getTargetList */
        SELECT
            ETD.EDU_TARGET_DETAIL_ID,
            ETD.EDU_TARGET_ID,
            ET.TARGET_YEAR,
            ET.TARGET_CODE,
            ET.LOGIN_ID,
            ETD.EDU_CATEGORY_DETAIL_ID,
            ETD.TARGET_CLASS,
            ETD.DUTY_CLASS,
            ETD.STATUS
        FROM
            CAMPUS.DJ_EDU_TARGET ET
        LEFT JOIN
            CAMPUS.DJ_EDU_TARGET_DETAIL ETD ON ET.EDU_TARGET_ID = ETD.EDU_TARGET_ID
        WHERE
            ET.TARGET_YEAR = #{targetYear}
        AND ET.REG_EMP_SEQ = #{empSeq}
        <if test='dutyClass != null and dutyClass != ""'>
            AND ETD.DUTY_CLASS = #{dutyClass}
        </if>
    </select>

    <select id="getEduCategoryOne" resultType="map" parameterType="map">
        /* getEduCategoryOne */
        SELECT
            EC.EDU_CATEGORY_ID,
            EC.EDU_CATEGORY_NAME
        FROM
            CAMPUS.DJ_EDU_CATEGORY EC
        WHERE
            EC.EDU_CATEGORY_ID = #{pk}
    </select>

    <select id="getEduCategoryList" resultType="map" parameterType="map">
        /* getEduCategoryList */
        SELECT
            EC.EDU_CATEGORY_ID,
            EC.EDU_CATEGORY_NAME,
            EC.LARGE_CATEGORY_ID,
            EC.LARGE_CATEGORY_NAME
        FROM
            CAMPUS.DJ_EDU_CATEGORY EC
        WHERE
            EC.ACTIVE = 'Y'
        <if test='largeCategoryId != null and largeCategoryId != ""'>
            AND EC.LARGE_CATEGORY_ID in (${largeCategoryId})
        </if>
        ORDER BY EC.LARGE_CATEGORY_ID, EC.ORDER
    </select>

    <select id="getEduCategoryDetailOne" resultType="map" parameterType="map">
        /* getEduCategoryDetailOne */
        SELECT
            ECD.EDU_CATEGORY_DETAIL_ID,
            ECD.EDU_CATEGORY_DETAIL_NAME,
            ECD.LEVEL_ID,
            ECD.LEVEL_NAME
        FROM
            CAMPUS.DJ_EDU_CATEGORY_DETAIL ECD
        WHERE
            ECD.EDU_CATEGORY_DETAIL_ID = #{pk}
    </select>

    <select id="getEduCategoryDetailList" resultType="map" parameterType="map">
        /* getEduCategoryDetailList */
        SELECT
            ECD.EDU_CATEGORY_DETAIL_ID,
            ECD.EDU_CATEGORY_DETAIL_NAME,
            ECD.EDU_CATEGORY_ID,
            ECD.EDU_CATEGORY_NAME,
            ECD.LEVEL_ID,
            ECD.LEVEL_NAME
        FROM
            CAMPUS.DJ_EDU_CATEGORY_DETAIL ECD
        WHERE
            ECD.ACTIVE = 'Y'
        <if test='levelId != null and levelId != ""'>
            AND ECD.LEVEL_ID = #{levelId}
        </if>
        <if test='eduCategoryId != null and eduCategoryId != ""'>
            AND ECD.EDU_CATEGORY_ID in (${eduCategoryId})
        </if>
        ORDER BY ECD.ORDER
    </select>

    <select id="getTargetCategoryList" resultType="map" parameterType="map">
        /* getTargetCategoryList */
        SELECT
            EC.EDU_CATEGORY_ID,
            EC.EDU_CATEGORY_NAME
        FROM
            CAMPUS.DJ_EDU_CATEGORY EC
        WHERE
            EC.EDU_CATEGORY_ID IN (
                SELECT
                    EDU_CATEGORY_ID
                FROM
                    CAMPUS.DJ_EDU_TARGET ET
                LEFT JOIN
                    CAMPUS.DJ_EDU_TARGET_DETAIL ETD ON ET.EDU_TARGET_ID = ETD.EDU_TARGET_ID
                LEFT JOIN
                    CAMPUS.DJ_EDU_CATEGORY_DETAIL ECD ON ETD.EDU_CATEGORY_DETAIL_ID = ECD.EDU_CATEGORY_DETAIL_ID
                WHERE
                    ET.TARGET_YEAR = #{targetYear}
                AND ET.REG_EMP_SEQ = #{empSeq}
                <if test='dutyClass != null and dutyClass != ""'>
                    AND ETD.DUTY_CLASS = #{dutyClass}
                </if>
            )
    </select>

    <select id="getTargetCategoryDetailList" resultType="map" parameterType="map">
        /* getTargetCategoryDetailList */
        SELECT
            ETD.EDU_TARGET_DETAIL_ID,
            ETD.TARGET_CLASS,
            ECD.EDU_CATEGORY_ID,
            ECD.EDU_CATEGORY_DETAIL_ID,
            ECD.EDU_CATEGORY_DETAIL_NAME,
            ECD.LEVEL_ID,
            ETD.STATUS
        FROM
            CAMPUS.DJ_EDU_TARGET ET
        LEFT JOIN
            CAMPUS.DJ_EDU_TARGET_DETAIL ETD ON ET.EDU_TARGET_ID = ETD.EDU_TARGET_ID
        LEFT JOIN
            CAMPUS.DJ_EDU_CATEGORY_DETAIL ECD ON ETD.EDU_CATEGORY_DETAIL_ID = ECD.EDU_CATEGORY_DETAIL_ID
        WHERE
            ET.TARGET_YEAR = #{targetYear}
        AND
            ET.REG_EMP_SEQ = #{empSeq}
        <if test='dutyClass != null and dutyClass != ""'>
            AND ETD.DUTY_CLASS = #{dutyClass}
        </if>
    </select>

    <select id="getEduPlanList" resultType="map" parameterType="map">
        /* getEduPlanList */
        SELECT
            EP.EDU_PLAN_ID,
            EP.EDU_CATEGORY_ID,
            EP.EDU_PLAN
        FROM
            CAMPUS.DJ_EDU_PLAN EP
        WHERE
            TARGET_YEAR = #{targetYear}
        AND REG_EMP_SEQ = #{empSeq}
        AND DUTY_CLASS = #{dutyClass}
    </select>

    <select id="getEduPlanOne" resultType="map" parameterType="map">
        /* getEduPlanOne */
        SELECT
            EP.EDU_PLAN_ID,
            EP.EDU_PLAN
        FROM
            CAMPUS.DJ_EDU_PLAN EP
        WHERE
            EDU_CATEGORY_ID = #{eduCategoryId}
        AND TARGET_YEAR = #{targetYear}
        AND DUTY_CLASS = #{dutyClass}
        AND REG_EMP_SEQ = #{empSeq}
    </select>

    <select id="getStudyInfoStatList" resultType="map" parameterType="map">
        /* getStudyInfoStatList */
        SELECT
            CSU.STUDY_EMP_SEQ,
            CSI.*,
            IFNULL((SELECT SUM(SCSJ.JOURNAL_TIME) FROM CAMPUS.DJ_STUDY_JOURNAL SCSJ LEFT JOIN CAMPUS.DJ_STUDY_USER SCSU ON SCSJ.STUDY_INFO_SN = SCSU.STUDY_INFO_SN WHERE SCSJ.STUDY_INFO_SN = CSI.STUDY_INFO_SN AND SCSU.STUDY_EMP_SEQ = #{empSeq} AND ACTIVE = 'Y' AND CAPTAIN_APPOVAL_YN = 'Y' AND ASSISTANT_APPOVAL_YN = 'Y'), 0) AS STUDY_TIME,
            IFNULL((SELECT SUM(SCSI.EDU_TIME) FROM CAMPUS.DJ_STUDY_INFO SCSI LEFT JOIN CAMPUS.DJ_STUDY_USER SCSU ON SCSI.STUDY_INFO_SN = SCSU.STUDY_INFO_SN WHERE SCSU.STUDY_INFO_SN = CSI.STUDY_INFO_SN AND SCSU.STUDY_EMP_SEQ = #{empSeq} AND SCSI.STATUS = '100' AND SCSI.STUDY_CLASS_SN = 2), 0) AS PROPAG_TIME,
            IFNULL((SELECT SUM(SCOR.EDU_TIME) FROM CAMPUS.DJ_STUDY_INFO SCSI LEFT JOIN CAMPUS.DJ_OJT_RESULT SCOR ON SCOR.STUDY_INFO_SN = SCSI.STUDY_INFO_SN LEFT JOIN CAMPUS.DJ_OJT_USER SCOU ON SCOR.OJT_RESULT_SN = SCOU.OJT_RESULT_SN WHERE SCOR.STUDY_INFO_SN = CSI.STUDY_INFO_SN AND SCOU.OJT_EMP_SEQ = #{empSeq} AND SCSI.STATUS = '101' AND ACTIVE = 'Y'), 0) AS OJT_TIME
        FROM
            CAMPUS.DJ_STUDY_INFO CSI
        LEFT JOIN
            CAMPUS.DJ_STUDY_USER CSU ON CSI.STUDY_INFO_SN = CSU.STUDY_INFO_SN
        WHERE
            CSU.STUDY_EMP_SEQ = #{empSeq}
        AND CSI.STUDY_CLASS_SN IN(${studyClassSn})
        AND DATE_FORMAT(START_DT, '%Y') = #{eduYear}
        ORDER BY STUDY_INFO_SN DESC
    </select>

    <select id="getStudyInfoList" resultType="map" parameterType="map">
        /* getStudyInfoList */
        SELECT
            RE.*
        FROM
            (
                SELECT
                    @ROWNUM := @ROWNUM + 1 AS ROW_NUM,
                    CSI.*,
                    IFNULL((SELECT SUM(JOURNAL_TIME) FROM CAMPUS.DJ_STUDY_JOURNAL SCSJ WHERE CSI.STUDY_INFO_SN = SCSJ.STUDY_INFO_SN AND CAPTAIN_APPOVAL_YN = 'Y' AND ASSISTANT_APPOVAL_YN = 'Y'), 0) AS EDU_TIME_TOTAL,
                    (SELECT COUNT(*) FROM CAMPUS.DJ_OJT_RESULT WHERE STUDY_INFO_SN = CSI.STUDY_INFO_SN) as ST_CNT,
                    (SELECT SUM(EDU_FULL_TIME) FROM CAMPUS.DJ_OJT_RESULT WHERE STUDY_INFO_SN = CSI.STUDY_INFO_SN) as ST_SUM,
                    (SELECT STUDY_EMP_NAME FROM CAMPUS.DJ_STUDY_USER WHERE STUDY_INFO_SN = CSI.STUDY_INFO_SN AND STUDY_CLASS_SN = 4 LIMIT 1) as OJT_READER,
                    (SELECT STUDY_EMP_NAME FROM CAMPUS.DJ_STUDY_USER WHERE STUDY_INFO_SN = CSI.STUDY_INFO_SN AND STUDY_CLASS_SN = 1 LIMIT 1) as STUDY_READER
                FROM
                    CAMPUS.DJ_STUDY_INFO CSI,
                    (SELECT @ROWNUM := 0) TMP
                WHERE
                    1=1
                <if test='applyYear != null and !"".equals(applyYear)'>
                    AND DATE_FORMAT(START_DT, '%Y') = #{applyYear} OR  DATE_FORMAT(END_DT, '%Y') = #{applyYear}
                </if>
                <if test='studyClass != null and !"".equals(studyClass)'>
                    AND STUDY_CLASS_SN = #{studyClass}
                </if>
            ) RE
        ORDER BY RE.ROW_NUM DESC
    </select>

    <select id="getStudyInfoOne" resultType="map" parameterType="map">
        /* getStudyInfoOne */
        SELECT
            CSI.*,
            CASE WHEN HDI.DEPT_LEVEL = 2 THEN (SELECT DEPT_NAME FROM CAM_HR.DJ_DEPT_INFO DI WHERE HDI.PARENT_DEPT_SEQ = DI.DEPT_SEQ) ELSE HEI.DEPT_NAME END AS deptNm,
            CASE WHEN HDI.DEPT_LEVEL = 2 THEN HEI.DEPT_NAME ELSE "" END AS teamNm,
            HEI.POSITION_NAME AS positionNm,
            HEI.DUTY_NAME AS dutyNm,
            HEI.JOB_DETAIL AS jobDetailNm
        FROM
            CAMPUS.DJ_STUDY_INFO CSI
        LEFT JOIN
            CAM_HR.DJ_EMP_INFO HEI ON CSI.REG_EMP_SEQ = HEI.EMP_SEQ
        LEFT JOIN
            CAM_HR.DJ_DEPT_INFO HDI ON HEI.DEPT_SEQ = HDI.DEPT_SEQ
        WHERE STUDY_INFO_SN = #{pk}
    </select>

    <select id="getStudyUserList" resultType="map" parameterType="map">
        /* getStudyUserList */
        SELECT
            CSU.*
        FROM
            CAMPUS.DJ_STUDY_USER CSU
        WHERE STUDY_INFO_SN = #{pk}
        <if test='studyClassSn != null and !"".equals(studyClassSn)'>
            AND STUDY_CLASS_SN = #{studyClassSn}
        </if>
        ORDER BY STUDY_CLASS_SN, STUDY_USER_SN
    </select>

    <select id="getStudyJournalList" resultType="map" parameterType="map">
        /* getStudyJournalList */
        SELECT
            @ROWNUM := @ROWNUM + 1 AS ROW_NUM,
            CSJ.*
        FROM
            CAMPUS.DJ_STUDY_JOURNAL CSJ,
            (SELECT @ROWNUM := 0) TMP
        WHERE CSJ.STUDY_INFO_SN = #{studyInfoSn}
        ORDER BY CSJ.JOURNAL_DT DESC
    </select>

    <select id="getStudyJournalOne" resultType="map" parameterType="map">
        /* getStudyJournalOne */
        SELECT
            *
        FROM
            CAMPUS.DJ_STUDY_JOURNAL CSJ
        LEFT JOIN
            CAM_COMMON.DJ_FILE_INFO DFI
        ON
            CSJ.JOURNAL_FILE_SN = DFI.FILE_NO
        WHERE STUDY_JOURNAL_SN = #{studyJournalSn}
    </select>

    <select id="getStudyPropagList" resultType="map" parameterType="map">
        /* getStudyPropagList */
        SELECT
            CSJ.*
        FROM
            CAMPUS.DJ_STUDY_PROPAG CSJ
        WHERE CSJ.STUDY_INFO_SN = #{studyInfoSn}
        ORDER BY CSJ.PROPAG_DT DESC
    </select>

    <select id="getOjtPlanList" resultType="map" parameterType="map">
        /* getOjtPlanList */
        SELECT
            *
        FROM
            CAMPUS.DJ_OJT_PLAN COP
        WHERE
            COP.STUDY_INFO_SN = #{pk}
        AND COP.ACTIVE = 'Y'
    </select>

    <select id="getOjtPlanOne" resultType="map" parameterType="map">
        /* getOjtPlanOne */
        SELECT
            *
        FROM
            CAMPUS.DJ_OJT_PLAN COP
        WHERE COP.OJT_PLAN_SN = #{ojtPlanSn}
    </select>

    <select id="getOjtResultList" resultType="map" parameterType="map">
        /* getOjtResultList */
        SELECT
            *
        FROM
            CAMPUS.DJ_OJT_RESULT COR
        WHERE
            COR.STUDY_INFO_SN = #{pk}
          AND COR.ACTIVE = 'Y'
    </select>

    <select id="getOjtResultOne" resultType="map" parameterType="map">
        /* getOjtResultOne */
        SELECT
            *
        FROM
            CAMPUS.DJ_OJT_RESULT COR
        WHERE COR.OJT_RESULT_SN = #{ojtPlanSn}
    </select>

    <select id="getOpenStudyInfoStatList" resultType="map" parameterType="map">
        /* getOpenStudyInfoStatList */
        SELECT
            @ROWNUM := @ROWNUM + 1 AS ROW_NUM,
            COSI.*,
            IFNULL((SELECT SCOU.REG_EMP_NAME FROM CAMPUS.DJ_OPENSTUDY_USER SCOU WHERE COSI.OPEN_STUDY_INFO_SN = OPEN_STUDY_INFO_SN limit 1), '') AS MEMBER,
            IFNULL((SELECT COUNT(SCOU.REG_EMP_NAME)-1 FROM CAMPUS.DJ_OPENSTUDY_USER SCOU WHERE COSI.OPEN_STUDY_INFO_SN = OPEN_STUDY_INFO_SN), 0) AS MEMBER_COUNT
        FROM
            CAMPUS.DJ_OPENSTUDY_INFO COSI
        LEFT JOIN
            CAMPUS.DJ_OPENSTUDY_USER COU ON COSI.OPEN_STUDY_INFO_SN = COU.OPEN_STUDY_INFO_SN
        WHERE
            1=1
        AND STEP = 'D'
        AND COU.REG_EMP_SEQ = #{empSeq}
        AND DATE_FORMAT(COSI.OPEN_STUDY_DT, '%Y') = #{eduYear}
        ORDER BY COSI.OPEN_STUDY_INFO_SN DESC
    </select>

    <select id="getOpenStudyInfoList" resultType="map" parameterType="map">
        /* getOpenStudyInfoList */
        SELECT
            RE.*
        FROM
            (
                SELECT
                    @ROWNUM := @ROWNUM + 1 AS ROW_NUM,
                    COSI.*,
                    IFNULL((SELECT SCOU.REG_EMP_NAME FROM CAMPUS.DJ_OPENSTUDY_USER SCOU WHERE COSI.OPEN_STUDY_INFO_SN = OPEN_STUDY_INFO_SN limit 1), '') AS MEMBER,
                    IFNULL((SELECT COUNT(SCOU.REG_EMP_NAME)-1 FROM CAMPUS.DJ_OPENSTUDY_USER SCOU WHERE COSI.OPEN_STUDY_INFO_SN = OPEN_STUDY_INFO_SN), 0) AS MEMBER_COUNT,
                    IFNULL((SELECT COUNT(SCOU.REG_EMP_NAME) FROM CAMPUS.DJ_OPENSTUDY_USER SCOU WHERE COSI.OPEN_STUDY_INFO_SN = OPEN_STUDY_INFO_SN), 0) AS MEMBER_COUNT_TOTAL
                FROM
                    CAMPUS.DJ_OPENSTUDY_INFO COSI,
                    (SELECT @ROWNUM := 0) TMP
                WHERE
                    1=1
                <if test='step != null and !"".equals(step)'>
                    AND STEP = #{step}
                </if>
                ORDER BY COSI.REG_DT
            ) RE
        ORDER BY RE.OPEN_STUDY_INFO_SN DESC
    </select>

    <select id="getOpenStudyInfoOne" resultType="map" parameterType="map">
        /* getOpenStudyInfoOne */
        SELECT
            COSI.*,
            DATE_FORMAT(COSI.REG_DT, '%Y-%m-%d') AS REG_DATE,
            CASE WHEN HDI.DEPT_LEVEL = 2 THEN (SELECT DEPT_NAME FROM CAM_HR.DJ_DEPT_INFO DI WHERE HDI.PARENT_DEPT_SEQ = DI.DEPT_SEQ) ELSE HEI.DEPT_NAME END AS deptNm,
            CASE WHEN HDI.DEPT_LEVEL = 2 THEN HEI.DEPT_NAME ELSE "" END AS teamNm,
            HEI.POSITION_NAME AS positionNm,
            HEI.DUTY_NAME AS dutyNm
        FROM
            CAMPUS.DJ_OPENSTUDY_INFO COSI
        LEFT JOIN
            CAM_HR.DJ_EMP_INFO HEI ON COSI.REG_EMP_SEQ = HEI.EMP_SEQ
        LEFT JOIN
            CAM_HR.DJ_DEPT_INFO HDI ON HEI.DEPT_SEQ = HDI.DEPT_SEQ
        WHERE
            OPEN_STUDY_INFO_SN = #{pk}
    </select>

    <select id="getOpenStudyUserList" resultType="map" parameterType="map">
        /* getOpenStudyUserList */
        SELECT
            COSU.*,
            DATE_FORMAT(COSU.REG_DT, '%Y-%m-%d %H:%i:%s') AS REG_DATE
        FROM
            CAMPUS.DJ_OPENSTUDY_USER COSU
        WHERE
            OPEN_STUDY_INFO_SN = #{pk}
        <if test='userClass != null and !"".equals(userClass)'>
            AND USER_CLASS = #{userClass}
        </if>
    </select>

    <select id="getCommonEduStatList" resultType="map" parameterType="map">
        /* getCommonEduStatList */
        SELECT
            CCE.*,
            (SELECT COUNT(*) FROM CAMPUS.DJ_COMMON_EDU_USER SCCEU WHERE SCCEU.COMMON_EDU_SN = CCE.COMMON_EDU_SN AND PART_YN = 'Y' AND ACTIVE = 'Y') AS PART_COUNT,
            (SELECT COUNT(*) FROM CAMPUS.DJ_COMMON_EDU_USER SCCEU WHERE SCCEU.COMMON_EDU_SN = CCE.COMMON_EDU_SN AND PART_YN = 'N' AND ACTIVE = 'Y') AS NO_PART_COUNT
        FROM
            CAMPUS.DJ_COMMON_EDU CCE
        LEFT JOIN CAMPUS.DJ_COMMON_EDU_USER CCEU ON CCE.COMMON_EDU_SN = CCEU.COMMON_EDU_SN
        WHERE
            1=1
        AND CCEU.REG_EMP_SEQ = #{empSeq}
        AND DATE_FORMAT(CCE.START_DT, '%Y') = #{eduYear}
        AND CCEU.ACTIVE = 'Y'
        ORDER BY CCE.COMMON_EDU_SN DESC
    </select>

    <select id="getCommonEduList" resultType="map" parameterType="map">
        /* getCommonEduList */
        SELECT
            CE.*,
            (SELECT COUNT(*) FROM CAMPUS.DJ_COMMON_EDU_USER SCEU WHERE SCEU.COMMON_EDU_SN = CE.COMMON_EDU_SN AND PART_YN = 'Y' AND ACTIVE = 'Y') AS PART_COUNT,
            (SELECT COUNT(*) FROM CAMPUS.DJ_COMMON_EDU_USER SCEU WHERE SCEU.COMMON_EDU_SN = CE.COMMON_EDU_SN AND PART_YN = 'N' AND ACTIVE = 'Y') AS NO_PART_COUNT
        FROM
            CAMPUS.DJ_COMMON_EDU CE
        LEFT JOIN CAMPUS.DJ_COMMON_EDU_USER CEU ON CE.COMMON_EDU_SN = CEU.COMMON_EDU_SN
        WHERE
            1=1
    <![CDATA[
        AND
            (DATE_FORMAT(CE.START_DT, '%Y') = #{eduYear} OR DATE_FORMAT(CE.END_DT, '%Y') = #{eduYear})
    ]]>
        <if test='empSeq != null and !"".equals(empSeq)'>
            AND CEU.REG_EMP_SEQ = #{empSeq}
        </if>
        AND CEU.ACTIVE = 'Y'
        GROUP BY CE.COMMON_EDU_SN
        ORDER BY CE.COMMON_EDU_SN DESC
    </select>

    <select id="getCommonEduOne" resultType="map" parameterType="map">
        /* getCommonEduOne */
        SELECT
            CCE.*
        FROM
            CAMPUS.DJ_COMMON_EDU CCE
        WHERE
            COMMON_EDU_SN = #{pk}
    </select>

    <select id="getCommonEduUserList" resultType="map" parameterType="map">
        /* getCommonEduUserList */
        SELECT
            CCEU.*
        FROM
            CAMPUS.DJ_COMMON_EDU_USER CCEU
        WHERE
            COMMON_EDU_SN = #{pk}
        AND ACTIVE = 'Y'
    </select>

    <select id="getCommonEduUserAddList" resultType="map" parameterType="map">
        /* getCommonEduUserAddList */
        SELECT
            HEI.EMP_SEQ AS REG_EMP_SEQ,
            HEI.EMP_NAME_KR AS REG_EMP_NAME,
            CASE WHEN HDI.DEPT_LEVEL = 2 THEN (SELECT DEPT_NAME FROM CAM_HR.DJ_DEPT_INFO DI WHERE HDI.PARENT_DEPT_SEQ = DI.DEPT_SEQ) ELSE HEI.DEPT_NAME END AS REG_DEPT_NAME,
            CASE WHEN HDI.DEPT_LEVEL = 2 THEN HEI.DEPT_NAME ELSE "" END AS REG_TEAM_NAME,
            HEI.POSITION_NAME AS REG_POSITION_NAME,
            HEI.DUTY_NAME AS REG_DUTY_NAME
        FROM
            CAM_HR.DJ_EMP_INFO HEI
        LEFT JOIN
            CAM_HR.DJ_DEPT_INFO HDI ON HEI.DEPT_SEQ = HDI.DEPT_SEQ
        WHERE
            (DIVISION = 0 OR (DIVISION = 4 AND DIVISION_SUB != 3))
        AND WORK_STATUS_CODE = 'Y'
        AND EMP_SEQ NOT IN (SELECT REG_EMP_SEQ AS EMP_SEQ FROM CAMPUS.DJ_COMMON_EDU_USER SCCEU WHERE COMMON_EDU_SN = #{pk} AND ACTIVE = 'Y')
        ORDER BY EMP_NAME_KR
    </select>

    <select id="getEduStat" resultType="map" parameterType="map">
        /* getEduStat */
        SELECT
            CONCAT(HEI.DEPT_NAME, ' ', HEI.DEPT_TEAM_NAME) AS TEAM,
            HEI.DUTY_NAME,
            HEI.EMP_NAME_KR AS EMP_NAME,
            (CASE WHEN CEI.DUTY_CLASS = '1' THEN '주업무' ELSE '보조업무' END) AS DUTY_CLASS,
            CEC.LARGE_CATEGORY_NAME,
            CEC.EDU_CATEGORY_NAME,
            CONCAT('Level ', CECD.LEVEL_ID) AS LEVEL,
            CECD.EDU_CATEGORY_DETAIL_NAME,
            (SELECT SUM(SER.REAL_EDU_TIME) FROM CAMPUS.DJ_EDU_INFO SEI LEFT JOIN CAMPUS.DJ_EDU_RESULT SER ON CEI.EDU_INFO_ID = SER.EDU_INFO_ID WHERE SEI.REG_EMP_SEQ = CEI.REG_EMP_SEQ AND SEI.EDU_CATEGORY_DETAIL_NAME = CECD.EDU_CATEGORY_DETAIL_NAME AND CEI.DUTY_CLASS = SEI.DUTY_CLASS AND SEI.ACTIVE = 'Y' AND SER.STATUS = 100 AND SER.MNG_CHECK = 'Y') AS SUM_TIME,
            (SELECT COUNT(SER.REAL_EDU_TIME) FROM CAMPUS.DJ_EDU_INFO SEI LEFT JOIN CAMPUS.DJ_EDU_RESULT SER ON CEI.EDU_INFO_ID = SER.EDU_INFO_ID WHERE SEI.REG_EMP_SEQ = CEI.REG_EMP_SEQ AND SEI.EDU_CATEGORY_DETAIL_NAME = CECD.EDU_CATEGORY_DETAIL_NAME AND CEI.DUTY_CLASS = SEI.DUTY_CLASS AND SEI.ACTIVE = 'Y' AND SER.STATUS = 100 AND SER.MNG_CHECK = 'Y') AS COUNT_BY,
            (SELECT SUM(SER.REAL_EDU_TIME) FROM CAMPUS.DJ_EDU_INFO SEI LEFT JOIN CAMPUS.DJ_EDU_RESULT SER ON CEI.EDU_INFO_ID = SER.EDU_INFO_ID WHERE SEI.REG_EMP_SEQ = CEI.REG_EMP_SEQ AND SEI.ACTIVE = 'Y' AND SER.STATUS = 100 AND SER.MNG_CHECK = 'Y') AS SUM_ALL
        FROM
            CAMPUS.DJ_EDU_INFO CEI
        LEFT JOIN
            CAM_HR.DJ_EMP_INFO HEI ON CEI.REG_EMP_SEQ = HEI.EMP_SEQ
        LEFT JOIN
            CAMPUS.DJ_EDU_CATEGORY_DETAIL CECD ON CEI.EDU_CATEGORY_DETAIL_ID = CECD.EDU_CATEGORY_DETAIL_ID
        LEFT JOIN
            CAMPUS.DJ_EDU_CATEGORY CEC ON CEC.EDU_CATEGORY_ID = CECD.EDU_CATEGORY_ID
        LEFT JOIN
            CAMPUS.DJ_EDU_RESULT CER ON CEI.EDU_INFO_ID = CER.EDU_INFO_ID
        WHERE
            1=1
        AND CER.STATUS = 100
        AND CER.MNG_CHECK = 'Y'
        AND CEI.ACTIVE = 'Y' AND CER.STATUS = 100 AND CER.MNG_CHECK = 'Y'
        GROUP BY HEI.EMP_NAME_KR, DUTY_CLASS, EDU_CATEGORY_DETAIL_NAME
    </select>

    <select id="getEduAllStatList" resultType="map" parameterType="map">
        /* getEduAllStatList */
        SELECT
            CASE WHEN HDI.DEPT_LEVEL = 2 THEN CONCAT((SELECT DEPT_NAME FROM CAM_HR.DJ_DEPT_INFO DI WHERE HDI.PARENT_DEPT_SEQ = DI.DEPT_SEQ), " ",HEI.DEPT_NAME) ELSE HEI.DEPT_NAME END AS DEPT,
            CASE WHEN HEI.DUTY_NAME = "" THEN HEI.POSITION_NAME ELSE HEI.DUTY_NAME END AS POSITION,
            HEI.EMP_NAME_KR AS EMP_NAME,
            IFNULL((SELECT SUM(CER.REAL_EDU_TIME) FROM CAMPUS.DJ_EDU_INFO CEI LEFT JOIN CAMPUS.DJ_EDU_RESULT CER ON CEI.EDU_INFO_ID = CER.EDU_INFO_ID WHERE CEI.REG_EMP_SEQ = HEI.EMP_SEQ AND CEI.ACTIVE = 'Y' AND CER.STATUS = 100 AND CER.MNG_CHECK = 'Y' AND DATE_FORMAT(CER.APPROVAL_SEND_DATE, '%Y') = #{eduYear}), 0) AS PERSONAL_TIME,
            (SELECT COUNT(CER.REAL_EDU_TIME) FROM CAMPUS.DJ_EDU_INFO CEI LEFT JOIN CAMPUS.DJ_EDU_RESULT CER ON CEI.EDU_INFO_ID = CER.EDU_INFO_ID WHERE CEI.REG_EMP_SEQ = HEI.EMP_SEQ AND CEI.ACTIVE = 'Y' AND CER.STATUS = 100 AND CER.MNG_CHECK = 'Y' AND DATE_FORMAT(CER.APPROVAL_SEND_DATE, '%Y') = #{eduYear}) AS PERSONAL_COUNT,
            IFNULL((SELECT SUM(JOURNAL_TIME) FROM CAMPUS.DJ_STUDY_JOURNAL CSJ LEFT JOIN CAMPUS.DJ_STUDY_USER CSU ON CSJ.STUDY_INFO_SN = CSU.STUDY_INFO_SN WHERE CSU.STUDY_EMP_SEQ = HEI.EMP_SEQ AND ACTIVE = 'Y' AND CAPTAIN_APPOVAL_YN = 'Y' AND ASSISTANT_APPOVAL_YN = 'Y' AND DATE_FORMAT(CSJ.JOURNAL_DT, '%Y') = #{eduYear}), 0) AS STUDY_TIME,
            (SELECT COUNT(JOURNAL_TIME) FROM CAMPUS.DJ_STUDY_JOURNAL CSJ LEFT JOIN CAMPUS.DJ_STUDY_USER CSU ON CSJ.STUDY_INFO_SN = CSU.STUDY_INFO_SN WHERE CSU.STUDY_EMP_SEQ = HEI.EMP_SEQ AND ACTIVE = 'Y' AND CAPTAIN_APPOVAL_YN = 'Y' AND ASSISTANT_APPOVAL_YN = 'Y' AND DATE_FORMAT(CSJ.JOURNAL_DT, '%Y') = #{eduYear}) AS STUDY_COUNT,
            IFNULL((SELECT SUM(EDU_TIME) FROM CAMPUS.DJ_STUDY_INFO CSI LEFT JOIN CAMPUS.DJ_STUDY_USER CSU ON CSI.STUDY_INFO_SN = CSU.STUDY_INFO_SN WHERE CSU.STUDY_EMP_SEQ = HEI.EMP_SEQ AND CSI.STATUS = '100' AND CSI.STUDY_CLASS_SN = 2 AND DATE_FORMAT(CSI.START_DT, '%Y') = #{eduYear}), 0) AS PROPAG_TIME,
            IFNULL((SELECT COUNT(EDU_TIME) FROM CAMPUS.DJ_STUDY_INFO CSI LEFT JOIN CAMPUS.DJ_STUDY_USER CSU ON CSI.STUDY_INFO_SN = CSU.STUDY_INFO_SN WHERE CSU.STUDY_EMP_SEQ = HEI.EMP_SEQ AND CSI.STATUS = '100' AND CSI.STUDY_CLASS_SN = 2 AND DATE_FORMAT(CSI.START_DT, '%Y') = #{eduYear}), 0) AS PROPAG_COUNT,
            IFNULL((SELECT SUM(COR.EDU_TIME) FROM CAMPUS.DJ_STUDY_INFO CSI LEFT JOIN CAMPUS.DJ_OJT_RESULT COR ON COR.STUDY_INFO_SN = CSI.STUDY_INFO_SN LEFT JOIN CAMPUS.DJ_OJT_USER COU ON COR.OJT_RESULT_SN = COU.OJT_RESULT_SN WHERE COU.OJT_EMP_SEQ = HEI.EMP_SEQ AND CSI.STATUS = '101' AND ACTIVE = 'Y' AND DATE_FORMAT(COR.OJT_DT, '%Y') = #{eduYear}), 0) AS OJT_TIME,
            IFNULL((SELECT COUNT(COR.EDU_TIME) FROM CAMPUS.DJ_STUDY_INFO CSI LEFT JOIN CAMPUS.DJ_OJT_RESULT COR ON COR.STUDY_INFO_SN = CSI.STUDY_INFO_SN LEFT JOIN CAMPUS.DJ_OJT_USER COU ON COR.OJT_RESULT_SN = COU.OJT_RESULT_SN WHERE COU.OJT_EMP_SEQ = HEI.EMP_SEQ AND CSI.STATUS = '101' AND ACTIVE = 'Y' AND DATE_FORMAT(COR.OJT_DT, '%Y') = #{eduYear}), 0) AS OJT_COUNT,
            IFNULL((SELECT SUM(EDU_TIME) FROM CAMPUS.DJ_OPENSTUDY_INFO COI LEFT JOIN CAMPUS.DJ_OPENSTUDY_USER COU ON COI.OPEN_STUDY_INFO_SN = COU.OPEN_STUDY_INFO_SN WHERE COU.REG_EMP_SEQ = HEI.EMP_SEQ AND COI.STATUS = 100 AND COU.PART_YN = 'Y' AND DATE_FORMAT(COI.OPEN_STUDY_DT, '%Y') = #{eduYear}), 0) AS OPEN_STUDY_TIME,
            (SELECT COUNT(EDU_TIME) FROM CAMPUS.DJ_OPENSTUDY_INFO COI LEFT JOIN CAMPUS.DJ_OPENSTUDY_USER COU ON COI.OPEN_STUDY_INFO_SN = COU.OPEN_STUDY_INFO_SN WHERE COU.REG_EMP_SEQ = HEI.EMP_SEQ AND COI.STATUS = 100 AND COU.PART_YN = 'Y' AND DATE_FORMAT(COI.OPEN_STUDY_DT, '%Y') = #{eduYear}) AS OPEN_STUDY_COUNT,
            IFNULL((SELECT SUM(CCEU.REAR_EDU_TIME) FROM CAMPUS.DJ_COMMON_EDU CCE LEFT JOIN CAMPUS.DJ_COMMON_EDU_USER CCEU ON CCE.COMMON_EDU_SN = CCEU.COMMON_EDU_SN WHERE CCEU.REG_EMP_SEQ = HEI.EMP_SEQ AND CCE.STATUS = 100 AND CCEU.PART_YN = 'Y' AND CCEU.ACTIVE = 'Y' AND DATE_FORMAT(CCE.START_DT, '%Y') = #{eduYear}), 0) AS COMMON_EDU_TIME,
            (SELECT COUNT(CCEU.REAR_EDU_TIME) FROM CAMPUS.DJ_COMMON_EDU CCE LEFT JOIN CAMPUS.DJ_COMMON_EDU_USER CCEU ON CCE.COMMON_EDU_SN = CCEU.COMMON_EDU_SN WHERE CCEU.REG_EMP_SEQ = HEI.EMP_SEQ AND CCE.STATUS = 100 AND CCEU.PART_YN = 'Y' AND CCEU.ACTIVE = 'Y' AND DATE_FORMAT(CCE.START_DT, '%Y') = #{eduYear}) AS COMMON_EDU_COUNT
        FROM
            CAM_HR.DJ_EMP_INFO HEI
        LEFT JOIN
            CAM_HR.DJ_DEPT_INFO HDI ON HEI.DEPT_SEQ = HDI.DEPT_SEQ
        WHERE
            (DIVISION = 0 OR (DIVISION = 4 AND DIVISION_SUB != 3))
        <if test='empSeq != null and !"".equals(empSeq)'>
            AND HEI.EMP_SEQ = #{empSeq}
        </if>
        <if test='sEmpName != null and !"".equals(sEmpName)'>
            AND HEI.EMP_NAME_KR LIKE CONCAT('%', #{sEmpName}, '%')
        </if>
            AND WORK_STATUS_CODE = 'Y'
        ORDER BY EMP_NAME_KR
    </select>

    <select id="getDutyInfoList" resultType="map" parameterType="map">
        /* getDutyInfoList */
        SELECT
            CDI.*,
            DATE_FORMAT(CONCAT(CDI.DUTY_MONTH, '-01'), '%Y년 %m월') AS DUTY_MONTH_TEXT
        FROM
            CAMPUS.DJ_DUTY_INFO CDI
        WHERE
            1=1
        <if test='regEmpSeq != null and !"".equals(regEmpSeq)'>
            AND CDI.REG_EMP_SEQ = #{regEmpSeq}
        </if>
        ORDER BY CDI.DUTY_MONTH DESC, CDI.DUTY_INFO_SN DESC
    </select>

    <select id="getDutyInfoOne" resultType="map" parameterType="map">
        /* getDutyInfoOne */
        SELECT
            CDI.*,
            CASE WHEN HEI.DUTY_NAME = "" THEN HEI.POSITION_NAME ELSE HEI.DUTY_NAME END AS SPOT
        FROM
            CAMPUS.DJ_DUTY_INFO CDI
        LEFT JOIN
            CAM_HR.DJ_EMP_INFO HEI ON CDI.REG_EMP_SEQ = HEI.EMP_SEQ
        WHERE
            DUTY_INFO_SN = #{pk}
    </select>

    <select id="getDutyInfoMngList" resultType="map" parameterType="map">
        /* getDutyInfoMngList */
        SELECT
            HEI.EMP_SEQ AS EMP_SEQ,
            CASE WHEN HDI.DEPT_LEVEL = 2 THEN CONCAT((SELECT DEPT_NAME FROM CAM_HR.DJ_DEPT_INFO DI WHERE HDI.PARENT_DEPT_SEQ = DI.DEPT_SEQ), " ",HEI.DEPT_NAME) ELSE HEI.DEPT_NAME END AS DEPT,
            CASE WHEN HEI.DUTY_NAME = "" THEN HEI.POSITION_NAME ELSE HEI.DUTY_NAME END AS POSITION,
            HEI.EMP_NAME_KR AS EMP_NAME,
            HEI.OFFICE_TEL_NUM,
            IFNULL(NULL, 'N') AS TARGET_CHECK,
            IFNULL((SELECT SCET.EDU_TARGET_ID FROM campus.dj_edu_target SCET WHERE SCET.TARGET_YEAR = #{requestYear} AND SCET.REG_EMP_SEQ = HEI.EMP_SEQ), 'N') AS TARGET_CHECK,
            IFNULL((SELECT SCET.STATUS FROM campus.dj_edu_target SCET WHERE SCET.TARGET_YEAR = #{requestYear} AND SCET.REG_EMP_SEQ = HEI.EMP_SEQ), 'N') AS TARGET_STATUS,
            IFNULL((SELECT DATE_FORMAT(SCET.APPROVAL_RESULT_DATE, '%Y-%m-%d') FROM campus.dj_edu_target SCET WHERE SCET.TARGET_YEAR = #{requestYear} AND SCET.REG_EMP_SEQ = HEI.EMP_SEQ), '-') AS TARGET_APPROVAL_DATE,
            IFNULL((SELECT SCDI.DUTY_INFO_SN FROM CAMPUS.DJ_DUTY_INFO SCDI WHERE SCDI.DUTY_YEAR = #{requestYear} AND SCDI.REG_EMP_SEQ = HEI.EMP_SEQ ORDER BY SCDI.DUTY_MONTH DESC LIMIT 1), 'N') AS DUTY_CHECK,
            IFNULL((SELECT SCDI.STATUS FROM CAMPUS.DJ_DUTY_INFO SCDI WHERE SCDI.DUTY_YEAR = #{requestYear} AND SCDI.REG_EMP_SEQ = HEI.EMP_SEQ ORDER BY SCDI.DUTY_MONTH DESC LIMIT 1), 'N') AS DUTY_STATUS,
            IFNULL((SELECT DATE_FORMAT(APPROVAL_RESULT_DATE, '%Y-%m-%d') FROM CAMPUS.DJ_DUTY_INFO SCDI WHERE SCDI.DUTY_YEAR = #{requestYear} AND SCDI.REG_EMP_SEQ = HEI.EMP_SEQ ORDER BY SCDI.DUTY_MONTH DESC LIMIT 1), '-') AS DUTY_APPROVAL_DATE
        FROM
            CAM_HR.DJ_EMP_INFO HEI
        LEFT JOIN
            CAM_HR.DJ_DEPT_INFO HDI ON HEI.DEPT_SEQ = HDI.DEPT_SEQ
        WHERE
            (DIVISION = 0 OR (DIVISION = 4 AND DIVISION_SUB != 3))
        AND WORK_STATUS_CODE = 'Y'
        ORDER BY EMP_NAME_KR
    </select>

    <select id="getEduInfoFile" parameterType="map" resultType="map">
        /*getEduInfoFile*/
        SELECT
            *
        FROM
            CAM_COMMON.DJ_FILE_INFO
        WHERE
            FILE_CD = 'eduReq'
        AND CONTENT_ID = CONCAT('eduInfo_', #{EDU_INFO_ID})
    </select>

    <insert id="setEduInfoInsert" parameterType="map">
        /* setEduInfoInsert */
        INSERT INTO CAMPUS.DJ_EDU_INFO
            (
                REG_EMP_SEQ,
                REG_EMP_NAME,
                DEPT_NAME,
                EDU_CATEGORY_DETAIL_ID,
                EDU_CATEGORY_DETAIL_NAME,
                LEVEL_ID,
                DUTY_CLASS,
                EDU_NAME,
                EDU_OBJECT,
                EDU_CONTENT,
                START_DT,
                END_DT,
                TERM_DAY,
                TERM_TIME,
                CARE_NAME,
                CARE_LOCATION,
                CARE_TEL_NUM,
                <if test='eduMoney != null and eduMoney != ""'>
                    EDU_MONEY,
                </if>
                EDU_MONEY_TYPE,
                <if test='returnMoney != null and returnMoney != ""'>
                    RETURN_MONEY,
                </if>
                RETURN_DOC,
                ATTACH_DOC_NAME,
                REG_DT,
                <if test='eduFormType == "3"'>
                    OBJECT_FORUM_TYPE,
                    <if test='objectForumType == "1"'>
                        OBJECT_FORUM_VAL,
                    </if>
                </if>
                <if test='eduFormType == "5"'>
                    BOOK_WRITER_NAME,
                    BOOK_PAGE_VAL,
                    BOOK_PULISH_NAME,
                </if>
                <if test='eduFormType == "6"'>
                    TREA_ORIGIN,
                    TREA_UNIT,
                </if>
                <if test='eduFormType == "7"'>
                    TREA_TYPE,
                    TREA_USER,
                </if>
                <if test='eduFormType == "8"'>
                    BOOK_UNIT,
                </if>
                <if test='eduFormType == "10"'>
                    COMP_TYPE,
                </if>
                EDU_FORM_TYPE
            )
        VALUES
            (
                #{empSeq},
                #{empName},
                #{deptName},
                #{eduCategoryDetailId},
                #{eduCategoryDetailName},
                #{levelId},
                #{dutyClass},
                #{eduName},
                #{eduObject},
                #{eduContent},
                #{startDt},
                #{endDt},
                #{termDay},
                ifnull(#{termTime}, 0),
                #{careName},
                #{careLocation},
                #{careTelNum},
                <if test='eduMoney != null and eduMoney != ""'>
                    #{eduMoney},
                </if>
                #{eduMoneyType},
                <if test='returnMoney != null and returnMoney != ""'>
                    #{returnMoney},
                </if>
                #{returnDoc},
                #{attachDocName},
                #{regDate},
                <if test='eduFormType == "3"'>
                    #{objectForumText},
                    <if test='objectForumType == "1"'>
                        #{objectForumVal},
                    </if>
                </if>
                <if test='eduFormType == "5"'>
                    #{bookWriter},
                    #{bookPage},
                    #{bookPulish},
                </if>
                <if test='eduFormType == "6"'>
                    #{treaOrigin},
                    #{treaUnit},
                </if>
                <if test='eduFormType == "7"'>
                    #{treaType},
                    #{treaUser},
                </if>
                <if test='eduFormType == "8"'>
                    #{bookUnit},
                </if>
                <if test='eduFormType == "10"'>
                    #{compType},
                </if>
                #{eduFormType}
            )
        <selectKey keyProperty="eduInfoId" resultType="Integer" order="BEFORE">
            SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'CAMPUS' AND TABLE_NAME = 'DJ_EDU_INFO'
        </selectKey>
    </insert>

    <update id="setEduInfoUpdate" parameterType="map">
        /* setEduInfoUpdate */
        UPDATE
            CAMPUS.DJ_EDU_INFO
        SET
            <if test='eduFormType == "1"'>
                TERM_DAY = #{termDay},
                TERM_TIME = #{termTime},
            </if>
            EDU_CONTENT = #{eduContent}
        WHERE
            EDU_INFO_ID = #{eduInfoId}
    </update>

    <insert id="setEduResultInsert" parameterType="map">
        /* setEduResultInsert */
        INSERT INTO CAMPUS.DJ_EDU_RESULT
            (
                EDU_INFO_ID,
                EDU_TEACHER_NAME,
                <if test='eduFormType == "1" || eduFormType == "2"'>
                    EDU_EVAL,
                </if>
                EDU_POINT,
                FBLIST,
                ATTACH_DOC_NAME,
                REG_EMP_SEQ
            )
        VALUES
            (
                #{eduInfoId},
                #{eduTeacherName},
                <if test='eduFormType == "1" || eduFormType == "2"'>
                    #{eduEval},
                </if>
                #{eduPoint},
                #{FBList},
                #{attachDocName},
                #{empSeq}
            )
    </insert>

    <update id="setMngCheckUpd" parameterType="map">
        /* setMngCheckUpd */
        UPDATE
            CAMPUS.DJ_EDU_RESULT
        SET
            MNG_CHECK = #{mngCheck},
            REAL_EDU_TIME = #{realEduTime}
        WHERE
            EDU_INFO_ID = (SELECT SER.EDU_INFO_ID FROM CAMPUS.DJ_EDU_INFO SEI LEFT JOIN CAMPUS.DJ_EDU_RESULT SER ON SEI.EDU_INFO_ID = SER.EDU_INFO_ID WHERE SER.STATUS = 100 AND SER.EDU_INFO_ID = #{pk})
    </update>

    <insert id="setStudyInfoInsert" parameterType="map">
        /* setStudyInfoInsert */
        INSERT INTO CAMPUS.DJ_STUDY_INFO
            (
                STUDY_CLASS_SN,
                STUDY_CLASS_TEXT,
                STUDY_NAME,
                START_DT,
                END_DT,
                DATE_VAL,
                STUDY_LOCATION,
                STUDY_OBJECT,
                STUDY_CONTENT,
                STUDY_MONEY,
                STUDY_MONEY_VAL,
                ATTACH,
                <if test='startTime != null and startTime != ""'>
                    START_TIME,
                </if>
                <if test='endTime != null and endTime != ""'>
                    END_TIME,
                </if>
                <if test='eduTerm != null and eduTerm != ""'>
                    EDU_TERM,
                </if>
                <if test='eduTime != null and eduTime != ""'>
                    EDU_TIME,
                </if>
                REG_EMP_SEQ,
                REG_EMP_NAME,
                REG_DT
            )
        VALUES
            (
                #{studyClassSn},
                #{studyClassText},
                #{studyName},
                #{startDt},
                #{endDt},
                #{dateVal},
                #{studyLocation},
                #{studyObject},
                #{studyContent},
                #{studyMoney},
                #{studyMoneyVal},
                #{attach},
                <if test='startTime != null and startTime != ""'>
                    #{startTime},
                </if>
                <if test='endTime != null and endTime != ""'>
                    #{endTime},
                </if>
                <if test='eduTerm != null and eduTerm != ""'>
                    #{eduTerm},
                </if>
                <if test='eduTime != null and eduTime != ""'>
                    #{eduTime},
                </if>
                #{empSeq},
                #{empName},
                #{regDate}
            )
        <selectKey keyProperty="studyUserSn" resultType="Integer" order="BEFORE">
            SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'CAMPUS' AND TABLE_NAME = 'DJ_STUDY_INFO'
        </selectKey>
    </insert>

    <insert id="setStudyUserInsert" parameterType="map">
        /* setStudyUserInsert */
        INSERT INTO CAMPUS.DJ_STUDY_USER
            (
                STUDY_INFO_SN,
                <if test='studyClassSn != null and studyClassSn != ""'>
                    STUDY_CLASS_SN,
                </if>
                <if test='studyClassText != null and studyClassText != ""'>
                    STUDY_CLASS_TEXT,
                </if>
                STUDY_EMP_SEQ,
                STUDY_EMP_NAME,
                STUDY_DEPT_NAME,
                STUDY_TEAM_NAME,
                STUDY_POSITION_NAME,
                STUDY_DUTY_NAME
            )
        VALUES
            (
                #{studyUserSn},
                <if test='studyClassSn != null and studyClassSn != ""'>
                    #{studyClassSn},
                </if>
                <if test='studyClassText != null and studyClassText != ""'>
                    #{studyClassText},
                </if>
                #{empSeq},
                #{studyEmpName},
                #{studyDeptName},
                #{studyTeamName},
                #{studyPositionName},
                #{studyDutyName}
            )
    </insert>

    <update id="setStudyUserMngReset" parameterType="map">
        /* setStudyUserMngReset */
        UPDATE
            CAMPUS.DJ_STUDY_USER
        SET
            STUDY_CLASS_SN = '3',
            STUDY_CLASS_TEXT = '조원'
        WHERE
            STUDY_INFO_SN = #{studyInfoSn}
        AND STUDY_CLASS_SN = #{studyClassSn}
    </update>

    <update id="setStudyUserMngUpdate" parameterType="map">
        /* setStudyUserMngUpdate */
        UPDATE
            CAMPUS.DJ_STUDY_USER
        SET
            STUDY_CLASS_SN = #{studyClassSn},
            STUDY_CLASS_TEXT = #{studyClassText}
        WHERE
            STUDY_USER_SN = #{studyUserSn}
    </update>

    <update id="studyReq" parameterType="map">
        /* studyReq */
        UPDATE
            CAMPUS.DJ_STUDY_INFO
        SET
            STATUS = #{status}
        WHERE
            STUDY_INFO_SN = #{studyInfoSn}
    </update>

    <insert id="setStudyJournalInsert" parameterType="map">
        /* setStudyJournalInsert */
        INSERT INTO CAMPUS.DJ_STUDY_JOURNAL
            (
                STUDY_INFO_SN,
                STUDY_NAME,
                STUDY_EMP_SEQ,
                STUDY_EMP_NAME,
                JOURNAL_DT,
                JOURNAL_START_TIME,
                JOURNAL_END_TIME,
                JOURNAL_TIME,
                JOURNAL_LOCATE,
                JOURNAL_CONTENT,
                JOURNAL_AMT,
                JOURNAL_AMT_CLASS,
                JOURNAL_AMT_CLASS_TEXT,
                JOURNAL_AMT_ETC,
                REG_EMP_NAME
            )
        VALUES
            (
                #{studyInfoSn},
                #{studyName},
                #{studyEmpSeq},
                #{studyEmpName},
                #{journalDt},
                #{journalStartTime},
                #{journalEndTime},
                #{realEduTime},
                #{studyLocation},
                #{studyContent},
                #{studyMoney},
                #{journalAmtClass},
                #{journalAmtClassText},
                #{journalAmtEtc},
                #{regEmpName}
            )
        <selectKey keyProperty="studyJournalSn" resultType="Integer" order="BEFORE">
            SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'CAMPUS' AND TABLE_NAME = 'DJ_STUDY_JOURNAL'
        </selectKey>
    </insert>

    <insert id="setStudyResult" parameterType="map">
        /*setStudyResult*/
        INSERT INTO CAMPUS.DJ_STUDY_RESULT
            (
                STUDY_INFO_SN,
                STUDY_NAME,
                STUDY_EMP_SEQ,
                STUDY_EMP_NAME,
                STUDY_RESULT_DT,
                STUDY_RESULT_START_TIME,
                STUDY_RESULT_END_TIME,
                STUDY_RESULT_TIME,
                STUDY_RESULT_LOCATE,
                STUDY_RESULT_CONTENT,
                STUDY_RESULT_AMT,
                REG_EMP_NAME
            )
        VALUES
            (
                #{studyInfoSn},
                #{studyName},
                #{studyEmpSeq},
                #{studyEmpName},
                #{studyResultDt},
                #{studyResultStartTime},
                #{studyResultEndTime},
                #{studyResultTime},
                #{studyResultLocate},
                #{studyResultContent},
                #{studyResultAmt},
                #{regEmpName}
            )
        <selectKey keyProperty="studyResultSn" resultType="Integer" order="BEFORE">
            SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'CAMPUS' AND TABLE_NAME = 'DJ_STUDY_RESULT'
        </selectKey>
    </insert>

    <delete id="deleteStudyJournal" parameterType="map">
        /* deleteStudyJournal */
        DELETE FROM CAMPUS.DJ_STUDY_JOURNAL
        WHERE
            STUDY_JOURNAL_SN = #{studyJournalSn}
    </delete>

    <update id="setStudyJournalUpdate" parameterType="map">
        /*setStudyJournalUpdate*/
        UPDATE CAMPUS.DJ_STUDY_JOURNAL
        SET
            JOURNAL_FILE_SN = #{file_no}
        WHERE
            STUDY_JOURNAL_SN = #{studyJournalSn}
    </update>

    <update id="setStudyPropagUpdate" parameterType="map">
        /*setStudyPropagUpdate*/
        UPDATE CAMPUS.DJ_STUDY_PROPAG
        SET
            PROPAG_FILE_SN = #{file_no}
        WHERE
            STUDY_PROPAG_SN = #{studyPropagSn}
    </update>

    <update id="setStudyJournalApp" parameterType="map">
        /* setStudyJournalApp */
        UPDATE
            CAMPUS.DJ_STUDY_JOURNAL
        SET
            <if test='studyClassSn == 1'>
                CAPTAIN_APPOVAL_YN = #{status}
            </if>
            <if test='studyClassSn == 2'>
                ASSISTANT_APPOVAL_YN = #{status}
            </if>
        WHERE
            STUDY_JOURNAL_SN = #{studyJournalSn}
    </update>

    <insert id="setOjtPlanInsert" parameterType="map">
        /* setOjtPlanInsert */
        INSERT INTO CAMPUS.DJ_OJT_PLAN
            (
                STUDY_INFO_SN,
                START_DT,
                END_DT,
                TITLE,
                ETC,
                REG_EMP_SEQ,
                REG_EMP_NAME
            )
        VALUES
            (
                #{studyInfoSn},
                #{startDt},
                #{endDt},
                #{title},
                #{etc},
                #{regEmpSeq},
                #{regEmpName}
            )
    </insert>

    <select id="getStudyResultData" parameterType="map" resultType="map">
        /*getStudyResultData*/
        SELECT * FROM CAMPUS.DJ_STUDY_RESULT
        WHERE
            STUDY_RESULT_SN = #{studyResultSn}
    </select>

    <update id="setOjtPlanUpdate" parameterType="map">
        /* setOjtPlanUpdate */
        UPDATE
            CAMPUS.DJ_OJT_PLAN
        SET
            TITLE = #{title},
            ETC = #{etc}
        WHERE
            OJT_PLAN_SN = #{ojtPlanSn}
    </update>

    <update id="setOjtPlanDelete" parameterType="map">
        /* setOjtPlanDelete */
        UPDATE
            CAMPUS.DJ_OJT_PLAN
        SET
            ACTIVE = 'N'
        WHERE
            OJT_PLAN_SN = #{ojtPlanSn}
    </update>

    <insert id="setOjtResultInsert" parameterType="map">
        /* setOjtResultInsert */
        INSERT INTO CAMPUS.DJ_OJT_RESULT
            (
                STUDY_INFO_SN,
                OJT_DT,
                STUDY_CONT_A,
                STUDY_CONT_B,
                START_TIME,
                END_TIME,
                EDU_FULL_TIME,
                EDU_TIME,
                EDU_TIME_HALF,
                LOCATION,
                SAVE_TYPE,
                SAVE_TYPE_TEXT,
                REG_EMP_SEQ,
                REG_EMP_NAME
            )
        VALUES
            (
                #{studyInfoSn},
                #{ojtDt},
                #{studyContA},
                #{studyContB},
                #{startTime},
                #{endTime},
                CEILING(TIME_TO_SEC((SELECT DATE_FORMAT(TIMEDIFF(#{endTime}, #{startTime}), '%H:%m'))) / 3600),
                IF(CEILING(TIME_TO_SEC((SELECT DATE_FORMAT(TIMEDIFF(#{endTime}, #{startTime}), '%H:%m'))) / 3600) > 2, 2,CEILING(TIME_TO_SEC((SELECT DATE_FORMAT(TIMEDIFF(#{endTime}, #{startTime}), '%H:%m'))) / 3600)),
                IF((CEILING(TIME_TO_SEC((SELECT DATE_FORMAT(TIMEDIFF(#{endTime}, #{startTime}), '%H:%m'))) / 3600) / 2) > 2, 2, (CEILING(TIME_TO_SEC((SELECT DATE_FORMAT(TIMEDIFF(#{endTime}, #{startTime}), '%H:%m'))) / 3600) / 2)),
                #{location},
                #{saveType},
                #{saveTypeText},
                #{regEmpSeq},
                #{regEmpName}
            )
        <selectKey keyProperty="ojtResultSn" resultType="Integer" order="BEFORE">
            SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'CAMPUS' AND TABLE_NAME = 'DJ_OJT_RESULT'
        </selectKey>
    </insert>

    <update id="setOjtResultUpdate" parameterType="map">
        /*setOjtResultUpdate*/
        UPDATE
            CAMPUS.DJ_OJT_RESULT
        SET
            FILE_SN = #{file_no}
        WHERE
            OJT_RESULT_SN = #{ojtResultSn}
    </update>

    <insert id="setOjtUserInsert" parameterType="map">
        /* setOjtUserInsert */
        INSERT INTO CAMPUS.DJ_OJT_USER
            (
                OJT_RESULT_SN,
                <if test='studyClassSn != null and studyClassSn != ""'>
                    OJT_CLASS_SN,
                </if>
                <if test='studyClassText != null and studyClassText != ""'>
                    OJT_CLASS_TEXT,
                </if>
                OJT_EMP_SEQ,
                OJT_EMP_NAME,
                OJT_DEPT_NAME,
                OJT_TEAM_NAME,
                OJT_POSITION_NAME,
                OJT_DUTY_NAME
            )
        VALUES
            (
                #{ojtResultSn},
                <if test='studyClassSn != null and studyClassSn != ""'>
                    #{studyClassSn},
                </if>
                <if test='studyClassText != null and studyClassText != ""'>
                    #{studyClassText},
                </if>
                #{empSeq},
                #{studyEmpName},
                #{studyDeptName},
                #{studyTeamName},
                #{studyPositionName},
                #{studyDutyName}
            )
    </insert>

    <insert id="setPropagUserInsert" parameterType="map">
        /* setPropagUserInsert */
        INSERT INTO CAMPUS.DJ_PROPAG_USER
            (
                STUDY_PROPAG_SN,
                <if test='studyClassSn != null and studyClassSn != ""'>
                    PROPAG_CLASS_SN,
                </if>
                <if test='studyClassText != null and studyClassText != ""'>
                    PROPAG_CLASS_TEXT,
                </if>
                PROPAG_EMP_SEQ,
                PROPAG_EMP_NAME,
                PROPAG_DEPT_NAME,
                PROPAG_TEAM_NAME,
                PROPAG_POSITION_NAME,
                PROPAG_DUTY_NAME
            )
        VALUES
            (
                #{studyPropagSn},
                <if test='studyClassSn != null and studyClassSn != ""'>
                    #{studyClassSn},
                </if>
                <if test='studyClassText != null and studyClassText != ""'>
                    #{studyClassText},
                </if>
                #{empSeq},
                #{studyEmpName},
                #{studyDeptName},
                #{studyTeamName},
                #{studyPositionName},
                #{studyDutyName}
            )
    </insert>

    <insert id="setStudyPropagInsert" parameterType="map">
        /* setStudyPropagInsert */
        INSERT INTO CAMPUS.DJ_STUDY_PROPAG
            (
                STUDY_INFO_SN,
                PROPAG_DT,
                START_TIME,
                END_TIME,
                EDU_TIME,
                LOCATION,
                SAVE_TYPE,
                PROPAG_CONTENT,
                REG_EMP_SEQ,
                REG_EMP_NAME
            )
        VALUES
            (
                #{studyInfoSn},
                #{propagDt},
                #{startTime},
                #{endTime},
                CEILING(TIME_TO_SEC((SELECT DATE_FORMAT(TIMEDIFF(#{endTime}, #{startTime}), '%H:%m'))) / 3600),
                #{location},
                #{saveType},
                #{propagContent},
                #{regEmpSeq},
                #{regEmpName}
            )
        <selectKey keyProperty="ojtResultSn" resultType="Integer" order="BEFORE">
            SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'CAMPUS' AND TABLE_NAME = 'DJ_OJT_RESULT'
        </selectKey>
    </insert>

    <insert id="setOpenStudyInfoIns" parameterType="map">
        /* setOpenStudyInfoIns */
        INSERT INTO CAMPUS.DJ_OPENSTUDY_INFO
            (
                OPEN_STUDY_NAME,
                OPEN_STUDY_DT,
                START_TIME,
                END_TIME,
                EDU_TIME,
                OPEN_STUDY_DETAIL,
                OPEN_STUDY_LOCATION,
                REG_EMP_SEQ,
                REG_EMP_NAME
            )
        VALUES
            (
                #{openStudyName},
                #{openStudyDt},
                #{startTime},
                #{endTime},
                #{realEduTime},
                #{openStudyDetail},
                #{openStudyLocation},
                #{regEmpSeq},
                #{regEmpName}
            )
    </insert>

    <update id="setOpenStudyInfoUpd" parameterType="map">
        /* setOpenStudyInfoUpd */
        UPDATE
            CAMPUS.DJ_OPENSTUDY_INFO
        SET
            OPEN_STUDY_NAME = #{openStudyName},
            OPEN_STUDY_DT = #{openStudyDt},
            START_TIME = #{startTime},
            END_TIME = #{endTime},
            EDU_TIME = #{realEduTime},
            OPEN_STUDY_DETAIL = #{openStudyDetail},
            OPEN_STUDY_LOCATION = #{openStudyLocation}
        WHERE
            OPEN_STUDY_INFO_SN = #{pk}
    </update>

    <update id="setOpenNextStep" parameterType="map">
        /* setOpenNextStep */
        UPDATE
            CAMPUS.DJ_OPENSTUDY_INFO
        SET
            STEP = #{step}
        WHERE
            OPEN_STUDY_INFO_SN = #{pk}
    </update>

    <insert id="setOpenStudyUser" parameterType="map">
        /* setOpenStudyUser */
        INSERT INTO CAMPUS.DJ_OPENSTUDY_USER
            (
                OPEN_STUDY_INFO_SN,
                REG_EMP_SEQ,
                REG_EMP_NAME,
                REG_DEPT_NAME,
                REG_TEAM_NAME,
                REG_POSITION_NAME,
                REG_DUTY_NAME
            )
        VALUES
            (
                #{pk},
                #{regEmpSeq},
                #{regEmpName},
                #{regDeptName},
                #{regTeamSeq},
                #{regPositionName},
                #{regDutyName}
            )
    </insert>

    <update id="setOpenStudyResultUpd" parameterType="map">
        /* setOpenStudyResultUpd */
        UPDATE
            CAMPUS.DJ_OPENSTUDY_INFO
        SET
            OPEN_STUDY_AMT = #{openStudyAmt},
            OPEN_STUDY_AMT_TEXT = #{openStudyAmtText},
            OPEN_STUDY_RESULT = #{openStudyResult},
            STEP = #{step}
        WHERE
            OPEN_STUDY_INFO_SN = #{pk}
    </update>

    <update id="setOpenStudyUserResultUpd" parameterType="map">
        /* setOpenStudyUserResultUpd */
        UPDATE
            CAMPUS.DJ_OPENSTUDY_USER
        SET
            USER_CLASS = #{userClass},
            USER_CLASS_TEXT = #{userClassText},
            PART_YN = #{partYN}
        WHERE
            OPEN_STUDY_USER_SN = #{pk}
    </update>

    <update id="setOpenStudyCertReq" parameterType="map">
        /* setOpenStudyCertReq */
        UPDATE
            CAMPUS.DJ_OPENSTUDY_INFO
        SET
            STATUS = #{status}
            <if test='"100".equals(status)'>
                , APPROVAL_EMP_SEQ = #{regEmpSeq}
                , APPROVAL_EMP_NAME = #{regEmpName}
                , APPROVAL_RESULT_DATE = NOW()
            </if>
        WHERE
            OPEN_STUDY_INFO_SN = #{pk}
    </update>

    <insert id="setCommonEduIns" parameterType="map">
        /* setCommonEduIns */
        INSERT INTO CAMPUS.DJ_COMMON_EDU
            (
                COMMON_CLASS,
                COMMON_CLASS_TEXT,
                START_DT,
                END_DT,
                EDU_NAME,
                EDU_TIME,
                EDU_LOCATION,
                EDU_TITLE,
                EDU_DETAIL,
                STATUS,
                REG_EMP_SEQ,
                REG_EMP_NAME
            )
        VALUES
            (
                #{commonClass},
                #{commonClassText},
                #{startDt},
                #{endDt},
                #{eduName},
                #{eduTime},
                #{eduLocation},
                #{eduTitle},
                #{eduDetail},
                #{status},
                #{regEmpSeq},
                #{regEmpName}
            )
    </insert>

    <update id="setCommonEduUpd" parameterType="map">
        /* setCommonEduUpd */
        UPDATE
            CAMPUS.DJ_COMMON_EDU
        SET
            COMMON_CLASS = #{commonClass},
            COMMON_CLASS_TEXT = #{commonClassText},
            START_DT = #{startDt},
            END_DT = #{endDt},
            EDU_NAME = #{eduName},
            EDU_TIME = #{eduTime},
            EDU_LOCATION = #{eduLocation},
            EDU_TITLE = #{eduTitle},
            EDU_DETAIL = #{eduDetail},
            STATUS = #{status}
        WHERE
            COMMON_EDU_SN = #{pk}
    </update>

    <insert id="setCommonEduAddUserAll" parameterType="map">
        /* setCommonEduAddUserAll */
        INSERT INTO CAMPUS.DJ_COMMON_EDU_USER
            (COMMON_EDU_SN, REG_EMP_SEQ, REG_EMP_NAME, REG_DEPT_NAME, REG_TEAM_NAME, REG_POSITION_NAME, REG_DUTY_NAME, REAR_EDU_TIME)
        SELECT
            #{pk} AS COMMON_EDU_SN,
            HEI.EMP_SEQ AS REG_EMP_SEQ,
            HEI.EMP_NAME_KR AS REG_EMP_NAME,
            CASE WHEN HDI.DEPT_LEVEL = 2 THEN (SELECT DEPT_NAME FROM CAM_HR.DJ_DEPT_INFO DI WHERE HDI.PARENT_DEPT_SEQ = DI.DEPT_SEQ) ELSE HEI.DEPT_NAME END AS REG_DEPT_NAME,
            CASE WHEN HDI.DEPT_LEVEL = 2 THEN HEI.DEPT_NAME ELSE "" END AS REG_TEAM_NAME,
            HEI.POSITION_NAME AS REG_POSITION_NAME,
            HEI.DUTY_NAME AS REG_DUTY_NAME,
            (SELECT EDU_TIME FROM CAMPUS.DJ_COMMON_EDU SCCEU WHERE COMMON_EDU_SN = #{pk}) AS REAR_EDU_TIME
        FROM
            CAM_HR.DJ_EMP_INFO HEI
        LEFT JOIN
            CAM_HR.DJ_DEPT_INFO HDI ON HEI.DEPT_SEQ = HDI.DEPT_SEQ
        WHERE
            (DIVISION = 0 OR (DIVISION = 4 AND DIVISION_SUB != 3))
        AND WORK_STATUS_CODE = 'Y'
        AND EMP_SEQ NOT IN (SELECT REG_EMP_SEQ AS EMP_SEQ FROM CAMPUS.DJ_COMMON_EDU_USER SCCEU WHERE COMMON_EDU_SN = #{pk} AND ACTIVE = 'Y')
        <if test='userList != null and !"".equals(userList)'>
            AND EMP_SEQ IN (${userList})
        </if>
        ORDER BY EMP_NAME_KR
    </insert>

    <update id="setCommonEduUserUpd" parameterType="map">
        /* setCommonEduUserUpd */
        UPDATE
            CAMPUS.DJ_COMMON_EDU_USER
        SET
            <choose>
                <when test="partYn != null and !''.equals(partYn)">
                    PART_YN = #{partYn}
                </when>
                <when test="active != null and !''.equals(active)">
                    ACTIVE = #{active}
                </when>
            </choose>
        WHERE
            COMMON_EDU_SN = #{pk}
        AND COMMON_EDU_USER_SN in (${userList})
    </update>

    <update id="setCommonEduUserTimeUpd" parameterType="map">
        /* setCommonEduUserTimeUpd */
        UPDATE
            CAMPUS.DJ_COMMON_EDU_USER
        SET
            REAR_EDU_TIME = #{eduTime}
        WHERE
            COMMON_EDU_USER_SN = #{pk}
    </update>

    <insert id="setTargetInsert" parameterType="map">
        /* setTargetInsert */
        INSERT INTO CAMPUS.DJ_EDU_TARGET
            (
                TARGET_YEAR,
                TARGET_CODE,
                LOGIN_ID,
                REG_EMP_SEQ
            )
        VALUES
            (
                #{targetYear},
                #{targetCode},
                #{loginId},
                #{empSeq}
            )
    </insert>

    <insert id="setTargetDetailInsert" parameterType="map">
        /* setTargetDetailInsert */
        INSERT INTO CAMPUS.DJ_EDU_TARGET_DETAIL
            (
                EDU_TARGET_ID,
                EDU_CATEGORY_DETAIL_ID,
                DUTY_CLASS,
                REG_EMP_SEQ
            )
        VALUES
        <foreach collection="eduCategoryDetailIdList" item="item" separator=" , ">
            (
                (SELECT EDU_TARGET_ID FROM CAMPUS.DJ_EDU_TARGET WHERE TARGET_YEAR = #{targetYear} AND REG_EMP_SEQ = #{empSeq}),
                #{item.eduCategoryDetailId},
                #{dutyClass},
                #{empSeq}
            )
        </foreach>
    </insert>

    <update id="setEduTargetDetailUpdate" parameterType="map">
        /* setEduTargetDetailUpdate */
        UPDATE
            CAMPUS.DJ_EDU_TARGET_DETAIL
        SET
            TARGET_CLASS = #{classNum}
        WHERE
            EDU_TARGET_DETAIL_ID IN
        <foreach collection="eduTargetDetailIdList" item="item" open="(" separator="," close=")">
            #{item.eduTargetDetailId}
        </foreach>
    </update>

    <delete id="setTargetDetailDelete" parameterType="map">
        /* setTargetDetailDelete */
        DELETE FROM
            CAMPUS.DJ_EDU_TARGET_DETAIL
        WHERE
            EDU_TARGET_ID = (
                SELECT
                    EDU_TARGET_ID
                FROM
                    CAMPUS.DJ_EDU_TARGET
                WHERE
                    TARGET_YEAR = #{targetYear}
                AND REG_EMP_SEQ = #{empSeq}
            )
        AND DUTY_CLASS = #{dutyClass}
    </delete>

    <insert id="setEduPlanInsert" parameterType="map">
        /* setEduPlanInsert */
        INSERT INTO CAMPUS.DJ_EDU_PLAN
            (
                EDU_CATEGORY_ID,
                TARGET_YEAR,
                DUTY_CLASS,
                EDU_PLAN,
                REG_EMP_SEQ
            )
        VALUES
            (
                #{eduCategoryId},
                #{targetYear},
                #{dutyClass},
                #{eduPlan},
                #{empSeq}
            )
    </insert>

    <update id="setEduPlanUpdate" parameterType="map">
        /* setEduPlanUpdate */
        UPDATE
            CAMPUS.DJ_EDU_PLAN
        SET
            EDU_PLAN = #{eduPlan}
        WHERE
            EDU_PLAN_ID = #{eduPlanId}
    </update>

    <update id="updateEduInfoApprStat" parameterType="map">
        /* updateEduInfoApprStat */
        UPDATE
            CAMPUS.DJ_EDU_INFO
        SET
            <if test='docId != null and !"".equals(docId)'>
                DOC_ID = #{docId},
            </if>
            STATUS = ${status},
            APPROVAL_SEND_DATE = DATE_FORMAT(NOW(), '%Y-%m-%d'),
            APPROVAL_EMP_SEQ = #{empSeq}
        WHERE
            EDU_INFO_ID = #{eduInfoId}
    </update>

    <update id="updateEduInfoFinalApprStat" parameterType="map">
        /* updateEduInfoFinalApprStat */
        UPDATE
            CAMPUS.DJ_EDU_INFO
        SET
            STATUS = ${status},
            APPROVAL_EMP_SEQ = #{empSeq}
        WHERE
            EDU_INFO_ID = #{eduInfoId}
    </update>

    <update id="updateEduResultApprStat" parameterType="map">
        /* updateEduResultApprStat */
        UPDATE
        CAMPUS.DJ_EDU_RESULT
        SET
        <if test='docId != null and !"".equals(docId)'>
            DOC_ID = #{docId},
        </if>
        STATUS = ${status},
        APPROVAL_SEND_DATE = DATE_FORMAT(NOW(), '%Y-%m-%d'),
        APPROVAL_EMP_SEQ = #{empSeq}
        WHERE
        EDU_INFO_ID = #{eduInfoId}
    </update>

    <update id="updateEduResultFinalApprStat" parameterType="map">
        /* updateEduResultFinalApprStat */
        UPDATE
            CAMPUS.DJ_EDU_RESULT
        SET
            STATUS = ${status},
            APPROVAL_EMP_SEQ = #{empSeq}
        WHERE
            EDU_INFO_ID = #{eduInfoId}
    </update>

    <update id="updateApprStat" parameterType="map">
        /* updateApprStat */
        UPDATE
            CAMPUS.DJ_EDU_TARGET
        SET
            STATUS = ${status}
        WHERE
            TARGET_YEAR = #{targetYear}
        AND REG_EMP_SEQ = #{empSeq}
    </update>

    <insert id="setEduCode" parameterType="map">
        /* setEduCode */
        INSERT INTO CAMPUS.DJ_CAMPUS_CODE
            (
                CAMPUS_GROUP_CODE_ID,
                CAMPUS_MD_CODE,
                CAMPUS_MD_CODE_NM,
                CAMPUS_DT_CODE,
                CAMPUS_DT_CODE_NM,
                REG_EMP_SEQ
            )
        VALUES
            (
                #{groupCode},
                #{midleCode},
                #{midleCodeName},
                (SELECT IFNULL(MAX(SCCC.CAMPUS_DT_CODE), 0)+1 FROM CAMPUS.DJ_CAMPUS_CODE SCCC WHERE SCCC.CAMPUS_MD_CODE = #{midleCode}),
                #{reqText},
                #{regEmpSeq}
            )
    </insert>

    <insert id="setEduCategory" parameterType="map">
        /* setEduCategory */
        INSERT INTO CAMPUS.DJ_EDU_CATEGORY
            (
                EDU_CATEGORY_NAME,
                LARGE_CATEGORY_ID,
                LARGE_CATEGORY_NAME,
                REG_EMP_SEQ
            )
        VALUES
            (
                #{reqText},
                #{largeCategoryId},
                #{largeCategoryName},
                #{regEmpSeq}
            )
    </insert>

    <insert id="setEduCategoryDetail" parameterType="map">
        /* setEduCategoryDetail */
        INSERT INTO CAMPUS.DJ_EDU_CATEGORY_DETAIL
            (
                EDU_CATEGORY_DETAIL_NAME,
                EDU_CATEGORY_ID,
                EDU_CATEGORY_NAME,
                LEVEL_ID,
                LEVEL_NAME,
                REG_EMP_SEQ
            )
        VALUES
            (
                #{reqText},
                #{eduCategoryId},
                #{eduCategoryName},
                #{level},
                #{levelName},
                #{regEmpSeq}
            )
    </insert>

    <update id="setEduCodeUpd" parameterType="map">
        /* setEduCodeUpd */
        UPDATE
            CAMPUS.DJ_CAMPUS_CODE
        SET
            CAMPUS_DT_CODE_NM = #{reqText}
        WHERE
            CAMPUS_GROUP_CODE_ID = #{groupCode}
        AND CAMPUS_DT_CODE = #{pk}
    </update>

    <update id="setEduCategoryUpd" parameterType="map">
        /* setEduCategoryUpd */
        UPDATE
            CAMPUS.DJ_EDU_CATEGORY
        SET
            EDU_CATEGORY_NAME = #{reqText}
        WHERE
            EDU_CATEGORY_ID = #{pk}
    </update>

    <update id="setEduCategoryDetailUpd" parameterType="map">
        /* setEduCategoryDetailUpd */
        UPDATE
            CAMPUS.DJ_EDU_CATEGORY_DETAIL
        SET
            EDU_CATEGORY_DETAIL_NAME = #{reqText},
            LEVEL_ID = #{level},
            LEVEL_NAME = #{levelName}
        WHERE
            EDU_CATEGORY_DETAIL_ID = #{pk}
    </update>

    <update id="setEduCodeDel" parameterType="map">
        /* setEduCodeDel */
        UPDATE
            CAMPUS.DJ_CAMPUS_CODE
        SET
            ACTIVE = 'N'
        WHERE
            CAMPUS_GROUP_CODE_ID = #{groupCode}
        AND CAMPUS_DT_CODE IN (${pk})
    </update>

    <update id="setEduCategoryDel" parameterType="map">
        /* setEduCategoryDel */
        UPDATE
            CAMPUS.DJ_EDU_CATEGORY
        SET
            ACTIVE = 'N'
        WHERE
            EDU_CATEGORY_ID IN (#{pk})
    </update>

    <update id="setEduCategoryDetailDel" parameterType="map">
        /* setEduCategoryDetailDel */
        UPDATE
            CAMPUS.DJ_EDU_CATEGORY_DETAIL
        SET
            ACTIVE = 'N'
        WHERE
            EDU_CATEGORY_DETAIL_ID IN (#{pk})
    </update>

    <insert id="setDutyInfoIns" parameterType="map">
        /* setDutyInfoIns */
        INSERT INTO CAMPUS.DJ_DUTY_INFO
            (
                DUTY_YEAR,
                DUTY_MONTH,
                DUTY_NAME,
                OUTLINE_NAME,
                OUTLINE_DETAIL,
                INTERNAL,
                EXTERNAL,
                APP_LINE,
                ABILITY_A,
                ABILITY_B,
                ABILITY_C,
                ABILITY_D,
                ABILITY_E,
                RESPONSIBILITY,
                REG_EMP_SEQ,
                REG_EMP_NAME
            )
        VALUES
            (
                LEFT(#{dutyMonth}, 4),
                #{dutyMonth},
                #{dutyName},
                #{outlineName},
                #{outlineDetail},
                #{internal},
                #{external},
                #{appLine},
                #{abilityA},
                #{abilityB},
                #{abilityC},
                #{abilityD},
                #{abilityE},
                #{responsibility},
                #{regEmpSeq},
                #{regEmpName}
            )
    </insert>

    <insert id="setDutyInfoUpd" parameterType="map">
        /* setDutyInfoUpd */
        UPDATE
            CAMPUS.DJ_DUTY_INFO
        SET
            DUTY_MONTH = #{dutyMonth},
            DUTY_NAME = #{dutyName},
            OUTLINE_NAME = #{outlineName},
            OUTLINE_DETAIL = #{outlineDetail},
            INTERNAL = #{internal},
            EXTERNAL = #{external},
            APP_LINE = #{appLine},
            ABILITY_A = #{abilityA},
            ABILITY_B = #{abilityB},
            ABILITY_C = #{abilityC},
            ABILITY_D = #{abilityD},
            ABILITY_E = #{abilityE},
            RESPONSIBILITY = #{responsibility}
        WHERE
            DUTY_INFO_SN = #{pk}
    </insert>

    <update id="setTargetCertReq" parameterType="map">
        /* setTargetCertReq */
        UPDATE
            CAMPUS.DJ_EDU_TARGET
        SET
            STATUS = #{status}
        <if test='"100".equals(status)'>
            , APPROVAL_EMP_SEQ = #{regEmpSeq}
            , APPROVAL_EMP_NAME = #{regEmpName}
            , APPROVAL_RESULT_DATE = NOW()
        </if>
        WHERE
            TARGET_YEAR = #{targetYear}
        AND REG_EMP_SEQ = #{empSeq}
    </update>

    <update id="setDutyCertReq" parameterType="map">
        /* setDutyCertReq */
        UPDATE
            CAMPUS.DJ_DUTY_INFO
        SET
            STATUS = #{status}
            <if test='"100".equals(status)'>
                , APPROVAL_EMP_SEQ = #{regEmpSeq}
                , APPROVAL_EMP_NAME = #{regEmpName}
                , APPROVAL_RESULT_DATE = NOW()
            </if>
        WHERE
            DUTY_INFO_SN = #{pk}
    </update>

    <update id="setStudyInfoComplete" parameterType="map">
        /*setStudyInfoComplete*/
        UPDATE CAMPUS.DJ_STUDY_INFO
        SET
            ADD_STATUS = "Y"
        WHERE
            STUDY_INFO_SN = #{studyInfoSn}
    </update>

    <update id="setStudyResultComplete" parameterType="map">
        /*setStudyResultComplete*/
        UPDATE CAMPUS.DJ_STUDY_INFO
        SET
            ADD_STATUS = "C"
        WHERE
            STUDY_INFO_SN = #{studyInfoSn}
    </update>

    <update id="setStudyResultSc" parameterType="map">
        /*setStudyResultSc*/
        UPDATE CAMPUS.DJ_STUDY_INFO
        SET
            ADD_STATUS = "S"
        WHERE
            STUDY_INFO_SN = #{studyInfoSn}
    </update>

    <select id="getStudyResultOne" parameterType="map" resultType="map">
        /*getStudyResultOne*/
        SELECT
            *
        FROM
            CAMPUS.DJ_STUDY_RESULT
        WHERE
            STUDY_INFO_SN = #{pk}
        ORDER BY STUDY_RESULT_SN
        LIMIT 1
    </select>

    <select id="getStudyResultList" parameterType="map" resultType="map">
        /*getStudyResultList*/
        SELECT
            STUDY_CLASS_SN,
            STUDY_CLASS_TEXT,
            STUDY_EMP_SEQ,
            STUDY_EMP_NAME,
            STUDY_DEPT_NAME,
            STUDY_TEAM_NAME,
            STUDY_POSITION_NAME,
            STUDY_DUTY_NAME,
            SUM(STUDY_TIME) as STUDY_TIME,
            COUNT(STUDY_EMP_SEQ) as STUDY_EMP_CNT
        FROM
            CAMPUS.DJ_STUDY_RESULT_USER
        WHERE
            STUDY_INFO_SN = #{pk}
        GROUP BY STUDY_EMP_SEQ
    </select>

    <select id="getStudyUserInfo" parameterType="map" resultType="map">
        /*getStudyUserInfo*/
        SELECT
            *
        FROM
            CAMPUS.DJ_STUDY_USER
        WHERE
            STUDY_INFO_SN = #{studyInfoSn}
        AND
            STUDY_EMP_SEQ = #{studyEmpSeq}
    </select>

    <select id="setStudyResultUserInsert" parameterType="map">
        /*setStudyResultUserInsert*/
        INSERT INTO CAMPUS.DJ_STUDY_RESULT_USER
            (
                STUDY_INFO_SN,
                STUDY_JOURNAL_SN,
                STUDY_EMP_SEQ,
                STUDY_EMP_NAME,
                STUDY_DEPT_NAME,
                STUDY_TEAM_NAME,
                STUDY_POSITION_NAME,
                STUDY_DUTY_NAME,
                STUDY_TIME,
                STUDY_CLASS_SN,
                STUDY_CLASS_TEXT
            )
        VALUES
            (
                #{studyInfoSn},
                #{studyJournalSn},
                #{studyEmpSeq},
                #{studyEmpName},
                #{studyDeptName},
                #{studyTeamName},
                #{studyPositionName},
                #{studyDutyName},
                #{realEduTime},
                #{studyClassSn},
                #{studyClassText}
            )
    </select>

    <delete id="deleteStudyResultUser" parameterType="map">
        /*deleteStudyResultUser*/
        DELETE
        FROM
            CAMPUS.DJ_STUDY_RESULT_USER
        WHERE
            STUDY_JOURNAL_SN = #{studyJournalSn}
    </delete>

    <delete id="deleteOjtResult" parameterType="map">
        /*deleteOjtResult*/
        DELETE FROM CAMPUS.DJ_OJT_RESULT
        WHERE
            OJT_RESULT_SN = #{ojtResultSn}
    </delete>
</mapper>