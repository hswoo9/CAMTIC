<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="manage">

    <select id="getMemList" parameterType="map" resultType="map">
        /*getClientList*/
        SELECT
            A.EMP_SEQ,
            A.ERP_EMP_SEQ,
            A.LOGIN_ID,
            A.LOGIN_PASSWD,
            A.EMP_NAME_KR,
            A.EMP_NAME_EN,
            A.EMP_NAME_CN,
            A.ATT_CARD_NUM,
            A.DEPT_SEQ,
            A.DEPT_NAME,
            A.DEPT_TEAM_NAME,
            A.OCCUPATION_CODE,
            A.POSITION_CODE,
            A.POSITION_NAME,
            A.DUTY_CODE,
            A.DUTY_NAME,
            A.GRADE_CODE,
            A.GRADE_NAME,
            A.POSITION_OR_DUTY,
            A.EMPLOY_GUBUN,
            A.JOIN_DAY,
            A.APPOINT_DAY,
            A.APPOINT_GUBUN,
            A.APPOINT_GUBUN_DETAIL,
            A.CTR_ST_DAY,
            A.CTR_EN_DAY,
            A.WEEK_WORK_TIME_TYPE,
            A.WEEK_WORK_TIME,
            A.BF_APPOINT_DAY,
            A.LOCAL_TALENT,
            A.WORK_FIELD_NAME,
            A.ZIP_CODE,
            scp.dec_b64('KEY1', A.ADDR) AS ADDR,
            A.OLD_ADDR,
            A.ADDR_DETAIL,
            A.ADDR_REFERENCES,
            scp.dec_b64('KEY1', A.LEGAL_DOMICILE) AS LEGAL_DOMICILE,
            A.HOME_TEL_NUM,
            scp.dec_b64('KEY1', A.MOBILE_TEL_NUM) AS MOBILE_TEL_NUM,
            A.OFFICE_TEL_NUM,
            scp.dec_b64('KEY1', A.EMAIL_ADDR) AS EMAIL_ADDR,
            scp.dec_b64('KEY1', A.BDAY) AS BDAY,
            A.LUNAR_CAL,
            A.GENDER_CODE,
            A.WEDDING_ACTIVE,
            A.IMPAIR_LEVEL_CODE,
            A.DEGREE_CODE,
            A.JOB_DETAIL,
            A.SPEC_CODE,
            A.DIV_FACTION,
            A.WORK_STATUS_CODE,
            A.RESIGN_DAY,
            A.RESIGN_REASON,
            A.PHOTO_FILE_ID,
            A.DEPT_MG_YN,
            A.ADMIN_APPROVE_YN,
            A.SECRET_YN,
            A.SEC_AUTHORIZE_DATE,
            A.SEC_RELEASE_DATE,
            A.ACTIVE,
            A.REG_EMP_SEQ,
            A.REG_DATE,
            A.MOD_EMP_SEQ,
            A.MOD_DATE,
            scp.dec_b64('KEY1', A.RES_REGIS_NUM) AS RES_REGIS_NUM,
            A.CHECK_PASSWD,
            A.CAPS_NUM,
            A.HOME_PAGE_ACTIVE,
            A.BEFOR_CAREER,
            A.BS_ELAPSED_YEAR,
            A.ELAPSED_YEAR,
            A.ACCOUNT_HOLDER,
            A.BANK_NAME,
            scp.dec_b64('KEY1', A.ACCOUNT_NUM) AS ACCOUNT_NUM,
            A.DUZON_CODE,
            A.CAR_ACTIVE,
            A.CAR_NUM,
            A.EMG_TEL_NUM,
            A.BLOOD_TYPE,
            A.WEDDING_DAY,
            A.HOBBY,
            A.SPECIALITY,
            A.RELIGION,
            A.HEIGHT,
            A.WEIGHT,
            A.VISIONL,
            A.VISIONR,
            A.DIVISION,
            A.DIVISION_SUB,
            A.NICK_NAME,
            A.CONTRACT,
            A.SCHOOL,
            A.DEGREE,
            A.DEPARTMENT,
            A.GRADE,
            A.STUDENT_ID,
            A.QUALIFICATION,
            A.LAST_DEGREE,
            A.CAREER,
            A.MILITARY,
            A.SIGNIFICANT,
            A.TEMP_DIVISION,
            A.MY_COMENT,
            A.SCIENCE_NO,
            A.CARD_ETC
        FROM CAM_HR.DJ_EMP_INFO A
        WHERE
            (A.EMP_NAME_KR LIKE CONCAT('%', #{searchValue}, '%') OR scp.dec_b64('KEY1', A.ACCOUNT_NUM) LIKE CONCAT('%', #{searchValue}, '%') OR scp.dec_b64('KEY1', A.RES_REGIS_NUM) LIKE CONCAT('%', #{searchValue}, '%'))
    </select>

    <select id="getProjectData" parameterType="map" resultType="map">
        /*getProjectData*/
        SELECT
            A.*,
            DATE_FORMAT(A.REG_DT, '%Y-%m-%d %H:%i') as PJT_REG_DT
        FROM
            CAM_PJT_MNG.DJ_PROJECT A
        WHERE
            A.PJT_CD = #{PJT_CD}
        LIMIT 1
    </select>

    <select id="getEmpInfo" parameterType="map" resultType="map">
        /*getEmpInfo*/
        SELECT
            A.EMP_SEQ,
            A.ERP_EMP_SEQ,
            A.LOGIN_ID,
            A.LOGIN_PASSWD,
            A.EMP_NAME_KR,
            A.EMP_NAME_EN,
            A.EMP_NAME_CN,
            A.ATT_CARD_NUM,
            A.DEPT_SEQ,
            A.DEPT_NAME,
            A.DEPT_TEAM_NAME,
            A.OCCUPATION_CODE,
            A.POSITION_CODE,
            A.POSITION_NAME,
            A.DUTY_CODE,
            A.DUTY_NAME,
            A.GRADE_CODE,
            A.GRADE_NAME,
            A.POSITION_OR_DUTY,
            A.EMPLOY_GUBUN,
            A.JOIN_DAY,
            A.APPOINT_DAY,
            A.APPOINT_GUBUN,
            A.APPOINT_GUBUN_DETAIL,
            A.CTR_ST_DAY,
            A.CTR_EN_DAY,
            A.WEEK_WORK_TIME_TYPE,
            A.WEEK_WORK_TIME,
            A.BF_APPOINT_DAY,
            A.LOCAL_TALENT,
            A.WORK_FIELD_NAME,
            A.ZIP_CODE,
            scp.dec_b64('KEY1', A.ADDR) AS ADDR,
            A.OLD_ADDR,
            A.ADDR_DETAIL,
            A.ADDR_REFERENCES,
            scp.dec_b64('KEY1', A.LEGAL_DOMICILE) AS LEGAL_DOMICILE,
            A.HOME_TEL_NUM,
            scp.dec_b64('KEY1', A.MOBILE_TEL_NUM) AS MOBILE_TEL_NUM,
            A.OFFICE_TEL_NUM,
            scp.dec_b64('KEY1', A.EMAIL_ADDR) AS EMAIL_ADDR,
            scp.dec_b64('KEY1', A.BDAY) AS BDAY,
            A.LUNAR_CAL,
            A.GENDER_CODE,
            A.WEDDING_ACTIVE,
            A.IMPAIR_LEVEL_CODE,
            A.DEGREE_CODE,
            A.JOB_DETAIL,
            A.SPEC_CODE,
            A.DIV_FACTION,
            A.WORK_STATUS_CODE,
            A.RESIGN_DAY,
            A.RESIGN_REASON,
            A.PHOTO_FILE_ID,
            A.DEPT_MG_YN,
            A.ADMIN_APPROVE_YN,
            A.SECRET_YN,
            A.SEC_AUTHORIZE_DATE,
            A.SEC_RELEASE_DATE,
            A.ACTIVE,
            A.REG_EMP_SEQ,
            A.REG_DATE,
            A.MOD_EMP_SEQ,
            A.MOD_DATE,
            scp.dec_b64('KEY1', A.RES_REGIS_NUM) AS RES_REGIS_NUM,
            A.CHECK_PASSWD,
            A.CAPS_NUM,
            A.HOME_PAGE_ACTIVE,
            A.BEFOR_CAREER,
            A.BS_ELAPSED_YEAR,
            A.ELAPSED_YEAR,
            A.ACCOUNT_HOLDER,
            A.BANK_NAME,
            scp.dec_b64('KEY1', A.ACCOUNT_NUM) AS ACCOUNT_NUM,
            A.DUZON_CODE,
            A.CAR_ACTIVE,
            A.CAR_NUM,
            A.EMG_TEL_NUM,
            A.BLOOD_TYPE,
            A.WEDDING_DAY,
            A.HOBBY,
            A.SPECIALITY,
            A.RELIGION,
            A.HEIGHT,
            A.WEIGHT,
            A.VISIONL,
            A.VISIONR,
            A.DIVISION,
            A.DIVISION_SUB,
            A.NICK_NAME,
            A.CONTRACT,
            A.SCHOOL,
            A.DEGREE,
            A.DEPARTMENT,
            A.GRADE,
            A.STUDENT_ID,
            A.QUALIFICATION,
            A.LAST_DEGREE,
            A.CAREER,
            A.MILITARY,
            A.SIGNIFICANT,
            A.TEMP_DIVISION,
            A.MY_COMENT,
            A.SCIENCE_NO,
            A.CARD_ETC
        FROM
            CAM_HR.DJ_EMP_INFO A
        WHERE
            A.EMP_SEQ = #{sn}
    </select>

    <select id="getUserPartRateInfo" parameterType="map" resultType="map">
        /*getUserPartRateInfo*/
        SELECT
            C.PJT_SN,
            A.CHNG_SAL,
            A.MON_SAL,
            A.TOT_RATE,
            A.PAY_RATE,
            A.ITEM_RATE,
            A.PART_DET_STR_DT,
            A.PART_DET_END_DT,
            (SELECT LG_CD_NM FROM CAM_PJT_MNG.DJ_PJT_CD WHERE LG_CD = C.SBJ_DEP AND GRP_SN = 'SUP_DEP' LIMIT 1) AS SBJ_DEP_NM,
            B.MNG_STAT,
            C.PJT_NM,
            DATE_FORMAT(C.END_DT, '%Y-%m-%d') AS PJT_END_DT,
            C.PM_EMP_SEQ,
            C.SBJ_STAT_YN,
            C.PJT_STEP,
            C.PJT_STEP_NM,
            (select cm_code_nm from cam_common.dj_com_code a left join cam_common.dj_com_group_code b on a.cm_group_code_id = b.cm_group_code_id where b.cm_group_code_id = 36 and cm_code = C.SBJ_CLASS) AS subClassText
        FROM
            CAM_PJT_MNG.DJ_PART_RATE_DET A
        LEFT JOIN
            CAM_PJT_MNG.DJ_PJT_PART_RATE_VER B
        ON
            A.PART_RATE_VER_SN = B.PART_RATE_VER_SN
        LEFT JOIN
            CAM_PJT_MNG.DJ_PROJECT C
        ON
            B.PJT_SN = C.PJT_SN
        WHERE
            1=1
        AND
            A.PART_EMP_SEQ = #{empSeq}
        <if test='strDe != null and !"".equals(strDe)'>
        <![CDATA[
            AND
                #{strDe} between YEAR(A.PART_DET_STR_DT) and YEAR(A.PART_DET_END_DT)
        ]]>
        </if>
        AND
            (C.PJT_SN, B.PART_RATE_VER) IN
            (
                SELECT PJT_SN, MAX(PART_RATE_VER) AS PART_RATE_VER
                FROM
                    CAM_PJT_MNG.DJ_PJT_PART_RATE_VER
                WHERE
                    MNG_STAT != 'R'
                GROUP BY PJT_SN
            )
        AND
            C.PJT_STOP != 'Y'
    </select>

    <select id="getUserSalList" parameterType="map" resultType="map">
        /*getUserSalList*/
        SELECT *
        FROM
            CAM_MNG.V_BS_SALARY
        WHERE
            EMP_SEQ = #{empSeq}
        <![CDATA[
        AND
            START_DT <= #{strMonth} AND END_DT >= #{strMonth}
        ]]>
    </select>

    <select id="checkExnpDetData" parameterType="map" resultType="map">
        /*checkExnpDetData*/
        SELECT
            *
        FROM
            CAM_MNG.DJ_PAY_APP_DET
        WHERE
            PAY_APP_DET_SN = #{payAppDetSn}
    </select>

    <insert id="insCorpProject" parameterType="map">
        /*insCorpProject*/
        INSERT INTO CAM_PJT_MNG.DJ_CORP_PROJECT
        (
            PM_EMP_SEQ,
            PM_EMP_NAME,
            PM_DEPT_SEQ,
            PM_DEPT_NAME,
            LINK_PJT,
            CORP_PJT_NM,
            CORP_PJT_SUB_NM,
            STR_DT,
            END_DT,
            SBJ_SEP,
            REG_EMP_SEQ,
            PROFIT_CODE
        ) VALUES (
            #{empSeq},
            #{empName},
            #{deptSeq},
            #{deptName},
            #{linkPjt},
            #{pjtNm},
            #{pjtSubNm},
            #{strDt},
            #{endDt},
            #{sbjSep},
            #{regEmpSeq},
            #{profitCode}
        )
        <selectKey keyProperty="corpPjtSn" resultType="Integer" order="BEFORE">
            SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'CAM_PJT_MNG' AND TABLE_NAME = 'DJ_CORP_PROJECT'
        </selectKey>
    </insert>

    <select id="getCorpProjectList" parameterType="map" resultType="map">
        /*getCorpProjectList*/
        SELECT
            *
        FROM
            CAM_PJT_MNG.DJ_CORP_PROJECT
    </select>

    <select id="getCorpProjectListMng" parameterType="map" resultType="map">
        /*getCorpProjectListMng*/
        SELECT
            *
        FROM (
            SELECT
                A.PJT_SN AS PJT_SN,
                A.BUSN_CLASS AS BUSN_CLASS,
                A.BUSN_NM AS BUSN_NM,
                A.PJT_TMP_CD AS PJT_TMP_CD,
                A.PJT_NM AS PJT_NM,
                B.PJT_STR_DT AS STR_DT,
                B.PJT_END_DT AS END_DT,
                A.DELV_APPROVE_STAT AS STATUS,
                A.EMP_NAME AS ENGN_PM_NM,
                A.EMP_NAME AS PM_NM,
                DATE_FORMAT(CASE WHEN A.BUSN_CLASS = 'R' THEN C.APPROVAL_DATE
                     WHEN A.BUSN_CLASS = 'S' THEN D.APPROVAL_DATE
                     WHEN A.BUSN_CLASS = 'D' THEN B.APPROVAL_DATE
                     WHEN A.BUSN_CLASS = 'V' THEN B.APPROVAL_DATE
                END, '%Y-%m-%d') AS REG_DATE
            FROM
                CAM_PJT_MNG.DJ_PROJECT A
            LEFT JOIN
                CAM_PJT_MNG.DJ_PJT_DELV B ON A.PJT_SN = B.PJT_SN
            LEFT JOIN
                CAM_PJT_MNG.DJ_PJT_RND C ON A.PJT_SN = C.PJT_SN
            LEFT JOIN
                CAM_PJT_MNG.DJ_PJT_UNRND D ON A.PJT_SN = D.PJT_SN
            WHERE A.DELV_APPROVE_STAT = '10'
            AND (B.STATUS = '100' || C.STATUS = '100' || D.STATUS = '100')

            UNION ALL

            SELECT
                CORP_PJT_SN AS PJT_SN,
                'M' AS BUSN_CLASS,
                '법인' AS BUSN_NM,
                CORP_PJT_CD AS PJT_TMP_CD,
                CORP_PJT_NM AS PJT_NM,
                STR_DT AS STR_DT,
                END_DT AS END_DT,
                STATUS AS STATUS,
                PM_EMP_NAME AS ENGN_PM_NM,
                PM_EMP_NAME AS PM_NM,
                ''
            FROM
                CAM_PJT_MNG.DJ_CORP_PROJECT
            WHERE STATUS = '10'
        )A
        ORDER BY A.REG_DATE DESC, A.PJT_SN DESC
    </select>

    <select id="getCorpProjectData" parameterType="map" resultType="map">
        /*getCorpProjectData*/
        SELECT
            A.*,
            DATE_FORMAT(A.STR_DT, '%Y%m%d') AS STR_DT2,
            DATE_FORMAT(A.END_DT, '%Y%m%d') AS END_DT2
        FROM
            CAM_PJT_MNG.DJ_CORP_PROJECT A
        WHERE
            CORP_PJT_SN = #{corpPjtSn}
    </select>

    <update id="updCorpProject" parameterType="map">
        /*updCorpProject*/
        UPDATE
            CAM_PJT_MNG.DJ_CORP_PROJECT
        SET
            PM_EMP_SEQ = #{empSeq},
            PM_EMP_NAME = #{empName},
            PM_DEPT_SEQ = #{deptSeq},
            PM_DEPT_NAME = #{deptName},
            LINK_PJT = #{linkPjt},
            CORP_PJT_NM = #{pjtNm},
            CORP_PJT_SUB_NM = #{pjtSubNm},
            STR_DT = #{strDt},
            END_DT = #{endDt},
            SBJ_SEP = #{sbjSep},
            MOD_EMP_SEQ = #{regEmpSeq},
            PROFIT_CODE = #{profitCode}
        WHERE
            CORP_PJT_SN = #{corpPjtSn}
    </update>

    <insert id="insIncmExpInfo" parameterType="map">
        /* insIncmExpInfo */
        INSERT INTO CAM_MNG.DJ_PROJECT_BUDGET_MNG
        (
            PJT_CD,
            BGT_CD,
            BGT_AT,
            BGT1_NM,
            BGT2_NM,
            BGT3_NM,
            CALC_AM,
            REG_EMP_SEQ,
            REG_DATE
        )
        VALUES
        <foreach collection="list" item="item" separator=",">
        (
            #{item.pjtCd},
            #{item.bgtCd},
            #{item.bgtAt},
            #{item.bgt1Nm},
            #{item.bgt2Nm},
            #{item.bgt3Nm},
            #{item.calcAm},
            #{item.regEmpSeq},
            NOW()
        )
        </foreach>
    </insert>

    <select id="getProjectBgtList" parameterType="map" resultType="map">
        /* getProjectBgtList */
        SELECT
            PJT_CD,
            BGT_CD,
            BGT_AT,
            BGT1_NM,
            BGT2_NM,
            BGT3_NM AS BGT_NM,
            CALC_AM
        FROM
            CAM_MNG.DJ_PROJECT_BUDGET_MNG
        WHERE
            PJT_CD = #{pjtSn}
        AND
            ACTIVE = 'Y'
    </select>

    <select id="getProjectBgtCheck" parameterType="map" resultType="int">
        /* getProjectBgtCheck */
        SELECT
            COUNT(*)
        FROM
            CAM_MNG.DJ_PROJECT_BUDGET_MNG
        WHERE
            PJT_CD = #{pjtCd}
        AND
            ACTIVE = 'Y'
    </select>

    <update id="incmExpInfoActiveN" parameterType="map">
        /* incmExpInfoActiveN */
        UPDATE
            CAM_MNG.DJ_PROJECT_BUDGET_MNG
        SET
            ACTIVE = 'N'
        WHERE
            PJT_CD = #{pjtCd}
    </update>

    <delete id="delDjCardList" parameterType="map">
        /*delDjCardList*/
        DELETE FROM CAM_MNG.DJ_CARD_INFO
    </delete>

    <insert id="insDjCardList" parameterType="java.util.List">
        /*insDjCardList*/
        INSERT INTO CAM_MNG.DJ_CARD_INFO(CLTTR_CD, TR_CD, JIRO_NM, BA_NB, DEPOSITOR, TR_NM, CARD_BA_NB)
        VALUES
        <foreach collection="list" item="item" separator=",">
            (
                #{item.TR_CD},
                #{item.TR_CD},
                #{item.JIRO_NM},
                #{item.BA_NB},
                #{item.DEPOSITOR},
                #{item.TR_NM},
                scp.enc_b64('KEY1', #{item.CARD_BA_NB})
            )
        </foreach>

    </insert>

    <update id="setRequest" parameterType="map">
        /*setRequest*/
        UPDATE
            CAM_PJT_MNG.DJ_CORP_PROJECT
        SET
            CORP_PJT_CD = #{pjtCd},
            STATUS = #{status}
        WHERE
            CORP_PJT_SN = #{corpPjtSn}
    </update>

    <update id="setApprove" parameterType="map">
        /*setApprove*/
        UPDATE
            CAM_PJT_MNG.DJ_CORP_PROJECT
        SET
            STATUS = #{status}
        WHERE
            CORP_PJT_SN = #{corpPjtSn}
    </update>

    <insert id="setManageDepo" parameterType="map">
        INSERT INTO CAM_MNG.DJ_DEPO_SETTING
            (FR_PJT_SN, PJT_CD, PJT_NM, BUDGET_SN, BUDGET_NM, REG_EMP_SEQ)
        VALUES
            (#{frPjtSn}, #{aftPjtCd}, #{aftPjtNm}, #{budgetSn}, #{budgetNm}, #{regEmpSeq})
    </insert>

    <update id="updateManageDepo" parameterType="map">
        UPDATE CAM_MNG.DJ_DEPO_SETTING
        SET
            PJT_CD = #{aftPjtCd},
            PJT_NM = #{aftPjtNm},
            BUDGET_SN = #{budgetSn},
            BUDGET_NM = #{budgetNm},
            MOD_DT = NOW(),
            MOD_EMP_SEQ = #{regEmpSeq}
        WHERE
            FR_PJT_SN = #{frPjtSn}
    </update>

    <select id="chkManageDepo" parameterType="map" resultType="int">
        SELECT
            COUNT(*)
        FROM
            CAM_MNG.DJ_DEPO_SETTING
        WHERE
            FR_PJT_SN = #{frPjtSn}
    </select>

    <select id="getManageDepo" parameterType="map" resultType="map">
        SELECT
            *
        FROM
            CAM_MNG.DJ_DEPO_SETTING
        WHERE
            FR_PJT_SN = #{frPjtSn}
    </select>

    <select id="getExnpDeChangeRs" parameterType="map" resultType="map">
        /*getExnpDeChangeRs*/
        SELECT
            *
        FROM
            CAM_MNG.DJ_EXNP_CHNG_RS
        WHERE
            1 = 1
        <if test='type == null or "".equals(type)'>
            AND
                USE_YN = 'Y'
        </if>
    </select>

    <insert id="insExnpDeChangeRs" parameterType="map" >
        /*insExnpDeChangeRs*/
        INSERT INTO CAM_MNG.DJ_EXNP_CHNG_RS
        (
            TITLE,
            USE_YN
        )
        VALUES
        (
            #{title},
            #{useYn}
        )
    </insert>

    <update id="updExnpDeChangeRs" parameterType="map">
        /*updExnpDeChangeRs*/
        UPDATE CAM_MNG.DJ_EXNP_CHNG_RS
        SET
            TITLE = #{title},
            USE_YN = #{useYn}
        WHERE
            CHNG_RS_SN = #{chngRsSn}
    </update>

    <delete id="delExnpDeChangeRs" parameterType="map">
        /*delExnpDeChangeRs*/
        DELETE FROM CAM_MNG.DJ_EXNP_CHNG_RS
        WHERE
            CHNG_RS_SN = #{chngRsSn}
    </delete>

    <select id="getEtaxList" parameterType="map" resultType="map">
        /* MariaDB  -  getEtaxList*/
        SELECT
            A.ISS_NO, A.CO_CD, A.DIV_CD, A.TR_CD, A.ISS_DT, A.TAX_TY, A.ISU_DT, A.DIVREG_NB, A.DIVSUB_NB, A.DIV_NM,
            A.DIVCEO_NM, A.TRREG_NB, A.TRSUB_NB, A.TR_NM, A.TRCEO_NM,
            CAST(A.SUM_AM AS INT) AS SUM_AM,
            CAST(A.SUP_AM AS INT) AS SUP_AM,
            CAST(A.VAT_AM AS INT) AS VAT_AM,
            A.ETAX_TY, A.ETAX_FG,
            A.SEND_FG, A.DUMMY1, A.DUMMY2, A.ISS_YMD, A.ITEM_DC, A.ADDTAX_CD, A.ADDTAX_AM, A.ADDRTE_RT, A.EMAIL_DC, A.TRCHARGE_EMAIL,
            A.INSERT_DT, A.ST_TR_CD, A.TR_FG, A.REG_NB, A.CEO_NM, A.BUSINESS, A.JONGMOK, A.ZIP, A.DIV_ADDR1, A.ADDR2,
            A.TEL, A.FAX, A.BA_NB, A.INTER_DT, A.LIQ_WS, A.LIQ_RS, A.USE_YN, A.CLTTR_CD, A.JIRO_CD, A.DEPOSITOR,
            A.TR_NMK, A.ATTR_NMK, A.BA_NB_TR, A.AREA_CD, A.GUGUN_CD, A.BANK_NM,
            B.*
        FROM
            CAM_MNG.DJ_ETAX_INFO A
        LEFT JOIN
            CAM_MNG.DJ_USE_ETAX_INFO B
        ON
            A.ISS_NO = B.ISS_NO AND A.CO_CD = B.CO_CD AND A.TAX_TY = B.TAX_TY
        WHERE
        ISU_DT BETWEEN #{strDt} AND #{endDt}
        <if test='type == 1 or "1".equals(type)'>
            AND
                A.TAX_TY = '2'
        </if>
        <if test='type == 2 or "2".equals(type)'>
            AND
                A.TAX_TY = '4'
        </if>
        <if test='searchValue != null and !"".equals("searchValue")'>
            AND
                A.TR_NM LIKE CONCAT('%', #{searchValue} , '%')
        </if>
        AND
            B.USE_ETAX_SN IS NULL
        ORDER BY A.ISU_DT DESC
    </select>

    <delete id="delDjEtax" parameterType="map">
        /*delDjEtax*/
        DELETE FROM CAM_MNG.DJ_ETAX_INFO
        WHERE
            ISS_YMD BETWEEN #{strDate} AND #{endDate}
    </delete>

    <insert id="insDjEtaxUp" parameterType="list">
        /*insDjEtaxUp*/
        INSERT INTO CAM_MNG.DJ_ETAX_INFO
            (
                ISS_NO, CO_CD, DIV_CD, TR_CD, ISS_DT, TAX_TY, ISU_DT, DIVREG_NB, DIVSUB_NB, DIV_NM,
                DIVCEO_NM, TRREG_NB, TRSUB_NB, TR_NM, TRCEO_NM, SUM_AM, SUP_AM, VAT_AM,
                ETAX_TY, ETAX_FG, SEND_FG, DUMMY1, DUMMY2, ISS_YMD, ITEM_DC, ADDTAX_CD, ADDTAX_AM,
                ADDRTE_RT, EMAIL_DC, TRCHARGE_EMAIL, INSERT_DT,
                ST_TR_CD, TR_FG, REG_NB, CEO_NM, BUSINESS, JONGMOK, ZIP, DIV_ADDR1, ADDR2,
                TEL, FAX, BA_NB, INTER_DT, LIQ_WS, LIQ_RS, USE_YN, CLTTR_CD, JIRO_CD, DEPOSITOR,
                TR_NMK, ATTR_NMK, BA_NB_TR, AREA_CD, GUGUN_CD,
                BANK_NM
            )
        VALUES
        <foreach collection="list" item="item" separator=",">
              (
                #{item.ISS_NO}, #{item.CO_CD}, #{item.DIV_CD}, #{item.TR_CD}, #{item.ISS_DT}, #{item.TAX_TY}, #{item.ISU_DT}, #{item.DIVREG_NB}, #{item.DIVSUB_NB}, #{item.DIV_NM},
                #{item.DIVCEO_NM}, #{item.TRREG_NB}, #{item.TRSUB_NB}, #{item.TR_NM}, #{item.TRCEO_NM}, #{item.SUM_AM}, #{item.SUP_AM}, #{item.VAT_AM},
                #{item.ETAX_TY}, #{item.ETAX_FG}, #{item.SEND_FG}, #{item.DUMMY1}, #{item.DUMMY2}, #{item.ISS_YMD}, #{item.ITEM_DC}, #{item.ADDTAX_CD}, #{item.ADDTAX_AM},
                #{item.ADDRTE_RT}, #{item.EMAIL_DC}, #{item.TRCHARGE_EMAIL}, #{item.INSERT_DT},
                #{item.ST_TR_CD}, #{item.TR_FG}, #{item.REG_NB}, #{item.CEO_NM}, #{item.BUSINESS}, #{item.JONGMOK}, #{item.ZIP}, #{item.DIV_ADDR1}, #{item.ADDR2},
                #{item.TEL}, #{item.FAX}, #{item.BA_NB}, #{item.INTER_DT}, #{item.LIQ_WS}, #{item.LIQ_RS}, #{item.USE_YN}, #{item.CLTTR_CD}, #{item.JIRO_CD}, #{item.DEPOSITOR},
                #{item.TR_NMK}, #{item.ATTR_NMK}, #{item.BA_NB_TR}, #{item.AREA_CD}, #{item.GUGUN_CD},
                #{item.BANK_NM}
              )
        </foreach>
    </insert>

    <select id="getEtaxListAll" parameterType="map" resultType="map">
        /*getEtaxListAll*/
        SELECT
            A.*,
            B.*,
            (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT REG_EMP_SEQ FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = B.PAY_APP_SN)) AS PAY_EMP_SEQ,
            (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT EMP_SEQ FROM CAM_MNG.DJ_CLAIM_EXNP WHERE CE_GW_IDX = B.CE_GW_IDX AND PAY_APP_SN IS NULL LIMIT 1)) AS PURC_EMP_SEQ,
            (SELECT DATE_FORMAT(REG_DT, '%Y-%m-%d') FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = B.PAY_APP_SN) AS PAY_REG_DT,
            (SELECT DATE_FORMAT(REG_DATE, '%Y-%m-%d') FROM CAM_MNG.DJ_CLAIM_EXNP WHERE CE_GW_IDX = B.CE_GW_IDX AND PAY_APP_SN IS NULL LIMIT 1) AS CLAIM_EXNP_REG_DT,
            (SELECT DOC_STATUS FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = B.PAY_APP_SN) LIMIT 1) AS PAY_EXNP_STAT
        FROM
            CAM_MNG.DJ_ETAX_INFO A
        LEFT JOIN
            (SELECT *
            FROM
            CAM_MNG.DJ_USE_ETAX_INFO
            GROUP BY ISS_NO) B
        ON
            A.ISS_NO = B.ISS_NO AND A.CO_CD = B.CO_CD AND A.TAX_TY = B.TAX_TY
        WHERE
            1 = 1
            <if test='crmNm != null and !"".equals(crmNm)'>
                AND
                TR_NM LIKE CONCAT('%', #{crmNm} , '%')
            </if>
            <if test='crmNo != null and !"".equals(crmNo)'>
                AND
                TRREG_NB LIKE CONCAT('%', #{crmNo} , '%')
            </if>
            <if test='dtGubun == "a" or "a".equals(dtGubun)'>
                AND
                ISS_DT BETWEEN #{strDt} AND #{endDt}
            </if>
            <if test='dtGubun == "b" or "b".equals(dtGubun)'>
                AND
                ISU_DT BETWEEN #{strDt} AND #{endDt}
            </if>
            <if test='dtGubun == "c" or "c".equals(dtGubun)'>
                AND
                ISS_YMD BETWEEN #{strDt} AND #{endDt}
            </if>

            <if test='type == 1 or "1".equals(type)'>
                AND
                    A.TAX_TY = '2'
            </if>
            <if test='type == 2 or "2".equals(type)'>
                AND
                    A.TAX_TY = '4'
            </if>
            <if test='searchValue != null and !"".equals("searchValue")'>
                AND
                    A.TR_NM LIKE CONCAT('%', #{searchValue} , '%')
            </if>
            <if test='viewType != null and !"".equals(viewType) and "payment".equals(viewType)'>
                AND B.USE_ETAX_SN IS NULL
            </if>
        ORDER BY A.ISS_DT DESC
    </select>

    <select id="getUserAccountManagementList" parameterType="map" resultType="map">
        SELECT
            HEI.EMP_SEQ,
            HEI.ERP_EMP_SEQ,
            HEI.LOGIN_ID,
            HEI.LOGIN_PASSWD,
            HEI.EMP_NAME_KR,
            HEI.EMP_NAME_EN,
            HEI.EMP_NAME_CN,
            HEI.ATT_CARD_NUM,
            HEI.DEPT_SEQ,
            HEI.DEPT_NAME,
            HEI.DEPT_TEAM_NAME,
            HEI.OCCUPATION_CODE,
            HEI.POSITION_CODE,
            HEI.POSITION_NAME,
            HEI.DUTY_CODE,
            HEI.DUTY_NAME,
            HEI.GRADE_CODE,
            HEI.GRADE_NAME,
            HEI.POSITION_OR_DUTY,
            HEI.EMPLOY_GUBUN,
            HEI.JOIN_DAY,
            HEI.APPOINT_DAY,
            HEI.APPOINT_GUBUN,
            HEI.APPOINT_GUBUN_DETAIL,
            HEI.CTR_ST_DAY,
            HEI.CTR_EN_DAY,
            HEI.WEEK_WORK_TIME_TYPE,
            HEI.WEEK_WORK_TIME,
            HEI.BF_APPOINT_DAY,
            HEI.LOCAL_TALENT,
            HEI.WORK_FIELD_NAME,
            HEI.ZIP_CODE,
            scp.dec_b64('KEY1', HEI.ADDR) AS ADDR,
            HEI.OLD_ADDR,
            HEI.ADDR_DETAIL,
            HEI.ADDR_REFERENCES,
            scp.dec_b64('KEY1', HEI.LEGAL_DOMICILE) AS LEGAL_DOMICILE,
            HEI.HOME_TEL_NUM,
            scp.dec_b64('KEY1', HEI.MOBILE_TEL_NUM) AS MOBILE_TEL_NUM,
            HEI.OFFICE_TEL_NUM,
            scp.dec_b64('KEY1', HEI.EMAIL_ADDR) AS EMAIL_ADDR,
            scp.dec_b64('KEY1', HEI.BDAY) AS BDAY,
            HEI.LUNAR_CAL,
            HEI.GENDER_CODE,
            HEI.WEDDING_ACTIVE,
            HEI.IMPAIR_LEVEL_CODE,
            HEI.DEGREE_CODE,
            HEI.JOB_DETAIL,
            HEI.SPEC_CODE,
            HEI.DIV_FACTION,
            HEI.WORK_STATUS_CODE,
            HEI.RESIGN_DAY,
            HEI.RESIGN_REASON,
            HEI.PHOTO_FILE_ID,
            HEI.DEPT_MG_YN,
            HEI.ADMIN_APPROVE_YN,
            HEI.SECRET_YN,
            HEI.SEC_AUTHORIZE_DATE,
            HEI.SEC_RELEASE_DATE,
            HEI.ACTIVE,
            HEI.REG_EMP_SEQ,
            HEI.REG_DATE,
            HEI.MOD_EMP_SEQ,
            HEI.MOD_DATE,
            scp.dec_b64('KEY1', HEI.RES_REGIS_NUM) AS RES_REGIS_NUM,
            HEI.CHECK_PASSWD,
            HEI.CAPS_NUM,
            HEI.HOME_PAGE_ACTIVE,
            HEI.BEFOR_CAREER,
            HEI.BS_ELAPSED_YEAR,
            HEI.ELAPSED_YEAR,
            HEI.ACCOUNT_HOLDER,
            HEI.BANK_NAME,
            scp.dec_b64('KEY1', HEI.ACCOUNT_NUM) AS ACCOUNT_NUM,
            HEI.DUZON_CODE,
            HEI.CAR_ACTIVE,
            HEI.CAR_NUM,
            HEI.EMG_TEL_NUM,
            HEI.BLOOD_TYPE,
            HEI.WEDDING_DAY,
            HEI.HOBBY,
            HEI.SPECIALITY,
            HEI.RELIGION,
            HEI.HEIGHT,
            HEI.WEIGHT,
            HEI.VISIONL,
            HEI.VISIONR,
            HEI.DIVISION,
            HEI.DIVISION_SUB,
            HEI.NICK_NAME,
            HEI.CONTRACT,
            HEI.SCHOOL,
            HEI.DEGREE,
            HEI.DEPARTMENT,
            HEI.GRADE,
            HEI.STUDENT_ID,
            HEI.QUALIFICATION,
            HEI.LAST_DEGREE,
            HEI.CAREER,
            HEI.MILITARY,
            HEI.SIGNIFICANT,
            HEI.TEMP_DIVISION,
            HEI.MY_COMENT,
            HEI.SCIENCE_NO,
            HEI.CARD_ETC,
            CASE
                WHEN HDI.DEPT_LEVEL = 2 THEN (SELECT DEPT_SEQ FROM CAM_HR.DJ_DEPT_INFO DI WHERE HDI.PARENT_DEPT_SEQ = DI.DEPT_SEQ)
                ELSE HEI.DEPT_SEQ
            END AS DEPT_SEQ,
            CASE
                WHEN HDI.DEPT_LEVEL = 2 THEN (SELECT DEPT_NAME FROM CAM_HR.DJ_DEPT_INFO DI WHERE HDI.PARENT_DEPT_SEQ = DI.DEPT_SEQ)
                ELSE HEI.DEPT_NAME
            END AS DEPT_NAME1,
            CASE
                WHEN HDI.DEPT_LEVEL = 2 THEN HEI.DEPT_SEQ
                ELSE ""
            END AS TEAM_SEQ,
            CASE
                WHEN HDI.DEPT_LEVEL = 2
                THEN HEI.DEPT_NAME ELSE ""
            END AS TEAM_NAME,
            DATE_FORMAT(HEI.JOIN_DAY,'%Y-%m-%d') AS JOIN_DAY2,
            IFNULL(CASE WHEN HEI.DUTY_NAME = "" THEN HEI.POSITION_NAME ELSE HEI.DUTY_NAME END, "") AS SPOT,
            CASE
                WHEN HEI.DUTY_CODE IS NOT NULL THEN (SELECT SORT FROM CAM_COMMON.dj_com_code WHERE CM_GROUP_CODE_ID = 3 AND CM_CODE = HEI.DUTY_CODE)
                WHEN HEI.POSITION_CODE IS NOT NULL THEN (SELECT SORT FROM CAM_COMMON.dj_com_code WHERE CM_GROUP_CODE_ID = 4 AND CM_CODE = HEI.POSITION_CODE)
            ELSE 999 END SORT
        FROM
            CAM_HR.DJ_EMP_INFO HEI
        LEFT JOIN
            CAM_HR.DJ_DEPT_INFO HDI ON HEI.DEPT_SEQ = HDI.DEPT_SEQ
        WHERE
            HEI.ACTIVE = 'Y'
        AND
            HEI.ERP_EMP_SEQ != ''
        AND
            HEI.WORK_STATUS_CODE = 'Y'
        <if test='userGender != null and !"".equals(userGender)'>
        AND
            HEI.GENDER_CODE = #{userGender}
        </if>
        AND
            ${userKind} like concat('%', #{kindContent} ,'%')
        <if test='deptComp != null and !"".equals(deptComp)'>
        AND
            HEI.DEPT_SEQ = #{deptComp}
            <if test='deptTeam == deptTeam or "".equals(deptTeam)'>
                OR
                HEI.DEPT_SEQ IN (
                    SELECT
                        DEPT_SEQ
                    FROM
                        CAM_HR.DJ_DEPT_INFO
                    WHERE
                        DEPT_SEQ = #{deptComp}
                    OR
                        PARENT_DEPT_SEQ = #{deptComp}
                )
            </if>
        </if>
        <if test='deptTeam != null and !"".equals(deptTeam)'>
            AND
                HEI.DEPT_SEQ = #{deptTeam}
        </if>
        ORDER BY SORT
    </select>

    <select id="getApproveExnpList" parameterType="map" resultType="map">
        /*getApproveExnpList*/
        SELECT
            *
        FROM
            CAM_MNG.DJ_EXNP
        WHERE
        <![CDATA[
            DT3 = DATE_FORMAT(now(), '%Y-%m-%d')
        AND RE_STAT = 'N'
        AND PAY_APP_TYPE = 1
        LIMIT 200
        ]]>
    </select>

    <select id="getAccountInfoOne" parameterType="map" resultType="map">
        /*getAccountInfoOne*/
        SELECT
            *
        FROM
            CAM_INSIDE.DJ_ACCOUNT_INFO
        WHERE
            ACCOUNT_TO_SN = #{accountToSn}
    </select>

    <select id="getCurrentAmountStatus" parameterType="map" resultType="map">
        /*getCurrentAmountStatus*/
        SELECT * FROM CAM_HR.ERP_HIST_ACCT_CONSOL_TR WHERE ACCT_NO = REPLACE(#{bankNB},'-','') ORDER BY ACCT_TXDAY DESC, ACCT_TXTIME DESC, ACCT_TXDAY_SEQ DESC LIMIT 1
    </select>

    <select id="getBudgetDetailViewData" parameterType="map" resultType="map">
        /*getBudgetDetailViewData*/
        SELECT AA.* FROM (
            SELECT
                C.EXNP_SN,
                B.BUDGET_SN,
                B.BUDGET_NM,
                A.PAY_APP_SN,
                A.PAY_APP_TYPE,
                C.EXNP_BRIEFS,
                A.APP_TITLE,
                C.REQ_DE,
                C.DT3 AS R_DT,
                A.PJT_CD,
                SUBSTRING(B.BUDGET_SN, 1, 1) AS JANG_SN,
                SUBSTRING(B.BUDGET_SN, 1, 3) AS GWAN_SN,
                CASE
                    WHEN A.PAY_APP_TYPE = 2 THEN -1 * SUM(B.TOT_COST)
                    ELSE SUM(B.TOT_COST)
                END AS TOT_COST,
                A.DOC_STATUS,
                C.RE_STAT,
                C.INFO_CODE,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO HR WHERE HR.EMP_SEQ = A.REG_EMP_SEQ) AS EMP_NAME,
                IFNULL(DI.DOC_NO, '') AS DOC_NO
            FROM
                CAM_MNG.DJ_PAY_APP A
            LEFT JOIN
                CAM_MNG.DJ_PAY_APP_DET B ON A.PAY_APP_SN = B.PAY_APP_SN
            LEFT JOIN
                CAM_MNG.DJ_EXNP C ON C.PAY_APP_SN = B.PAY_APP_SN AND C.PAY_APP_DET_SN LIKE CONCAT('%', B.PAY_APP_DET_SN,'%')
            LEFT JOIN
                DJ_CAMTIC.A_DOC_INFO DI ON C.DOC_ID = DI.DOC_ID
            WHERE
                A.PJT_CD = #{pjtCd}
            AND
                B.BUDGET_SN LIKE CONCAT(#{bgtCd}, '%')
            AND (
                    A.DOC_STATUS IN (10, 50)
                OR
                    (A.DOC_STATUS = 100 AND C.EXNP_SN IS NULL)
                OR
                    (A.DOC_STATUS = 100 AND C.EXNP_SN IS NOT NULL AND C.RE_STAT != 'Y')
            )
            AND
                B.BUDGET_SN IS NOT NULL
            <if test='stat2!= null and !"".equals(stat2)'>
                AND C.EXNP_DE BETWEEN #{startDt} AND #{endDt}
            </if>
            GROUP BY
                C.EXNP_SN, A.PAY_APP_SN

            UNION ALL

            SELECT
                B.EXNP_SN,
                B.BUDGET_SN,
                B.BUDGET_NM,
                A.PAY_APP_SN,
                A.PAY_APP_TYPE,
                A.EXNP_BRIEFS,
                '' AS APP_TITLE,
                A.REQ_DE,
                A.DT3 AS R_DT,
                A.PJT_CD,
                SUBSTRING(B.BUDGET_SN, 1, 1) AS JANG_SN,
                SUBSTRING(B.BUDGET_SN, 1, 3) AS GWAN_SN,
                CASE
                    WHEN A.PAY_APP_TYPE = 2 THEN (SELECT -1 * SUM(TOT_COST) FROM CAM_MNG.DJ_EXNP_DET S WHERE S.EXNP_SN = B.EXNP_SN)
                    ELSE (SELECT SUM(TOT_COST) FROM CAM_MNG.DJ_EXNP_DET S WHERE S.EXNP_SN = B.EXNP_SN)
                END AS TOT_COST,
                A.DOC_STATUS,
                A.RE_STAT,
                A.INFO_CODE,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO HR WHERE HR.EMP_SEQ = A.REG_EMP_SEQ) AS EMP_NAME,
                IFNULL(DI.DOC_NO, '') AS DOC_NO
            FROM
                CAM_MNG.DJ_EXNP A
            LEFT JOIN
                CAM_MNG.DJ_EXNP_DET B ON A.EXNP_SN = B.EXNP_SN
            LEFT JOIN
                DJ_CAMTIC.A_DOC_INFO DI ON A.DOC_ID = DI.DOC_ID
            WHERE
                A.PJT_CD = #{pjtCd}
            AND
                B.BUDGET_SN LIKE CONCAT(#{bgtCd}, '%')
            AND
                A.DOC_STATUS IN (100, 101)
            AND
                A.RE_STAT = 'Y'
            AND
                B.BUDGET_SN IS NOT NULL
            <if test='stat2!= null and !"".equals(stat2)'>
                AND A.EXNP_DE BETWEEN #{startDt} AND #{endDt}
            </if>
            GROUP BY
                B.EXNP_SN
        ) AA
        WHERE
            1=1
        ORDER BY AA.R_DT DESC
    </select>

    <select id="getIncpBudgetDetailViewData" parameterType="map" resultType="map">
        /*getIncpBudgetDetailViewData*/
        SELECT AA.* FROM
        (
            -- 수입(반제필요)
            SELECT
                B.PAY_INCP_SN,
                B.EVID_TYPE,
                A.PJT_CD,
                '' AS PAY_APP_SN,
                'N' AS PAY_APP_TYPE,
                B.BUDGET_SN,
                B.BUDGET_NM,
                A.RE_STAT,
                A.APP_DE,
                A.APP_CONT,
                A.PAY_EXNP_DE,
                B.CRM_NM,
                IFNULL((SELECT SUM(TOT_COST) FROM CAM_MNG.DJ_PAY_INCP_DET S WHERE S.PAY_INCP_SN = A.PAY_INCP_SN),0) AS TOT_COST,
                IFNULL((SELECT SUM(TOT_COST) FROM CAM_MNG.DJ_PAY_INCP_RE S WHERE S.PAY_INCP_SN = B.PAY_INCP_SN),0) AS DEPO_COST,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO HR WHERE HR.EMP_SEQ = A.REG_EMP_SEQ) AS EMP_NAME,
                A.INFO_CODE,
                IFNULL(DI.DOC_NO, '') AS DOC_NO
            FROM CAM_MNG.DJ_PAY_INCP A
            LEFT JOIN CAM_MNG.DJ_PAY_INCP_DET B ON A.PAY_INCP_SN = B.PAY_INCP_SN
            LEFT JOIN DJ_CAMTIC.A_DOC_INFO DI ON A.DOC_ID = DI.DOC_ID
            WHERE 1=1
              AND A.PJT_CD = #{pjtCd}
              AND A.DOC_STATUS = 100
              AND B.EVID_TYPE IN (1,3,5)
              AND A.BUDGET_SN LIKE CONCAT(#{bgtCd}, '%')
            <if test='stat2!= null and !"".equals(stat2)'>
                AND A.APP_DE BETWEEN #{startDt} AND #{endDt}
            </if>
            GROUP BY A.PAY_INCP_SN
            UNION ALL
            -- 수입(반제필요X)
            SELECT
                B.PAY_INCP_SN,
                B.EVID_TYPE,
                A.PJT_CD,
                '' AS PAY_APP_SN,
                'N' AS PAY_APP_TYPE,
                B.BUDGET_SN,
                B.BUDGET_NM,
                A.RE_STAT,
                A.APP_DE,
                A.APP_CONT,
                A.PAY_EXNP_DE,
                B.CRM_NM,
                IFNULL((SELECT SUM(TOT_COST) FROM CAM_MNG.DJ_PAY_INCP_DET S WHERE S.PAY_INCP_SN = A.PAY_INCP_SN),0)AS TOT_COST,
                IFNULL((SELECT SUM(TOT_COST) FROM CAM_MNG.DJ_PAY_INCP_DET S WHERE S.PAY_INCP_SN = B.PAY_INCP_SN AND S.PMR_NO IS NOT NULL),0) AS DEPO_COST,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO HR WHERE HR.EMP_SEQ = A.REG_EMP_SEQ) AS EMP_NAME,
                A.INFO_CODE,
                IFNULL(DI.DOC_NO, '') AS DOC_NO
            FROM CAM_MNG.DJ_PAY_INCP A
            LEFT JOIN CAM_MNG.DJ_PAY_INCP_DET B ON A.PAY_INCP_SN = B.PAY_INCP_SN
            LEFT JOIN DJ_CAMTIC.A_DOC_INFO DI ON A.DOC_ID = DI.DOC_ID
            WHERE 1=1
              AND A.PJT_CD = #{pjtCd}
              AND A.DOC_STATUS = 100
              AND B.EVID_TYPE IN (2,4,6,7)
              AND A.BUDGET_SN LIKE CONCAT(#{bgtCd}, '%')
            <if test='stat2!= null and !"".equals(stat2)'>
                AND A.APP_DE BETWEEN #{startDt} AND #{endDt}
            </if>
            GROUP BY A.PAY_INCP_SN
            UNION ALL
            -- 반납
            SELECT
                A.EXNP_SN AS PAY_INCP_SN,
                B.EVID_TYPE,
                A.PJT_CD,
                A.PAY_APP_SN,
                A.PAY_APP_TYPE,
                B.BUDGET_SN,
                B.BUDGET_NM,
                A.RE_STAT,
                A.EXNP_DE,
                A.EXNP_BRIEFS,
                A.EXNP_DE,
                B.CRM_NM,
                IFNULL((SELECT -1 * SUM(TOT_COST) FROM CAM_MNG.DJ_EXNP_DET S WHERE S.EXNP_SN = A.EXNP_SN),0) AS TOT_COST,
                IFNULL((SELECT -1 * SUM(TOT_COST) FROM CAM_MNG.DJ_EXNP_DET S WHERE S.EXNP_SN = A.EXNP_SN),0) AS DEPO_COST,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO HR WHERE HR.EMP_SEQ = A.REG_EMP_SEQ) AS EMP_NAME,
                A.INFO_CODE,
                IFNULL(DI.DOC_NO, '') AS DOC_NO
            FROM CAM_MNG.DJ_EXNP A
            LEFT JOIN CAM_MNG.DJ_EXNP_DET B ON A.EXNP_SN = B.EXNP_SN
            LEFT JOIN DJ_CAMTIC.A_DOC_INFO DI ON A.DOC_ID = DI.DOC_ID
            WHERE 1=1
              AND A.PJT_CD = #{pjtCd}
              AND A.DOC_STATUS IN (100, 101)
              AND B.BUDGET_SN LIKE CONCAT(#{bgtCd}, '%')
              AND A.PAY_APP_TYPE = 3
            <if test='stat2!= null and !"".equals(stat2)'>
                AND A.EXNP_DE BETWEEN #{startDt} AND #{endDt}
            </if>
            GROUP BY B.EXNP_SN
        ) AA
        ORDER BY AA.PAY_EXNP_DE DESC
    </select>

    <select id="getCarryoverAmt" parameterType="map" resultType="map">
        /*getCarryoverAmt*/
        SELECT
            OVER_CASH AS CARRYOVER_CASH,
            OVER_POINT AS CARRYOVER_POINT
        FROM CAM_PJT_MNG.DJ_OVER_PAY
        WHERE PJT_CD = #{pjtCd}
    </select>

    <update id="updProjectCarryoverAmt" parameterType="map">
        /*updProjectCarryoverAmt*/
        UPDATE CAM_PJT_MNG.DJ_PROJECT
        SET
            <if test='carryoverCash != null and !"".equals(carryoverCash)'>
                CARRYOVER_CASH = #{carryoverCash}
            </if>
            <if test='carryoverPoint != null and !"".equals(carryoverPoint)'>
                CARRYOVER_POINT = #{carryoverPoint}
            </if>
        WHERE
            PJT_CD = #{pjtCd}
    </update>

    <update id="updCorpProjectCarryoverAmt" parameterType="map">
        /*updCorpProjectCarryoverAmt*/
        UPDATE CAM_PJT_MNG.DJ_CORP_PROJECT
        SET
            <if test='carryoverCash != null and !"".equals(carryoverCash)'>
                CARRYOVER_CASH = #{carryoverCash}
            </if>
            <if test='carryoverPoint != null and !"".equals(carryoverPoint)'>
                CARRYOVER_POINT = #{carryoverPoint}
            </if>
        WHERE
            CORP_PJT_CD = #{pjtCd}
    </update>

    <insert id="setRndProjectPrevNextAmt" parameterType="map">
        /*setRndProjectPrevNextAmt*/
        INSERT INTO CAM_PJT_MNG.DJ_GOVT_PROJECT_AMT
        (
            PJT_SN,
            PREV_SALE_AMT,
            PREV_INCP_AMT,
            NEXT_SALE_AMT,
            NEXT_INCP_AMT,
            REG_EMP_SEQ,
            REG_DT
        )
        VALUES
        (
            #{pjtSn},
            #{prevSaleAmt},
            #{prevIncpAmt},
            #{nextSaleAmt},
            #{nextIncpAmt},
            #{regEmpSeq},
             NOW()
        )
    </insert>

    <update id="updRndProjectPrevNextAmt" parameterType="map">
        /*updRndProjectPrevNextAmt*/
        UPDATE CAM_PJT_MNG.DJ_GOVT_PROJECT_AMT
        SET
            PREV_SALE_AMT = #{prevSaleAmt},
            PREV_INCP_AMT = #{prevIncpAmt},
            NEXT_SALE_AMT = #{nextSaleAmt},
            NEXT_INCP_AMT = #{nextIncpAmt},
            MOD_EMP_SEQ = #{regEmpSeq},
            MOD_DT = NOW()
        WHERE
            GOVT_PJT_SN = #{govtPjtSn}
    </update>

    <select id="getRndProjectPrevNextAmt" parameterType="map" resultType="map">
        /*getRndProjectPrevNextAmt*/
        SELECT * FROM CAM_PJT_MNG.DJ_GOVT_PROJECT_AMT WHERE GOVT_PJT_SN = #{govtPjtSn}
    </select>

    <select id="getCorpProjectDataByCd" parameterType="map" resultType="map">
        /*getCorpProjectDataByCd*/
        SELECT * FROM CAM_PJT_MNG.DJ_CORP_PROJECT WHERE CORP_PJT_CD = #{corpPjtCd};

    </select>

    <select id="getExistProject" parameterType="map" resultType="map">
        /*getExistProject*/
        SELECT
            *
        FROM
            CAM_PJT_MNG.DJ_OVER_PAY
        WHERE
            PJT_CD = #{pjtCd}
    </select>

    <insert id="insOverCash" parameterType="map">
        /*insOverPay*/
        INSERT INTO CAM_PJT_MNG.DJ_OVER_PAY
        (
            PJT_CD,
            OVER_CASH,
            REG_EMP_SEQ
        )
        VALUES
        (
            #{pjtCd},
            #{carryoverCash},
            #{empSeq}
        )
    </insert>

    <insert id="insOverPoint" parameterType="map">
        /*insOverPoint*/
        INSERT INTO CAM_PJT_MNG.DJ_OVER_PAY
        (
            PJT_CD,
            OVER_POINT,
            REG_EMP_SEQ
        )
        VALUES
        (
            #{pjtCd},
            #{carryoverPoint},
            #{empSeq}
        )
    </insert>

    <update id="updOverCash" parameterType="map">
        /*updOverCash*/
        UPDATE CAM_PJT_MNG.DJ_OVER_PAY
        SET
            OVER_CASH = #{carryoverCash},
            MOD_EMP_SEQ = #{empSeq}
        WHERE
            PJT_CD = #{pjtCd}
    </update>

    <update id="updOverPoint" parameterType="map">
        /*updOverPoint*/
        UPDATE CAM_PJT_MNG.DJ_OVER_PAY
        SET
            OVER_POINT = #{carryoverPoint},
            MOD_EMP_SEQ = #{empSeq}
        WHERE
            PJT_CD = #{pjtCd}
    </update>

    <select id="getIncpACost" parameterType="map" resultType="map">
        /*getIncpACost*/
        SELECT
            IFNULL(SUM(TOT_COST), 0) AS TOT_COST
        FROM CAM_MNG.DJ_PAY_INCP A
        LEFT JOIN CAM_MNG.DJ_PAY_INCP_DET B
            ON A.PAY_INCP_SN = B.PAY_INCP_SN
        WHERE
            ((B.EVID_TYPE IN (2,4,6,7) AND A.DOC_STATUS IN (100, 101)) OR (B.EVID_TYPE IN (1,3,5) AND A.RE_STAT = 'Y'))
          AND
            A.PJT_CD = #{pjtCd} AND REPLACE(A.ACC_NO, '-', '') = #{baNb}
    </select>

    <select id="getIncpBCost" parameterType="map" resultType="map">
        /*getIncpBCost*/
        SELECT
            IFNULL(SUM(TOT_COST), 0) AS TOT_COST
        FROM CAM_MNG.DJ_PAY_INCP A
        LEFT JOIN CAM_MNG.DJ_PAY_INCP_DET B
            ON A.PAY_INCP_SN = B.PAY_INCP_SN
        WHERE
            ((B.EVID_TYPE IN (2,4,6,7) AND A.DOC_STATUS IN (100, 101)) OR (B.EVID_TYPE IN (1,3,5) AND A.RE_STAT = 'Y'))
          AND
            A.PJT_CD != #{pjtCd} AND REPLACE(A.ACC_NO, '-', '') = #{baNb}
    </select>

    <select id="getIncpCCost" parameterType="map" resultType="map">
        /*getIncpCCost*/
        SELECT
            IFNULL(SUM(TOT_COST), 0) AS TOT_COST
        FROM CAM_MNG.DJ_PAY_INCP A
        LEFT JOIN CAM_MNG.DJ_PAY_INCP_DET B
            ON A.PAY_INCP_SN = B.PAY_INCP_SN
        WHERE
            ((B.EVID_TYPE IN (2,4,6,7) AND A.DOC_STATUS IN (100, 101)) OR (B.EVID_TYPE IN (1,3,5) AND A.RE_STAT = 'Y'))
          AND
            A.PJT_CD = #{pjtCd} AND REPLACE(A.ACC_NO, '-', '') != #{baNb}
    </select>

    <select id="getExnpACost" parameterType="map" resultType="map">
        /*getExnpACost*/
        SELECT
            IFNULL(SUM(TOT_COST), 0) AS TOT_COST
        FROM CAM_MNG.DJ_EXNP A
        LEFT JOIN CAM_MNG.DJ_EXNP_DET B
            ON A.EXNP_SN = B.EXNP_SN
        WHERE
            A.RE_STAT = 'Y'
        AND
            A.PJT_CD = #{pjtCd} AND REPLACE(A.ACC_NO, '-', '') = #{baNb}
    </select>

    <select id="getExnpBCost" parameterType="map" resultType="map">
        /*getExnpBCost*/
        SELECT
            IFNULL(SUM(TOT_COST), 0) AS TOT_COST
        FROM CAM_MNG.DJ_EXNP A
        LEFT JOIN CAM_MNG.DJ_EXNP_DET B
            ON A.EXNP_SN = B.EXNP_SN
        WHERE
            A.RE_STAT = 'Y'
        AND
            A.PJT_CD != #{pjtCd} AND REPLACE(A.ACC_NO, '-', '') = #{baNb}
    </select>

    <select id="getExnpCCost" parameterType="map" resultType="map">
        /*getExnpBCost*/
        SELECT
            IFNULL(SUM(TOT_COST), 0) AS TOT_COST
        FROM CAM_MNG.DJ_EXNP A
        LEFT JOIN CAM_MNG.DJ_EXNP_DET B
            ON A.EXNP_SN = B.EXNP_SN
        WHERE
            A.RE_STAT = 'Y'
        AND
            A.PJT_CD = #{pjtCd} AND REPLACE(A.ACC_NO, '-', '') != #{baNb}
    </select>

    <select id="getExistProjectPayData" parameterType="map" resultType="map">
        /*getExistProjectPayData*/
        SELECT
            *
        FROM
            CAM_PJT_MNG.DJ_PROJECT_PAY
        WHERE
            PJT_CD = #{pjtCd}
    </select>

    <insert id="insProjectPayAsync" parameterType="map">
        /*insProjectPayAsync*/
        INSERT INTO CAM_PJT_MNG.DJ_PROJECT_PAY
        (
            PJT_CD,
            PJT_PAY
        )
        VALUES
        (
            #{pjtCd},
            #{pjtPay}
        )
    </insert>

    <update id="updProjectPayAsync" parameterType="map">
        /*updProjectPayAsync*/
        UPDATE CAM_PJT_MNG.DJ_PROJECT_PAY
        SET
            PJT_PAY = #{pjtPay}
        WHERE
            PJT_CD = #{pjtCd}
    </update>

    <insert id="insProjectBudgetStatus" parameterType="map">
        /*insProjectBudgetStatus*/
        INSERT INTO CAM_MNG.DJ_PROJECT_BUDGET_STATUS
        (
            PJT_CD,
            PJT_NM,
            PJT_STR_DT,
            PJT_END_DT,
            ACC_NO,
            PETTY_CASH,
            INCP_BUDGET_AMT,
            INCP_BUDGET_SUB_AMT,
            EXNP_BUDGET_AMT,
            EXNP_BUDGET_SUB_AMT,
            IBRANCH_AMT,
            REG_DT
        )
        VALUES
        (
            #{pjtCd},
            #{pjtNm},
            #{pjtStrDt},
            #{pjtEndDt},
            #{bankNB},
            #{pettyCash},
            #{incpBudgetAmt},
            #{incpBudgetSubAmt},
            #{exnpBudgetAmt},
            #{exnpBudgetSubAmt},
            #{ibranchAmt},
            NOW()
        )
    </insert>

    <select id="getProjectBudgetStatusList" parameterType="map" resultType="map">
        /*getProjectBudgetStatusList*/
        SELECT
            A.*
        FROM
            CAM_MNG.DJ_PROJECT_BUDGET_STATUS A
        RIGHT JOIN (
            SELECT PJT_CD, MAX(REG_DT) AS REG_DT FROM CAM_MNG.DJ_PROJECT_BUDGET_STATUS GROUP BY PJT_CD
        ) B
        ON A.PJT_CD = B.PJT_CD AND A.REG_DT = B.REG_DT
        WHERE 1=1
        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword) and "PJT_NM".equals(searchKeyword)'>
                AND A.PJT_NM LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <when test='searchKeyword != null and !"".equals(searchKeyword) and "PJT_CD".equals(searchKeyword)'>
                AND A.PJT_CD = #{searchValue}
            </when>
            <otherwise>
                AND (
                    A.PJT_NM LIKE CONCAT('%', #{searchValue}, '%') OR
                    A.PJT_CD = #{searchValue}
                )
            </otherwise>
        </choose>
        AND (
            (A.PJT_STR_DT BETWEEN #{pjtFromDate} AND #{pjtToDate}) OR
            (A.PJT_END_DT BETWEEN #{pjtFromDate} AND #{pjtToDate})
        )
    </select>
</mapper>