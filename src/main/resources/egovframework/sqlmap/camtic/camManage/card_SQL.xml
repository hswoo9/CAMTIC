<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="card">

    <select id="cardAllList" parameterType="map" resultType="map">
        /*cardAllList*/
        SELECT
            AA.*,
            CASE
                WHEN AA.BUY_STS = '01' THEN '승인'
                WHEN AA.BUY_STS = '02' THEN '승인취소'
                WHEN AA.BUY_STS = '03' THEN '매입'
                WHEN AA.BUY_STS = '04' THEN '매입취소'
                ELSE ''
            END BUY_STS_TXT,
            CASE
                WHEN AA.USE_PAY_APP_SN IS NOT NULL THEN '지급신청'
                WHEN AA.USE_SNACK_INFO_SN IS NOT NULL THEN '식대'
                WHEN AA.USE_HR_BIZ_REQ_ID IS NOT NULL OR AA.USE_HR_BIZ_REQ_RESULT_ID IS NOT NULL THEN '출장'
                ELSE ''
            END EXCEL_PAY_APP_SN,
            CASE
                WHEN AA.PAY_EMP_SEQ IS NOT NULL THEN AA.PAY_EMP_SEQ
                WHEN AA.SNACK_EMP_SEQ IS NOT NULL THEN AA.SNACK_EMP_SEQ
                WHEN AA.HR_BIZ_EMP_SEQ IS NOT NULL THEN AA.HR_BIZ_EMP_SEQ
                WHEN AA.HR_BIZ_RES_EMP_SEQ IS NOT NULL THEN AA.HR_BIZ_RES_EMP_SEQ
                ELSE ''
            END EXCEL_PAY_EMP_SEQ,
            CASE
                WHEN AA.PAY_REG_DT IS NOT NULL THEN AA.PAY_REG_DT
                WHEN AA.SNACK_REG_DT IS NOT NULL THEN AA.SNACK_REG_DT
                WHEN AA.HR_BIZ_REG_DT IS NOT NULL THEN AA.HR_BIZ_REG_DT
                WHEN AA.HR_BIZ_RES_REG_DT IS NOT NULL THEN AA.HR_BIZ_RES_REG_DT
                ELSE ''
            END EXCEL_PAY_REG_DT,
            CASE
                WHEN PAY_EXNP_STAT IS NOT NULL THEN
                    CASE
                        WHEN PAY_EXNP_STAT = 100 AND PAY_REQ_END_DE IS NOT NULL THEN '승인'
                        WHEN PAY_EXNP_STAT = 100 AND PAY_REQ_END_DE IS NULL AND PAY_APP_TYPE IN (1,2,3) THEN '승인'
                        WHEN PAY_EXNP_STAT = 100 AND PAY_REQ_END_DE IS NULL AND PAY_APP_TYPE NOT IN (1,2,3) THEN '미결'
                        WHEN PAY_EXNP_STAT != 100 THEN '미결'
                    END
                WHEN SNACK_EXNP_STAT IS NOT NULL THEN
                    CASE
                        WHEN SNACK_EXNP_STAT = 100 AND SNACK_REQ_END_DE IS NOT NULL THEN '승인'
                        WHEN SNACK_EXNP_STAT = 100 AND SNACK_REQ_END_DE IS NULL AND SNACK_PAY_APP_TYPE IN (1,2,3) THEN '승인'
                        WHEN SNACK_EXNP_STAT = 100 AND SNACK_REQ_END_DE IS NULL AND SNACK_PAY_APP_TYPE NOT IN (1,2,3) THEN '미결'
                        WHEN SNACK_EXNP_STAT != 100 THEN '미결'
                    END
                WHEN HR_EXNP_STAT IS NOT NULL THEN
                    CASE
                        WHEN HR_EXNP_STAT = 100 AND HR_REQ_END_DE IS NOT NULL THEN '승인'
                        WHEN HR_EXNP_STAT = 100 AND HR_REQ_END_DE IS NULL AND HR_PAY_APP_TYPE IN (1,2,3) THEN '승인'
                        WHEN HR_EXNP_STAT = 100 AND HR_REQ_END_DE IS NULL AND HR_PAY_APP_TYPE NOT IN (1,2,3) THEN '미결'
                        WHEN HR_EXNP_STAT != 100 THEN '미결'
                    END
                ELSE '미작성'
            END EXCEL_PAY_EXNP_STAT
        FROM
        (
            SELECT
                A.*,
                B.CLTTR_CD,
                B.TR_CD,
                B.JIRO_NM,
                B.BA_NB,
                B.DEPOSITOR,
                B.TR_NM,
                scp.dec_b64('KEY1', B.CARD_BA_NB) AS CARD_BA_NB,
                B.CVC,
                C.AUTH_NO AS USE_AUTH_NO,
                C.AUTH_HH AS USE_AUTH_HH,
                C.AUTH_DD AS USE_AUTH_DD,
                C.CARD_NO AS USE_CARD_NO,
                C.BUY_STS AS USE_BUY_STS,
                C.PAY_APP_SN AS USE_PAY_APP_SN,
                C.SNACK_INFO_SN AS USE_SNACK_INFO_SN,
                C.HR_BIZ_REQ_ID AS USE_HR_BIZ_REQ_ID,
                C.HR_BIZ_REQ_RESULT_ID AS USE_HR_BIZ_REQ_RESULT_ID,
                C.CE_GW_IDX AS USE_CE_GW_IDX,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT REG_EMP_SEQ FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN) LIMIT 1) AS PAY_EMP_SEQ,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT REG_EMP_SEQ FROM CAM_INSIDE.DJ_HR_BIZ_REQ WHERE HR_BIZ_REQ_ID = C.HR_BIZ_REQ_ID) LIMIT 1) AS HR_BIZ_EMP_SEQ,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT REG_EMP_SEQ FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID) LIMIT 1) AS HR_BIZ_RES_EMP_SEQ,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT REG_EMP_SEQ FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN) LIMIT 1) AS SNACK_EMP_SEQ,
                (SELECT DATE_FORMAT(REG_DT, '%Y-%m-%d') FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN) AS PAY_REG_DT,
                (SELECT DATE_FORMAT(REG_DT, '%Y-%m-%d') FROM CAM_INSIDE.DJ_HR_BIZ_REQ WHERE HR_BIZ_REQ_ID = C.HR_BIZ_REQ_ID) AS HR_BIZ_REG_DT,
                (SELECT DATE_FORMAT(CREATE_DATE, '%Y-%m-%d') FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID) AS HR_BIZ_RES_REG_DT,
                (SELECT DATE_FORMAT(REG_DT, '%Y-%m-%d') FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN) AS SNACK_REG_DT,
                (SELECT DOC_STATUS FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN) LIMIT 1) AS PAY_EXNP_STAT,
                (SELECT DOC_STATUS FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID) LIMIT 1) AS HR_EXNP_STAT,
                (SELECT DOC_STATUS FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN)) AS SNACK_EXNP_STAT,
                (SELECT REQ_END_DE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN) LIMIT 1) AS PAY_REQ_END_DE,
                (SELECT REQ_END_DE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID) LIMIT 1) AS HR_REQ_END_DE,
                (SELECT REQ_END_DE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN) LIMIT 1) AS SNACK_REQ_END_DE,
                (SELECT PAY_APP_TYPE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_TYPE FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN)) AS PAY_APP_TYPE,
                (SELECT PAY_APP_TYPE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_TYPE FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID)) AS HR_PAY_APP_TYPE,
                (SELECT PAY_APP_TYPE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_TYPE FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN)) AS SNACK_PAY_APP_TYPE,
                REPLACE((SELECT PATH_NAME FROM CAM_HR.DJ_DEPT_INFO WHERE DEPT_SEQ = F.DEPT_SEQ), '|', ' ') AS USE_DEPT_NAME,
                CONCAT((SELECT DEPT_NAME FROM CAM_HR.DJ_DEPT_INFO WHERE DEPT_SEQ = F.DEPT_SEQ), " ", E.USE_EMP_NAME) AS USE_MEM,
                E.USE_EMP_NAME
            FROM
                CAM_HR.ERP_HIST_CORPCD_USE A
            LEFT JOIN
                CAM_MNG.DJ_CARD_INFO B
            ON
                A.CARD_NO = REPLACE(SCP.DEC_B64('KEY1', B.CARD_BA_NB), '-', '')
            LEFT JOIN
                CAM_MNG.DJ_CARD_PRIV BB
            ON
                B.TR_CD = BB.TR_CD AND SCP.DEC_B64('KEY1', B.CARD_BA_NB) = BB.CARD_BA_NB
            LEFT JOIN
                CAM_MNG.DJ_CARD_AUTH_MNG BC
            ON
                BB.CARD_BA_NB = BC.CARD_NO AND BB.TR_CD = BC.TR_CD
            LEFT JOIN
                CAM_MNG.DJ_USE_CARD_INFO C
            ON
                A.AUTH_NO = C.AUTH_NO AND A.AUTH_DD = C.AUTH_DD AND A.AUTH_HH = C.AUTH_HH AND A.CARD_NO = REPLACE(C.CARD_NO, "-", "")
            LEFT JOIN
                CAM_MNG.DJ_CARD_TO_HIST D
            ON
                A.AUTH_NO = D.AUTH_NO AND A.AUTH_DD = D.AUTH_DD AND A.AUTH_HH = D.AUTH_HH AND A.CARD_NO = REPLACE(D.CARD_NO, "-", "")
            LEFT JOIN
                CAM_MNG.DJ_CARD_TO E
            ON
                D.CARD_TO_SN = E.CARD_TO_SN
            LEFT JOIN
                CAM_HR.DJ_EMP_INFO F
            ON
                E.USE_EMP_SEQ = F.EMP_SEQ
            WHERE 1=1
            <if test='startDt != null and !"".equals(startDt)'>
                <![CDATA[
                AND
                    DATE_FORMAT(#{startDt}, '%Y%m%d') <= A.AUTH_DD
                AND
                    DATE_FORMAT(#{endDt}, '%Y%m%d') >= A.AUTH_DD
            ]]>
            </if>
            <if test='searchValue != null and !"".equals(searchValue)'>
                AND (B.TR_NM LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%')
                OR A.MER_NM LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%')
                OR CONCAT(SUBSTR(A.CARD_NO, 1, 4), '-', SUBSTR(A.CARD_NO, 5, 4), '-',SUBSTR(A.CARD_NO, 9, 4), '-',SUBSTR(A.CARD_NO, 13, 4)) LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%'))
            </if>
            <if test='regHistYn != null and !"".equals(regHistYn)'>
                <choose>
                    <when test='"Y".equals(regHistYn)'>
                        AND E.USE_EMP_NAME IS NOT NULL
                    </when>
                    <otherwise>
                        AND E.USE_EMP_NAME IS NULL
                    </otherwise>
                </choose>
            </if>
            AND
                CASE
                    WHEN #{empSeq} IN (SELECT EMP_SEQ FROM CAM_MNG.DJ_CARD_AUTH_USER_MNG) THEN (BB.TR_CD IS NULL OR BC.TR_CD IS NOT NULL)
                    ELSE BB.TR_CD IS NULL
                END
            AND A.BUY_STS IN ('01','03')
            GROUP BY A.AUTH_NO
            UNION ALL
            SELECT
                A.*,
                B.CLTTR_CD,
                B.TR_CD,
                B.JIRO_NM,
                B.BA_NB,
                B.DEPOSITOR,
                B.TR_NM,
                scp.dec_b64('KEY1', B.CARD_BA_NB) AS CARD_BA_NB,
                B.CVC,
                C.AUTH_NO AS USE_AUTH_NO,
                C.AUTH_HH AS USE_AUTH_HH,
                C.AUTH_DD AS USE_AUTH_DD,
                C.CARD_NO AS USE_CARD_NO,
                C.BUY_STS AS USE_BUY_STS,
                C.PAY_APP_SN AS USE_PAY_APP_SN,
                C.SNACK_INFO_SN AS USE_SNACK_INFO_SN,
                C.HR_BIZ_REQ_ID AS USE_HR_BIZ_REQ_ID,
                C.HR_BIZ_REQ_RESULT_ID AS USE_HR_BIZ_REQ_RESULT_ID,
                C.CE_GW_IDX AS USE_CE_GW_IDX,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT REG_EMP_SEQ FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN) LIMIT 1) AS PAY_EMP_SEQ,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT REG_EMP_SEQ FROM CAM_INSIDE.DJ_HR_BIZ_REQ WHERE HR_BIZ_REQ_ID = C.HR_BIZ_REQ_ID) LIMIT 1) AS HR_BIZ_EMP_SEQ,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT REG_EMP_SEQ FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID) LIMIT 1) AS HR_BIZ_RES_EMP_SEQ,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT REG_EMP_SEQ FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN) LIMIT 1) AS SNACK_EMP_SEQ,
                (SELECT DATE_FORMAT(REG_DT, '%Y-%m-%d') FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN) AS PAY_REG_DT,
                (SELECT DATE_FORMAT(REG_DT, '%Y-%m-%d') FROM CAM_INSIDE.DJ_HR_BIZ_REQ WHERE HR_BIZ_REQ_ID = C.HR_BIZ_REQ_ID) AS HR_BIZ_REG_DT,
                (SELECT DATE_FORMAT(CREATE_DATE, '%Y-%m-%d') FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID) AS HR_BIZ_RES_REG_DT,
                (SELECT DATE_FORMAT(REG_DT, '%Y-%m-%d') FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN) AS SNACK_REG_DT,
                (SELECT DOC_STATUS FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN) LIMIT 1) AS PAY_EXNP_STAT,
                (SELECT DOC_STATUS FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID) LIMIT 1) AS HR_EXNP_STAT,
                (SELECT DOC_STATUS FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN)) AS SNACK_EXNP_STAT,
                (SELECT REQ_END_DE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN) LIMIT 1) AS PAY_REQ_END_DE,
                (SELECT REQ_END_DE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID) LIMIT 1) AS HR_REQ_END_DE,
                (SELECT REQ_END_DE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN) LIMIT 1) AS SNACK_REQ_END_DE,
                (SELECT PAY_APP_TYPE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_TYPE FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN)) AS PAY_APP_TYPE,
                (SELECT PAY_APP_TYPE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_TYPE FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID)) AS HR_PAY_APP_TYPE,
                (SELECT PAY_APP_TYPE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_TYPE FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN)) AS SNACK_PAY_APP_TYPE,
                REPLACE((SELECT PATH_NAME FROM CAM_HR.DJ_DEPT_INFO WHERE DEPT_SEQ = F.DEPT_SEQ), '|', ' ') AS USE_DEPT_NAME,
                CONCAT((SELECT DEPT_NAME FROM CAM_HR.DJ_DEPT_INFO WHERE DEPT_SEQ = F.DEPT_SEQ), " ", E.USE_EMP_NAME) AS USE_MEM,
                E.USE_EMP_NAME
            FROM
                CAM_HR.ERP_HIST_CORPCD_USE A
            LEFT JOIN
                CAM_MNG.DJ_CARD_INFO B
            ON
                A.CARD_NO = REPLACE(SCP.DEC_B64('KEY1', B.CARD_BA_NB), '-', '')
            LEFT JOIN
                CAM_MNG.DJ_CARD_PRIV BB
            ON
                B.TR_CD = BB.TR_CD AND SCP.DEC_B64('KEY1', B.CARD_BA_NB) = BB.CARD_BA_NB
            LEFT JOIN
                CAM_MNG.DJ_CARD_AUTH_MNG BC
            ON
                BB.CARD_BA_NB = BC.CARD_NO AND BB.TR_CD = BC.TR_CD
            LEFT JOIN
            CAM_MNG.DJ_USE_CARD_INFO C
            ON
                A.AUTH_NO = C.AUTH_NO AND A.AUTH_DD = C.AUTH_DD AND A.AUTH_HH = C.AUTH_HH AND A.CARD_NO = REPLACE(C.CARD_NO, "-", "")
            LEFT JOIN
                CAM_MNG.DJ_CARD_TO_HIST D
            ON
                A.AUTH_NO = D.AUTH_NO AND A.AUTH_DD = D.AUTH_DD AND A.AUTH_HH = D.AUTH_HH AND A.CARD_NO = REPLACE(D.CARD_NO, "-", "")
            LEFT JOIN
                CAM_MNG.DJ_CARD_TO E
            ON
                D.CARD_TO_SN = E.CARD_TO_SN
            LEFT JOIN
                CAM_HR.DJ_EMP_INFO F
            ON
                E.USE_EMP_SEQ = F.EMP_SEQ
            WHERE 1=1
            <if test='startDt != null and !"".equals(startDt)'>
                <![CDATA[
                    AND
                        DATE_FORMAT(#{startDt}, '%Y%m%d') <= A.AUTH_DD
                    AND
                        DATE_FORMAT(#{endDt}, '%Y%m%d') >= A.AUTH_DD
                ]]>
            </if>
            <if test='searchValue != null and !"".equals(searchValue)'>
                AND (B.TR_NM LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%')
                OR A.MER_NM LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%')
                OR CONCAT(SUBSTR(A.CARD_NO, 1, 4), '-', SUBSTR(A.CARD_NO, 5, 4), '-',SUBSTR(A.CARD_NO, 9, 4), '-',SUBSTR(A.CARD_NO, 13, 4)) LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%'))
            </if>
            <if test='regHistYn != null and !"".equals(regHistYn)'>
                <choose>
                    <when test='"Y".equals(regHistYn)'>
                        AND E.USE_EMP_NAME IS NOT NULL
                    </when>
                    <otherwise>
                        AND E.USE_EMP_NAME IS NULL
                    </otherwise>
                </choose>
            </if>
            AND
                CASE
                    WHEN #{empSeq} IN (SELECT EMP_SEQ FROM CAM_MNG.DJ_CARD_AUTH_USER_MNG) THEN (BB.TR_CD IS NULL OR BC.TR_CD IS NOT NULL)
                    ELSE BB.TR_CD IS NULL
                END
            AND A.BUY_STS NOT IN ('01','03')
            GROUP BY A.AUTH_NO
        ) AA
        ORDER BY AA.AUTH_DD DESC
    </select>

    <select id="cardAllListExcel" parameterType="map" resultType="map">
        /*cardAllListExcel*/
        SELECT
            AA.*,
            CASE
            WHEN AA.BUY_STS = '01' THEN '승인'
            WHEN AA.BUY_STS = '02' THEN '승인취소'
            WHEN AA.BUY_STS = '03' THEN '매입'
            WHEN AA.BUY_STS = '04' THEN '매입취소'
            ELSE ''
            END BUY_STS_TXT,
            CASE
            WHEN AA.USE_PAY_APP_SN IS NOT NULL THEN '지급신청'
            WHEN AA.USE_SNACK_INFO_SN IS NOT NULL THEN '식대'
            WHEN AA.USE_HR_BIZ_REQ_ID IS NOT NULL OR AA.USE_HR_BIZ_REQ_RESULT_ID IS NOT NULL THEN '출장'
            ELSE ''
            END EXCEL_PAY_APP_SN,
            CASE
            WHEN AA.PAY_EMP_SEQ IS NOT NULL THEN AA.PAY_EMP_SEQ
            WHEN AA.SNACK_EMP_SEQ IS NOT NULL THEN AA.SNACK_EMP_SEQ
            WHEN AA.HR_BIZ_EMP_SEQ IS NOT NULL THEN AA.HR_BIZ_EMP_SEQ
            WHEN AA.HR_BIZ_RES_EMP_SEQ IS NOT NULL THEN AA.HR_BIZ_RES_EMP_SEQ
            ELSE ''
            END EXCEL_PAY_EMP_SEQ,
            CASE
            WHEN AA.PAY_REG_DT IS NOT NULL THEN AA.PAY_REG_DT
            WHEN AA.SNACK_REG_DT IS NOT NULL THEN AA.SNACK_REG_DT
            WHEN AA.HR_BIZ_REG_DT IS NOT NULL THEN AA.HR_BIZ_REG_DT
            WHEN AA.HR_BIZ_RES_REG_DT IS NOT NULL THEN AA.HR_BIZ_RES_REG_DT
            ELSE ''
            END EXCEL_PAY_REG_DT,
            CASE
            WHEN PAY_EXNP_STAT IS NOT NULL THEN
            CASE
            WHEN PAY_EXNP_STAT = 100 AND PAY_REQ_END_DE IS NOT NULL THEN '승인'
            WHEN PAY_EXNP_STAT = 100 AND PAY_REQ_END_DE IS NULL AND PAY_APP_TYPE IN (1,2,3) THEN '승인'
            WHEN PAY_EXNP_STAT = 100 AND PAY_REQ_END_DE IS NULL AND PAY_APP_TYPE NOT IN (1,2,3) THEN '미결'
            WHEN PAY_EXNP_STAT != 100 THEN '미결'
            END
            WHEN SNACK_EXNP_STAT IS NOT NULL THEN
            CASE
            WHEN SNACK_EXNP_STAT = 100 AND SNACK_REQ_END_DE IS NOT NULL THEN '승인'
            WHEN SNACK_EXNP_STAT = 100 AND SNACK_REQ_END_DE IS NULL AND SNACK_PAY_APP_TYPE IN (1,2,3) THEN '승인'
            WHEN SNACK_EXNP_STAT = 100 AND SNACK_REQ_END_DE IS NULL AND SNACK_PAY_APP_TYPE NOT IN (1,2,3) THEN '미결'
            WHEN SNACK_EXNP_STAT != 100 THEN '미결'
            END
            WHEN HR_EXNP_STAT IS NOT NULL THEN
            CASE
            WHEN HR_EXNP_STAT = 100 AND HR_REQ_END_DE IS NOT NULL THEN '승인'
            WHEN HR_EXNP_STAT = 100 AND HR_REQ_END_DE IS NULL AND HR_PAY_APP_TYPE IN (1,2,3) THEN '승인'
            WHEN HR_EXNP_STAT = 100 AND HR_REQ_END_DE IS NULL AND HR_PAY_APP_TYPE NOT IN (1,2,3) THEN '미결'
            WHEN HR_EXNP_STAT != 100 THEN '미결'
            END
            ELSE '미작성'
            END EXCEL_PAY_EXNP_STAT,
            CONCAT(SUBSTRING(AUTH_DD, 1, 4), '-', SUBSTRING(AUTH_DD, 5, 2), '-', SUBSTRING(AUTH_DD, 7, 2)) AS AUTH_DATE,
            CONCAT(SUBSTRING(AUTH_HH, 1, 2), ':', SUBSTRING(AUTH_HH, 3, 2), ':', SUBSTRING(AUTH_HH, 5, 2)) AS AUTH_TIME,
            <![CDATA[
            CASE
                WHEN USE_PAY_APP_SN IS NOT NULL THEN '지급신청'
                WHEN USE_SNACK_INFO_SN IS NOT NULL THEN '식대'
                WHEN USE_HR_BIZ_REQ_ID IS NOT NULL OR USE_HR_BIZ_REQ_RESULT_ID IS NOT NULL THEN '출장'
                ELSE ''
            END AS PAY_APP_TYPE_TEXT,
            CASE
                WHEN PAY_EMP_SEQ IS NOT NULL THEN PAY_EMP_SEQ
                WHEN SNACK_EMP_SEQ IS NOT NULL THEN SNACK_EMP_SEQ
                WHEN HR_BIZ_EMP_SEQ IS NOT NULL OR HR_BIZ_RES_EMP_SEQ IS NOT NULL THEN COALESCE(HR_BIZ_EMP_SEQ, HR_BIZ_RES_EMP_SEQ)
                ELSE ''
            END AS PAY_APP_EMP_NAME,
            CASE
                WHEN PAY_REG_DT IS NOT NULL THEN PAY_REG_DT
                WHEN SNACK_REG_DT IS NOT NULL THEN SNACK_REG_DT
                WHEN HR_BIZ_REG_DT IS NOT NULL OR HR_BIZ_RES_REG_DT IS NOT NULL THEN COALESCE(HR_BIZ_REG_DT, HR_BIZ_RES_REG_DT)
                ELSE ''
            END AS PAY_APP_REG_DATE,
            CASE
                WHEN PAY_EXNP_STAT IS NOT NULL THEN
                CASE
                WHEN PAY_EXNP_STAT = '100' THEN
                CASE
                WHEN PAY_REQ_END_DE IS NOT NULL AND PAY_REQ_END_DE <> '' THEN '승인'
                ELSE
                CASE
                WHEN PAY_APP_TYPE IN (1, 2, 3) THEN '승인'
                ELSE '미결'
                END
                END
                ELSE '미결'
                END
                WHEN SNACK_EXNP_STAT IS NOT NULL THEN
                CASE
                WHEN SNACK_EXNP_STAT = '100' THEN
                CASE
                WHEN SNACK_REQ_END_DE IS NOT NULL AND SNACK_REQ_END_DE <> '' THEN '승인'
                ELSE
                CASE
                WHEN SNACK_PAY_APP_TYPE IN (1, 2, 3) THEN '승인'
                ELSE '미결'
                END
                END
                ELSE '미결'
                END
                WHEN HR_EXNP_STAT IS NOT NULL THEN
                CASE
                WHEN HR_EXNP_STAT = '100' THEN
                CASE
                WHEN HR_REQ_END_DE IS NOT NULL AND HR_REQ_END_DE <> '' THEN '승인'
                ELSE
                CASE
                WHEN HR_PAY_APP_TYPE IN (1, 2, 3) THEN '승인'
                ELSE '미결'
                END
                END
                ELSE '미결'
                END
                ELSE '미작성'
            END AS STATUS_TEXT
            ]]>
        FROM
        (
            SELECT
                A.*,
                B.CLTTR_CD,
                B.TR_CD,
                B.JIRO_NM,
                B.BA_NB,
                B.DEPOSITOR,
                B.TR_NM,
                scp.dec_b64('KEY1', B.CARD_BA_NB) AS CARD_BA_NB,
                B.CVC,
                C.AUTH_NO AS USE_AUTH_NO,
                C.AUTH_HH AS USE_AUTH_HH,
                C.AUTH_DD AS USE_AUTH_DD,
                C.CARD_NO AS USE_CARD_NO,
                C.BUY_STS AS USE_BUY_STS,
                C.PAY_APP_SN AS USE_PAY_APP_SN,
                C.SNACK_INFO_SN AS USE_SNACK_INFO_SN,
                C.HR_BIZ_REQ_ID AS USE_HR_BIZ_REQ_ID,
                C.HR_BIZ_REQ_RESULT_ID AS USE_HR_BIZ_REQ_RESULT_ID,
                C.CE_GW_IDX AS USE_CE_GW_IDX,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT REG_EMP_SEQ FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN) LIMIT 1) AS PAY_EMP_SEQ,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT REG_EMP_SEQ FROM CAM_INSIDE.DJ_HR_BIZ_REQ WHERE HR_BIZ_REQ_ID = C.HR_BIZ_REQ_ID) LIMIT 1) AS HR_BIZ_EMP_SEQ,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT REG_EMP_SEQ FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID) LIMIT 1) AS HR_BIZ_RES_EMP_SEQ,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT REG_EMP_SEQ FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN) LIMIT 1) AS SNACK_EMP_SEQ,
                (SELECT DATE_FORMAT(REG_DT, '%Y-%m-%d') FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN) AS PAY_REG_DT,
                (SELECT DATE_FORMAT(REG_DT, '%Y-%m-%d') FROM CAM_INSIDE.DJ_HR_BIZ_REQ WHERE HR_BIZ_REQ_ID = C.HR_BIZ_REQ_ID) AS HR_BIZ_REG_DT,
                (SELECT DATE_FORMAT(CREATE_DATE, '%Y-%m-%d') FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID) AS HR_BIZ_RES_REG_DT,
                (SELECT DATE_FORMAT(REG_DT, '%Y-%m-%d') FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN) AS SNACK_REG_DT,
                (SELECT DOC_STATUS FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN) LIMIT 1) AS PAY_EXNP_STAT,
                (SELECT DOC_STATUS FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID) LIMIT 1) AS HR_EXNP_STAT,
                (SELECT DOC_STATUS FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN)) AS SNACK_EXNP_STAT,
                (SELECT REQ_END_DE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN) LIMIT 1) AS PAY_REQ_END_DE,
                (SELECT REQ_END_DE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID) LIMIT 1) AS HR_REQ_END_DE,
                (SELECT REQ_END_DE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN) LIMIT 1) AS SNACK_REQ_END_DE,
                (SELECT PAY_APP_TYPE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_TYPE FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN)) AS PAY_APP_TYPE,
                (SELECT PAY_APP_TYPE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_TYPE FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID)) AS HR_PAY_APP_TYPE,
                (SELECT PAY_APP_TYPE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_TYPE FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN)) AS SNACK_PAY_APP_TYPE,
                REPLACE((SELECT PATH_NAME FROM CAM_HR.DJ_DEPT_INFO WHERE DEPT_SEQ = F.DEPT_SEQ), '|', ' ') AS USE_DEPT_NAME,
                CONCAT((SELECT DEPT_NAME FROM CAM_HR.DJ_DEPT_INFO WHERE DEPT_SEQ = F.DEPT_SEQ), " ", E.USE_EMP_NAME) AS USE_MEM,
                E.USE_EMP_NAME
            FROM
                CAM_HR.ERP_HIST_CORPCD_USE A
            LEFT JOIN
                CAM_MNG.DJ_CARD_INFO B
            ON
                A.CARD_NO = REPLACE(SCP.DEC_B64('KEY1', B.CARD_BA_NB), '-', '')
            LEFT JOIN
                CAM_MNG.DJ_CARD_PRIV BB
            ON
                B.TR_CD = BB.TR_CD AND SCP.DEC_B64('KEY1', B.CARD_BA_NB) = BB.CARD_BA_NB
            LEFT JOIN
                CAM_MNG.DJ_CARD_AUTH_MNG BC
            ON
                BB.CARD_BA_NB = BC.CARD_NO AND BB.TR_CD = BC.TR_CD
            LEFT JOIN
                CAM_MNG.DJ_USE_CARD_INFO C
            ON
                A.AUTH_NO = C.AUTH_NO AND A.AUTH_DD = C.AUTH_DD AND A.AUTH_HH = C.AUTH_HH AND A.CARD_NO = REPLACE(C.CARD_NO, "-", "")
            LEFT JOIN
                CAM_MNG.DJ_CARD_TO_HIST D
            ON
                A.AUTH_NO = D.AUTH_NO AND A.AUTH_DD = D.AUTH_DD AND A.AUTH_HH = D.AUTH_HH AND A.CARD_NO = REPLACE(D.CARD_NO, "-", "")
            LEFT JOIN
                CAM_MNG.DJ_CARD_TO E
            ON
                D.CARD_TO_SN = E.CARD_TO_SN
            LEFT JOIN
                CAM_HR.DJ_EMP_INFO F
            ON
                E.USE_EMP_SEQ = F.EMP_SEQ
            WHERE 1=1
            <if test='startDt != null and !"".equals(startDt)'>
                <![CDATA[
                    AND
                        DATE_FORMAT(#{startDt}, '%Y%m%d') <= A.AUTH_DD
                    AND
                        DATE_FORMAT(#{endDt}, '%Y%m%d') >= A.AUTH_DD
                ]]>
            </if>
            <if test='searchValue != null and !"".equals(searchValue)'>
                AND (B.TR_NM LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%')
                OR A.MER_NM LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%')
                OR CONCAT(SUBSTR(A.CARD_NO, 1, 4), '-', SUBSTR(A.CARD_NO, 5, 4), '-',SUBSTR(A.CARD_NO, 9, 4), '-',SUBSTR(A.CARD_NO, 13, 4)) LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%'))
            </if>
            <if test='regHistYn != null and !"".equals(regHistYn)'>
                <choose>
                    <when test='"Y".equals(regHistYn)'>
                        AND E.USE_EMP_NAME IS NOT NULL
                    </when>
                    <otherwise>
                        AND E.USE_EMP_NAME IS NULL
                    </otherwise>
                </choose>
            </if>
            AND
                CASE
                    WHEN #{empSeq} IN (SELECT EMP_SEQ FROM CAM_MNG.DJ_CARD_AUTH_USER_MNG) THEN (BB.TR_CD IS NULL OR BC.TR_CD IS NOT NULL)
                    ELSE BB.TR_CD IS NULL
                END
            AND A.BUY_STS IN ('01','03')
            GROUP BY A.AUTH_NO

            UNION ALL

            SELECT
                A.*,
                B.CLTTR_CD,
                B.TR_CD,
                B.JIRO_NM,
                B.BA_NB,
                B.DEPOSITOR,
                B.TR_NM,
                scp.dec_b64('KEY1', B.CARD_BA_NB) AS CARD_BA_NB,
                B.CVC,
                C.AUTH_NO AS USE_AUTH_NO,
                C.AUTH_HH AS USE_AUTH_HH,
                C.AUTH_DD AS USE_AUTH_DD,
                C.CARD_NO AS USE_CARD_NO,
                C.BUY_STS AS USE_BUY_STS,
                C.PAY_APP_SN AS USE_PAY_APP_SN,
                C.SNACK_INFO_SN AS USE_SNACK_INFO_SN,
                C.HR_BIZ_REQ_ID AS USE_HR_BIZ_REQ_ID,
                C.HR_BIZ_REQ_RESULT_ID AS USE_HR_BIZ_REQ_RESULT_ID,
                C.CE_GW_IDX AS USE_CE_GW_IDX,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT REG_EMP_SEQ FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN) LIMIT 1) AS PAY_EMP_SEQ,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT REG_EMP_SEQ FROM CAM_INSIDE.DJ_HR_BIZ_REQ WHERE HR_BIZ_REQ_ID = C.HR_BIZ_REQ_ID) LIMIT 1) AS HR_BIZ_EMP_SEQ,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT REG_EMP_SEQ FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID) LIMIT 1) AS HR_BIZ_RES_EMP_SEQ,
                (SELECT EMP_NAME_KR FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = (SELECT REG_EMP_SEQ FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN) LIMIT 1) AS SNACK_EMP_SEQ,
                (SELECT DATE_FORMAT(REG_DT, '%Y-%m-%d') FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN) AS PAY_REG_DT,
                (SELECT DATE_FORMAT(REG_DT, '%Y-%m-%d') FROM CAM_INSIDE.DJ_HR_BIZ_REQ WHERE HR_BIZ_REQ_ID = C.HR_BIZ_REQ_ID) AS HR_BIZ_REG_DT,
                (SELECT DATE_FORMAT(CREATE_DATE, '%Y-%m-%d') FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID) AS HR_BIZ_RES_REG_DT,
                (SELECT DATE_FORMAT(REG_DT, '%Y-%m-%d') FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN) AS SNACK_REG_DT,
                (SELECT DOC_STATUS FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN) LIMIT 1) AS PAY_EXNP_STAT,
                (SELECT DOC_STATUS FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID) LIMIT 1) AS HR_EXNP_STAT,
                (SELECT DOC_STATUS FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN)) AS SNACK_EXNP_STAT,
                (SELECT REQ_END_DE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN) LIMIT 1) AS PAY_REQ_END_DE,
                (SELECT REQ_END_DE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID) LIMIT 1) AS HR_REQ_END_DE,
                (SELECT REQ_END_DE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_SN FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN) LIMIT 1) AS SNACK_REQ_END_DE,
                (SELECT PAY_APP_TYPE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_TYPE FROM CAM_MNG.DJ_PAY_APP WHERE PAY_APP_SN = C.PAY_APP_SN)) AS PAY_APP_TYPE,
                (SELECT PAY_APP_TYPE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_TYPE FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_RESULT_ID = C.HR_BIZ_REQ_RESULT_ID)) AS HR_PAY_APP_TYPE,
                (SELECT PAY_APP_TYPE FROM CAM_MNG.DJ_EXNP WHERE PAY_APP_SN = (SELECT PAY_APP_TYPE FROM CAM_INSIDE.DJ_SNACK_INFO WHERE SNACK_INFO_SN = C.SNACK_INFO_SN)) AS SNACK_PAY_APP_TYPE,
                REPLACE((SELECT PATH_NAME FROM CAM_HR.DJ_DEPT_INFO WHERE DEPT_SEQ = F.DEPT_SEQ), '|', ' ') AS USE_DEPT_NAME,
                CONCAT((SELECT DEPT_NAME FROM CAM_HR.DJ_DEPT_INFO WHERE DEPT_SEQ = F.DEPT_SEQ), " ", E.USE_EMP_NAME) AS USE_MEM,
                E.USE_EMP_NAME
            FROM
                CAM_HR.ERP_HIST_CORPCD_USE A
            LEFT JOIN
                CAM_MNG.DJ_CARD_INFO B
            ON
                A.CARD_NO = REPLACE(SCP.DEC_B64('KEY1', B.CARD_BA_NB), '-', '')
            LEFT JOIN
                CAM_MNG.DJ_CARD_PRIV BB
            ON
                B.TR_CD = BB.TR_CD AND SCP.DEC_B64('KEY1', B.CARD_BA_NB) = BB.CARD_BA_NB
            LEFT JOIN
                CAM_MNG.DJ_CARD_AUTH_MNG BC
            ON
                BB.CARD_BA_NB = BC.CARD_NO AND BB.TR_CD = BC.TR_CD
            LEFT JOIN
                CAM_MNG.DJ_USE_CARD_INFO C
            ON
                A.AUTH_NO = C.AUTH_NO AND A.AUTH_DD = C.AUTH_DD AND A.AUTH_HH = C.AUTH_HH AND A.CARD_NO = REPLACE(C.CARD_NO, "-", "")
            LEFT JOIN
                CAM_MNG.DJ_CARD_TO_HIST D
            ON
                A.AUTH_NO = D.AUTH_NO AND A.AUTH_DD = D.AUTH_DD AND A.AUTH_HH = D.AUTH_HH AND A.CARD_NO = REPLACE(D.CARD_NO, "-", "")
            LEFT JOIN
                CAM_MNG.DJ_CARD_TO E
            ON
                D.CARD_TO_SN = E.CARD_TO_SN
            LEFT JOIN
                CAM_HR.DJ_EMP_INFO F
            ON
                E.USE_EMP_SEQ = F.EMP_SEQ
            WHERE 1=1
            <if test='startDt != null and !"".equals(startDt)'>
                <![CDATA[
                        AND
                            DATE_FORMAT(#{startDt}, '%Y%m%d') <= A.AUTH_DD
                        AND
                            DATE_FORMAT(#{endDt}, '%Y%m%d') >= A.AUTH_DD
                    ]]>
            </if>
            <if test='searchValue != null and !"".equals(searchValue)'>
                AND (B.TR_NM LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%')
                OR A.MER_NM LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%')
                OR CONCAT(SUBSTR(A.CARD_NO, 1, 4), '-', SUBSTR(A.CARD_NO, 5, 4), '-',SUBSTR(A.CARD_NO, 9, 4), '-',SUBSTR(A.CARD_NO, 13, 4)) LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%'))
            </if>
            <if test='regHistYn != null and !"".equals(regHistYn)'>
                <choose>
                    <when test='"Y".equals(regHistYn)'>
                        AND E.USE_EMP_NAME IS NOT NULL
                    </when>
                    <otherwise>
                        AND E.USE_EMP_NAME IS NULL
                    </otherwise>
                </choose>
            </if>
            AND
                CASE
                    WHEN #{empSeq} IN (SELECT EMP_SEQ FROM CAM_MNG.DJ_CARD_AUTH_USER_MNG) THEN (BB.TR_CD IS NULL OR BC.TR_CD IS NOT NULL)
                    ELSE BB.TR_CD IS NULL
                END
            AND A.BUY_STS NOT IN ('01','03')
            GROUP BY A.AUTH_NO
        ) AA
        ORDER BY AA.AUTH_DD DESC
    </select>

    <select id="cardUseList" parameterType="map" resultType="map">
        /*cardUseList*/
        SELECT * FROM
        (
            SELECT
                A.*,
                B.CLTTR_CD,
                B.TR_CD,
                B.JIRO_NM,
                B.BA_NB,
                B.DEPOSITOR,
                B.TR_NM,
                scp.dec_b64('KEY1', B.CARD_BA_NB) AS CARD_BA_NB,
                B.CVC,
                C.AUTH_NO AS USE_AUTH_NO,
                C.AUTH_HH AS USE_AUTH_HH,
                C.AUTH_DD AS USE_AUTH_DD,
                C.CARD_NO AS USE_CARD_NO,
                C.BUY_STS AS USE_BUY_STS,
                C.PAY_APP_SN AS USE_PAY_APP_SN,
                C.SNACK_INFO_SN AS USE_SNACK_INFO_SN,
                C.HR_BIZ_REQ_ID AS USE_HR_BIZ_REQ_ID,
                C.HR_BIZ_REQ_RESULT_ID AS USE_HR_BIZ_REQ_RESULT_ID,
                C.CE_GW_IDX AS USE_CE_GW_IDX,
                REPLACE((SELECT PATH_NAME FROM CAM_HR.DJ_DEPT_INFO WHERE DEPT_SEQ = F.DEPT_SEQ), '|', ' ') AS USE_DEPT_NAME,
                CONCAT((SELECT DEPT_NAME FROM CAM_HR.DJ_DEPT_INFO WHERE DEPT_SEQ = F.DEPT_SEQ), " ", E.USE_EMP_NAME) AS USE_MEM,
                E.USE_EMP_NAME
            FROM
                CAM_HR.ERP_HIST_CORPCD_USE A
            LEFT JOIN
                CAM_MNG.DJ_CARD_INFO B
            ON
                A.CARD_NO = REPLACE(B.CARD_BA_NB, '-', '')
            LEFT JOIN
                CAM_MNG.DJ_CARD_PRIV BB
            ON
                B.TR_CD = BB.TR_CD AND B.CARD_BA_NB = BB.CARD_BA_NB
            LEFT JOIN
                CAM_MNG.DJ_CARD_AUTH_MNG BC
            ON
                BB.CARD_BA_NB = BC.CARD_NO AND BB.TR_CD = BC.TR_CD
            LEFT JOIN
                CAM_MNG.DJ_USE_CARD_INFO C
            ON
                A.AUTH_NO = C.AUTH_NO AND A.AUTH_DD = C.AUTH_DD AND A.AUTH_HH = C.AUTH_HH AND A.CARD_NO = REPLACE(C.CARD_NO, "-", "")
            LEFT JOIN
                CAM_MNG.DJ_CARD_TO_HIST D
            ON
                A.AUTH_NO = D.AUTH_NO AND A.AUTH_DD = D.AUTH_DD AND A.AUTH_HH = D.AUTH_HH AND A.CARD_NO = REPLACE(D.CARD_NO, "-", "")
            LEFT JOIN
                CAM_MNG.DJ_CARD_TO E
            ON
                D.CARD_TO_SN = E.CARD_TO_SN
            LEFT JOIN
                CAM_HR.DJ_EMP_INFO F
            ON
                E.USE_EMP_SEQ = F.EMP_SEQ
            WHERE 1=1
            <if test='startDt != null and !"".equals(startDt)'>
            <![CDATA[
                AND
                    DATE_FORMAT(#{startDt}, '%Y%m%d') <= A.AUTH_DD
                AND
                    DATE_FORMAT(#{endDt}, '%Y%m%d') >= A.AUTH_DD
            ]]>
            </if>
            <if test='searchValue != null and !"".equals(searchValue)'>
                AND (B.TR_NM LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%')
                    OR A.CARD_NO LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%'))
            </if>
            <if test='regHistYn != null and !"".equals(regHistYn)'>
                <choose>
                    <when test='"Y".equals(regHistYn)'>
                        AND E.USE_EMP_NAME IS NOT NULL
                    </when>
                    <otherwise>
                        AND E.USE_EMP_NAME IS NULL
                    </otherwise>
                </choose>
            </if>
            AND
                CASE
                    WHEN #{empSeq} IN (SELECT EMP_SEQ FROM CAM_MNG.DJ_CARD_AUTH_USER_MNG) THEN (BB.TR_CD IS NULL OR BC.TR_CD IS NOT NULL)
                    ELSE BB.TR_CD IS NULL
                END
            AND
                C.USE_CARD_SN IS NULL
            AND A.BUY_STS IN ('01','03')
            UNION ALL
            SELECT
                A.*,
                B.CLTTR_CD,
                B.TR_CD,
                B.JIRO_NM,
                B.BA_NB,
                B.DEPOSITOR,
                B.TR_NM,
                scp.dec_b64('KEY1', B.CARD_BA_NB) AS CARD_BA_NB,
                B.CVC,
                C.AUTH_NO AS USE_AUTH_NO,
                C.AUTH_HH AS USE_AUTH_HH,
                C.AUTH_DD AS USE_AUTH_DD,
                C.CARD_NO AS USE_CARD_NO,
                C.BUY_STS AS USE_BUY_STS,
                C.PAY_APP_SN AS USE_PAY_APP_SN,
                C.SNACK_INFO_SN AS USE_SNACK_INFO_SN,
                C.HR_BIZ_REQ_ID AS USE_HR_BIZ_REQ_ID,
                C.HR_BIZ_REQ_RESULT_ID AS USE_HR_BIZ_REQ_RESULT_ID,
                C.CE_GW_IDX AS USE_CE_GW_IDX,
                REPLACE((SELECT PATH_NAME FROM CAM_HR.DJ_DEPT_INFO WHERE DEPT_SEQ = F.DEPT_SEQ), '|', ' ') AS USE_DEPT_NAME,
                CONCAT((SELECT DEPT_NAME FROM CAM_HR.DJ_DEPT_INFO WHERE DEPT_SEQ = F.DEPT_SEQ), " ", E.USE_EMP_NAME) AS USE_MEM,
                E.USE_EMP_NAME
            FROM
                CAM_HR.ERP_HIST_CORPCD_USE A
            LEFT JOIN
                CAM_MNG.DJ_CARD_INFO B
            ON
                A.CARD_NO = REPLACE(B.CARD_BA_NB, '-', '')
            LEFT JOIN
                CAM_MNG.DJ_CARD_PRIV BB
            ON
                B.TR_CD = BB.TR_CD AND B.CARD_BA_NB = BB.CARD_BA_NB
            LEFT JOIN
                CAM_MNG.DJ_CARD_AUTH_MNG BC
            ON
                BB.CARD_BA_NB = BC.CARD_NO AND BB.TR_CD = BC.TR_CD
            LEFT JOIN
                CAM_MNG.DJ_USE_CARD_INFO C
            ON
                A.AUTH_NO = C.AUTH_NO AND A.AUTH_DD = C.AUTH_DD AND A.AUTH_HH = C.AUTH_HH AND A.CARD_NO = REPLACE(C.CARD_NO, "-", "")
            LEFT JOIN
                CAM_MNG.DJ_CARD_TO_HIST D
            ON
                A.AUTH_NO = D.AUTH_NO AND A.AUTH_DD = D.AUTH_DD AND A.AUTH_HH = D.AUTH_HH AND A.CARD_NO = REPLACE(D.CARD_NO, "-", "")
            LEFT JOIN
                CAM_MNG.DJ_CARD_TO E
            ON
                D.CARD_TO_SN = E.CARD_TO_SN
            LEFT JOIN
                CAM_HR.DJ_EMP_INFO F
            ON
                E.USE_EMP_SEQ = F.EMP_SEQ
            WHERE 1=1
            <if test='startDt != null and !"".equals(startDt)'>
                <![CDATA[
                    AND
                        DATE_FORMAT(#{startDt}, '%Y%m%d') <= A.AUTH_DD
                    AND
                        DATE_FORMAT(#{endDt}, '%Y%m%d') >= A.AUTH_DD
                ]]>
            </if>
            <if test='searchValue != null and !"".equals(searchValue)'>
                AND (B.TR_NM LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%')
                OR A.CARD_NO LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%'))
            </if>
            <if test='regHistYn != null and !"".equals(regHistYn)'>
                <choose>
                    <when test='"Y".equals(regHistYn)'>
                        AND E.USE_EMP_NAME IS NOT NULL
                    </when>
                    <otherwise>
                        AND E.USE_EMP_NAME IS NULL
                    </otherwise>
                </choose>
            </if>
            AND
            CASE
                WHEN #{empSeq} IN (SELECT EMP_SEQ FROM CAM_MNG.DJ_CARD_AUTH_USER_MNG) THEN (BB.TR_CD IS NULL OR BC.TR_CD IS NOT NULL)
                ELSE BB.TR_CD IS NULL
            END
            AND
                C.USE_CARD_SN IS NULL
            AND A.BUY_STS NOT IN ('01','03')
        ) AA
        ORDER BY AA.AUTH_DD DESC
    </select>

    <select id="cardToUseList" parameterType="map" resultType="map">
        /*cardToUseList*/
        SELECT
            A.*,
            B.CLTTR_CD,
            B.TR_CD,
            B.JIRO_NM,
            B.BA_NB,
            B.DEPOSITOR,
            B.TR_NM,
            scp.dec_b64('KEY1', B.CARD_BA_NB) AS CARD_BA_NB,
            B.CVC,
            C.*
        FROM
            CAM_HR.ERP_HIST_CORPCD_USE A
        LEFT JOIN
            CAM_MNG.DJ_CARD_INFO B
        ON
            A.CARD_NO = REPLACE(B.CARD_BA_NB, '-', '')
        LEFT JOIN
            CAM_MNG.DJ_CARD_TO_HIST C
        ON
            A.AUTH_NO = C.AUTH_NO AND A.AUTH_DD = C.AUTH_DD AND A.AUTH_HH = C.AUTH_HH AND A.CARD_NO = REPLACE(C.CARD_NO, "-", "")

        WHERE 1=1
        AND C.CARD_TO_HIST_SN IS NULL
        <if test='startDt != null and !"".equals(startDt)'>
            <![CDATA[
            AND
                DATE_FORMAT(#{startDt}, '%Y%m%d') <= A.AUTH_DD
            AND
                DATE_FORMAT(#{endDt}, '%Y%m%d') >= A.AUTH_DD
        ]]>
        </if>
        <if test='searchValue != null and !"".equals(searchValue)'>
            AND (B.TR_NM LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%')
            OR A.CARD_NO LIKE CONCAT('%', REPLACE(#{searchValue}, '-', ''), '%'))
        </if>
        ORDER BY A.AUTH_DD DESC
    </select>

    <select id="useCardDetailInfo" parameterType="map" resultType="map">
        /*useCardDetailInfo*/
        SELECT
            A.*,
            B.TR_NM,
            C.FILE_NO
        FROM
            CAM_HR.ERP_HIST_CORPCD_USE A
        LEFT JOIN CAM_MNG.DJ_CARD_INFO B ON A.CARD_NO = REPLACE(B.CARD_BA_NB ,'-','')
        LEFT JOIN CAM_INSIDE.DJ_HR_CARD_HIST C ON C.CARD_NO = A.CARD_NO AND C.AUTH_DD = A.AUTH_DD AND C.AUTH_NO = A.AUTH_NO AND C.AUTH_HH = A.AUTH_HH
        WHERE
            A.AUTH_NO = #{authNo} AND A.CARD_NO = #{cardNo}
        AND
            A.AUTH_DD = #{authDate} AND A.AUTH_HH = #{authTime}
        AND
            A.BUY_STS = #{buySts}
        <if test='hrBizReqResultId != null and !"".equals(hrBizReqResultId)'>
        AND C.HR_BIZ_REQ_RESULT_ID = #{hrBizReqResultId}
        </if>
        <if test='hrBizReqId != null and !"".equals(hrBizReqId)'>
            AND C.HR_BIZ_REQ_ID = #{hrBizReqId}
        </if>
        LIMIT 1
    </select>

    <select id="getCardTOData" parameterType="map" resultType="map">
        /*getCardTOData*/
        SELECT
            A.*,
            SUBSTRING_INDEX(A.CARD_BA_NB,'-',-1) AS LAST_CARD_NUM,
            (SELECT COUNT(*) FROM CAM_MNG.DJ_CARD_TO_HIST WHERE CARD_TO_SN = A.CARD_TO_SN) AS REG_HISTORY,
            IFNULL((SELECT SUM(AUTH_AMT) FROM CAM_MNG.DJ_CARD_TO_HIST WHERE CARD_TO_SN = A.CARD_TO_SN), 0) AS SUM_AMT,
            (
                SELECT sB.MER_NM FROM CAM_MNG.DJ_CARD_TO_HIST sA
                LEFT JOIN CAM_HR.ERP_HIST_CORPCD_USE sB
                ON sA.AUTH_NO = sB.AUTH_NO AND sA.AUTH_DD = sB.AUTH_DD AND sA.AUTH_HH = sB.AUTH_HH AND sA.CARD_NO = REPLACE(sB.CARD_NO, "-", "")
                WHERE sA.CARD_TO_SN = A.CARD_TO_SN
                ORDER BY sA.CARD_TO_HIST_SN DESC LIMIT 1
            ) AS LAST_MER_NM,
            (SELECT DEPT_NAME FROM CAM_HR.DJ_DEPT_INFO WHERE DEPT_SEQ = B.DEPT_SEQ) AS TEAM_NAME,
            IFNULL((SELECT HR_BIZ_REQ_RESULT_ID FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_ID = FR_KEY), '') AS HR_BIZ_REQ_RESULT_ID,
            IFNULL((SELECT TRIP_CODE FROM CAM_INSIDE.DJ_HR_BIZ_REQ WHERE HR_BIZ_REQ_ID = FR_KEY), '') AS TRIP_CODE
        FROM
            CAM_MNG.DJ_CARD_TO A
        LEFT JOIN
            CAM_HR.DJ_EMP_INFO B
        ON
            A.USE_EMP_SEQ = B.EMP_SEQ
        WHERE DEL_YN = 'N'
        <![CDATA[
            AND
                DATE_FORMAT(#{startDt}, '%Y%m%d') <= DATE_FORMAT(A.CARD_TO_DE, '%Y%m%d')
            AND
                DATE_FORMAT(#{endDt}, '%Y%m%d') >= DATE_FORMAT(A.CARD_TO_DE, '%Y%m%d')
        ]]>
        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword) and "CARD_NUM".equals(searchKeyword)'>
                AND
                    SUBSTRING_INDEX(A.CARD_BA_NB,'-',-1) LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <when test='searchKeyword != null and !"".equals(searchKeyword) and "USER_NAME".equals(searchKeyword)'>
                AND
                    A.USE_EMP_NAME LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <otherwise>
                AND
                    (
                        SUBSTRING_INDEX(A.CARD_BA_NB,'-',-1) LIKE CONCAT('%', #{searchValue}, '%') OR
                        A.USE_EMP_NAME LIKE CONCAT('%', #{searchValue}, '%')
                    )
            </otherwise>
        </choose>
        <if test='regHistYn != null and !"".equals(regHistYn)'>
            <choose>
                <when test='"Y".equals(regHistYn)'>
                    AND (SELECT COUNT(*) FROM CAM_MNG.DJ_CARD_TO_HIST WHERE CARD_TO_SN = A.CARD_TO_SN) <![CDATA[>]]> 0
                </when>
                <otherwise>
                    AND (SELECT COUNT(*) FROM CAM_MNG.DJ_CARD_TO_HIST WHERE CARD_TO_SN = A.CARD_TO_SN) = 0
                </otherwise>
            </choose>
        </if>
        ORDER BY CARD_TO_SN DESC
    </select>

    <select id="getCardTOData2" parameterType="map" resultType="map">
        /*getCardTOData*/
        SELECT
        A.*,
        SUBSTRING_INDEX(A.CARD_BA_NB,'-',-1) AS LAST_CARD_NUM,
        (SELECT COUNT(*) FROM CAM_MNG.DJ_CARD_TO_HIST WHERE CARD_TO_SN = A.CARD_TO_SN) AS REG_HISTORY,
        IFNULL((SELECT SUM(AUTH_AMT) FROM CAM_MNG.DJ_CARD_TO_HIST WHERE CARD_TO_SN = A.CARD_TO_SN), 0) AS SUM_AMT,
        (
        SELECT sB.MER_NM FROM CAM_MNG.DJ_CARD_TO_HIST sA
        LEFT JOIN CAM_HR.ERP_HIST_CORPCD_USE sB
        ON sA.AUTH_NO = sB.AUTH_NO AND sA.AUTH_DD = sB.AUTH_DD AND sA.AUTH_HH = sB.AUTH_HH AND sA.CARD_NO = REPLACE(sB.CARD_NO, "-", "")
        WHERE sA.CARD_TO_SN = A.CARD_TO_SN
        ORDER BY sA.CARD_TO_HIST_SN DESC LIMIT 1
        ) AS LAST_MER_NM,
        (SELECT DEPT_NAME FROM CAM_HR.DJ_DEPT_INFO WHERE DEPT_SEQ = B.DEPT_SEQ) AS TEAM_NAME,
        IFNULL((SELECT HR_BIZ_REQ_RESULT_ID FROM CAM_INSIDE.DJ_HR_BIZ_REQ_RESULT WHERE HR_BIZ_REQ_ID = FR_KEY), '') AS HR_BIZ_REQ_RESULT_ID,
        IFNULL((SELECT TRIP_CODE FROM CAM_INSIDE.DJ_HR_BIZ_REQ WHERE HR_BIZ_REQ_ID = FR_KEY), '') AS TRIP_CODE
        FROM
        CAM_MNG.DJ_CARD_TO A
        LEFT JOIN
        CAM_HR.DJ_EMP_INFO B
        ON
        A.USE_EMP_SEQ = B.EMP_SEQ
        WHERE DEL_YN = 'N'
        <![CDATA[
            AND
                DATE_FORMAT(#{startDt}, '%Y%m%d') <= DATE_FORMAT(A.CARD_TO_DE, '%Y%m%d')
            AND
                DATE_FORMAT(#{endDt}, '%Y%m%d') >= DATE_FORMAT(A.CARD_TO_DE, '%Y%m%d')
        ]]>
        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword) and "CARD_NUM".equals(searchKeyword)'>
                AND
                SUBSTRING_INDEX(A.CARD_BA_NB,'-',-1) LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <when test='searchKeyword != null and !"".equals(searchKeyword) and "USER_NAME".equals(searchKeyword)'>
                AND
                A.USE_EMP_NAME LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <otherwise>
                AND
                (
                SUBSTRING_INDEX(A.CARD_BA_NB,'-',-1) LIKE CONCAT('%', #{searchValue}, '%') OR
                A.USE_EMP_NAME LIKE CONCAT('%', #{searchValue}, '%')
                )
            </otherwise>
        </choose>
        <if test='regHistYn != null and !"".equals(regHistYn)'>
            <choose>
                <when test='"Y".equals(regHistYn)'>
                    AND (SELECT COUNT(*) FROM CAM_MNG.DJ_CARD_TO_HIST WHERE CARD_TO_SN = A.CARD_TO_SN) <![CDATA[>]]> 0
                </when>
                <otherwise>
                    AND (SELECT COUNT(*) FROM CAM_MNG.DJ_CARD_TO_HIST WHERE CARD_TO_SN = A.CARD_TO_SN) = 0
                </otherwise>
            </choose>
        </if>
            AND A.CARD_TO_SN NOT IN (SELECT CARD_TO_SN FROM CAM_MNG.DJ_MEETING)
            AND A.CARD_TO_PURPOSE = '회의'
            AND LEFT(A.PJT_CD, 9) = LEFT(#{pjtCd}, 9)
        ORDER BY CARD_TO_SN DESC
    </select>

    <insert id="saveRegCardTo" parameterType="map">
        /*saveRegCardTo*/
        INSERT INTO CAM_MNG.DJ_CARD_TO
            (
                TR_CD,
                JIRO_NM,
                BA_NB,
                DEPOSITOR,
                TR_NM,
                CARD_BA_NB,
                USE_EMP_SEQ,
                USE_EMP_NAME,
                CARD_TO_DE,
                CARD_TO_TIME,
                CARD_FROM_DE,
                CARD_FROM_TIME,
                CARD_TO_PURPOSE,
                FR_KEY,
                VISIT_CRM,
                BUSINESS_YN,
                PJT_SN,
                PJT_CD,
                PJT_NM,
                REG_EMP_SEQ
            )
        VALUES
            (
                #{trCd},
                #{jiroNm},
                #{baNb},
                #{depositor},
                #{trNm},
                #{cardBaNb},
                #{empSeq},
                #{empName},
                #{cardToDe},
                #{cardToTime},
                #{cardFromDe},
                #{cardFromTime},
                #{cardToPurpose},
                #{frKey},
                #{visitCrm},
                #{businessYn},
                #{pjtSn},
                #{pjtCd},
                #{pjtNm},
                #{regEmpSeq}
            )
        <selectKey keyProperty="cardToSn" resultType="Integer" order="BEFORE">
            SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'CAM_MNG' AND TABLE_NAME = 'DJ_CARD_TO'
        </selectKey>
    </insert>

    <delete id="delCardTo" parameterType="map">
        /*delCardTo*/
        DELETE FROM CAM_MNG.DJ_CARD_TO
        WHERE
            CARD_TO_SN = #{cardToSn}
    </delete>

    <delete id="delCardHist" parameterType="map">
        /*delCardHist*/
        DELETE FROM CAM_MNG.DJ_CARD_TO_HIST WHERE CARD_TO_HIST_SN = #{cardHistSn}
    </delete>

    <select id="getCardToInfo" parameterType="map" resultType="map">
        /*getCardToInfo*/
        SELECT
            *
        FROM
            CAM_MNG.DJ_CARD_TO
        WHERE
            CARD_TO_SN = #{cardToSn}
    </select>

    <select id="getCardUseCheck" parameterType="map" resultType="int">
        /*getCardUseCheck*/
        SELECT
            COUNT(*)
        FROM
            CAM_MNG.DJ_CARD_TO
        WHERE
            CARD_BA_NB = #{cardBaNb}
        AND
            RT_YN = 'N'
        AND
            DEL_YN = 'N'
    </select>

    <update id="updRegCardTo" parameterType="map">
        /*updRegCardTo*/
        UPDATE
            CAM_MNG.DJ_CARD_TO
        SET
            TR_CD = #{trCd},
            JIRO_NM = #{jiroNm},
            BA_NB = #{baNb},
            DEPOSITOR = #{depositor},
            TR_NM = #{trNm},
            CARD_BA_NB = #{cardBaNb},
            USE_EMP_SEQ = #{empSeq},
            USE_EMP_NAME = #{empName},
            CARD_TO_DE = #{cardToDe},
            REG_EMP_SEQ = #{regEmpSeq}
        WHERE
            CARD_TO_SN = #{cardToSn}
    </update>

    <insert id="insUseCardHist" parameterType="map">
        /*insUseCardHist*/
        INSERT INTO CAM_MNG.DJ_CARD_TO_HIST
            (
                CARD_TO_SN,
                CARD_NO,
                AUTH_NO,
                AUTH_DD,
                AUTH_HH,
                BUY_STS,
                AUTH_AMT
            )
        VALUES
            (
                #{CARD_TO_SN},
                #{CARD_NO},
                #{AUTH_NO},
                #{AUTH_DD},
                #{AUTH_HH},
                #{BUY_STS},
                #{AUTH_AMT}
            )
    </insert>

    <select id="getCardTOHistList" parameterType="map" resultType="map">
        /*getCardTOHistList*/
        SELECT
            A.*, C.*,
            (SELECT RT_YN FROM CAM_MNG.DJ_CARD_TO WHERE CARD_TO_SN = A.CARD_TO_SN) as RT_YN
        FROM
            CAM_MNG.DJ_CARD_TO_HIST A
        LEFT JOIN
            CAM_HR.ERP_HIST_CORPCD_USE C
        ON
            A.AUTH_NO = C.AUTH_NO AND A.AUTH_DD = C.AUTH_DD AND A.AUTH_HH = C.AUTH_HH AND A.CARD_NO = REPLACE(C.CARD_NO, "-", "")
        WHERE
            A.CARD_TO_SN = #{cardToSn}
    </select>

    <update id="updCardFromDe" parameterType="map">
        /*updCardFromDe*/
        UPDATE CAM_MNG.DJ_CARD_TO
        SET
            CARD_FROM_DE = #{cardFromDe},
            CARD_FROM_TIME = #{cardFromTime},
            RT_YN = 'Y'
        WHERE
            CARD_TO_SN = #{cardToSn}
    </update>

    <insert id="saveCardUserGroup" parameterType="map">
        INSERT INTO CAM_MNG.DJ_CARD_USER_GROUP
            (
                 GROUP_NAME
                , REG_EMP_SEQ
                , REG_EMP_NAME
                , REG_DEPT_NAME
                , USE_YN
            )
        VALUES
            (
                #{groupNm}
                , #{regEmpSeq}
                , #{regEmpName}
                , #{regDeptName}
                , #{useYn}
            )

        <selectKey keyProperty="groupId" resultType="Integer" order="BEFORE">
            SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'CAM_MNG' AND TABLE_NAME = 'DJ_CARD_USER_GROUP'
        </selectKey>
    </insert>

    <update id="updateCardUserGroup" parameterType="map">
        UPDATE CAM_MNG.DJ_CARD_USER_GROUP
        SET
            GROUP_NAME = #{groupNm},
            REG_EMP_SEQ = #{regEmpSeq},
            REG_EMP_NAME = #{regEmpName},
            REG_DEPT_NAME = #{regDeptName},
            USE_YN = #{useYn},
            MOD_DT = NOW()
        WHERE
            GROUP_ID = #{groupId}
    </update>

    <insert id="saveCardUserGroupList" parameterType="map">
        INSERT INTO CAM_MNG.DJ_CARD_USER_GROUP_LIST
            (GROUP_ID, EMP_NAME, EMP_SEQ, DEPT_NAME, DEPT_SEQ, POSITION_NAME)
        VALUES
            (#{groupId}, #{empName}, #{empSeq}, #{deptName}, #{deptSeq}, #{positionName})
    </insert>

    <insert id="saveCardUserGroupSel" parameterType="map">

        INSERT INTO CAM_MNG.DJ_CARD_USER_GROUP_SEL
            (GROUP_ID, TR_CD, TR_NM, CARD_BA_NB, CLTTR_CD, JIRO_NM, BA_NB, DEPOSITOR)
        values
            (#{groupId}, #{TR_CD}, #{TR_NM}, #{CARD_BA_NB}, #{CLTTR_CD}, #{JIRO_NM}, #{BA_NB}, #{DEPOSITOR})
    </insert>

    <select id="getCardUserGroup" parameterType="map" resultType="map">
        SELECT
            DCUR.*,
            DCUGS.GROUP_ID AS chkSel
        FROM
            CAM_MNG.DJ_CARD_USER_GROUP DCUR
        LEFT JOIN
            CAM_MNG.DJ_CARD_USER_GROUP_SEL DCUGS on DCUR.GROUP_ID = DCUGS.GROUP_ID
        WHERE 1=1
        <if test='groupName != null and !"".equals(groupName)'>
        AND
            GROUP_NAME LIKE CONCAT('%', #{groupName} ,'%')
        </if>
        GROUP BY DCUR.GROUP_ID
    </select>

    <select id="getcardUserGroupList" parameterType="map" resultType="map">
        SELECT
            *
        FROM
            CAM_MNG.DJ_CARD_USER_GROUP_LIST
        WHERE
            GROUP_ID = #{groupId}
    </select>

    <delete id="delCardUserGroup" parameterType="map">
        DELETE FROM CAM_MNG.DJ_CARD_USER_GROUP WHERE GROUP_ID = #{groupId}
    </delete>

    <delete id="delCardUserGroupList" parameterType="map">
        DELETE FROM CAM_MNG.DJ_CARD_USER_GROUP_LIST WHERE GROUP_ID = #{groupId}
    </delete>

    <select id="getCardUserGroupOne" parameterType="map" resultType="map">
        SELECT
            *
        FROM
            CAM_MNG.DJ_CARD_USER_GROUP
        WHERE
            GROUP_ID = #{groupId}
    </select>

    <select id="getCardUserGroupCheck" parameterType="map" resultType="int">
        SELECT
            COUNT(*)
        FROM
            CAM_MNG.DJ_CARD_USER_GROUP
        WHERE
            GROUP_ID = #{groupId}
    </select>

    <delete id="delGroupUser" parameterType="map">
        DELETE FROM CAM_MNG.DJ_CARD_USER_GROUP_LIST WHERE GROUP_USER_ID = #{groupUserId} AND GROUP_ID = #{groupId}
    </delete>

    <delete id="delGroupUserAll" parameterType="map">
        DELETE FROM CAM_MNG.DJ_CARD_USER_GROUP_LIST WHERE GROUP_ID = #{groupId}
    </delete>

    <select id="getCardGroupCheck" parameterType="map" resultType="map">
        SELECT
            CARD_BA_NB,
            TR_CD,
            GROUP_ID
        FROM
            CAM_MNG.DJ_CARD_USER_GROUP_SEL
    </select>

    <select id="getCardGroupPrivateCheck" parameterType="map" resultType="map">
        SELECT
            DCUGS.TR_CD,
            DCUGS.CARD_BA_NB
        FROM
            CAM_MNG.DJ_CARD_USER_GROUP_SEL DCUGS
        JOIN
            CAM_MNG.DJ_CARD_USER_GROUP_LIST DCUGL
        ON DCUGL.GROUP_ID = DCUGS.GROUP_ID
        WHERE
            DCUGL.EMP_SEQ = #{empSeq}
    </select>

    <select id="getCardGroupNumCheck" parameterType="map" resultType="map">
        SELECT
            GROUP_CONCAT(CARD_BA_NB) AS CARD_BA_NB,
            GROUP_CONCAT(TR_CD) AS TR_CD
        FROM
            CAM_MNG.DJ_CARD_USER_GROUP_SEL
    </select>

    <delete id="saveCardUserGroupSelCancle" parameterType="map">
        DELETE FROM CAM_MNG.DJ_CARD_USER_GROUP_SEL WHERE GROUP_ID = #{groupId} AND CARD_BA_NB = #{CARD_BA_NB} AND TR_CD = #{TR_CD}
    </delete>

    <select id="getPrivateCardList" parameterType="map" resultType="map">
        /*getPrivateCardList*/
        SELECT
            *
        FROM
            CAM_MNG.DJ_CARD_PRIV
    </select>

    <insert id="insPrivateCard" parameterType="map">
        /*insPrivateCard*/
        INSERT INTO CAM_MNG.DJ_CARD_PRIV
            (
                CARD_BA_NB,
                CLTTR_CD,
                TR_CD,
                BA_NB,
                DEPOSITOR,
                TR_NM,
                REG_EMP_SEQ
            )
        VALUES
            (
                #{CARD_BA_NB},
                #{CLTTR_CD},
                #{TR_CD},
                #{BA_NB},
                #{DEPOSITOR},
                #{TR_NM},
                #{regEmpSeq}
            )
    </insert>

    <delete id="delPrivateCard" parameterType="map">
        /*delPrivateCard*/
        DELETE FROM CAM_MNG.DJ_CARD_PRIV WHERE TR_CD = #{TR_CD}
    </delete>

    <select id="getCardList" parameterType="map" resultType="map">
        /*getCardList*/
        SELECT
            A.CLTTR_CD,
            A.TR_CD,
            A.JIRO_NM,
            A.BA_NB,
            A.DEPOSITOR,
            A.TR_NM,
            scp.dec_b64('KEY1', A.CARD_BA_NB) AS CARD_BA_NB,
            A.CVC,
            IFNULL(B.TR_CD, 'Y') as USE_YN,
            C.USE_EMP_SEQ,
            C.USE_EMP_NAME,
            C.CARD_TO_DE,
            C.CARD_FROM_DE,
            C.RT_YN,
            C.DEL_YN,
            C.REG_EMP_SEQ,
            D.MNG_SEQ,
            D.MNG_NAME,
            D.MNG_DEPT_SEQ,
            D.MNG_DEPT_NAME,
            D.HOLDER_SEQ,
            D.HOLDER_NAME,
            D.HOLDER_DEPT_SEQ,
            D.HOLDER_DEPT_NAME,
            REPLACE((SELECT PATH_NAME FROM CAM_HR.DJ_DEPT_INFO WHERE DEPT_SEQ = (SELECT DEPT_SEQ FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = D.MNG_SEQ)), '|', ' ') AS DEPT_NAME
        FROM
            CAM_MNG.DJ_CARD_INFO A
        LEFT JOIN
            CAM_MNG.DJ_CARD_PRIV B
        ON
            A.TR_CD = B.TR_CD AND A.CARD_BA_NB = B.CARD_BA_NB
        LEFT JOIN
        (SELECT
            *
        FROM(
            SELECT
                *
            FROM CAM_MNG.DJ_CARD_TO
            WHERE (TR_CD, REG_DT) IN (
            SELECT TR_CD, MAX(REG_DT) AS DATE_TIME
            FROM CAM_MNG.DJ_CARD_TO GROUP BY TR_CD
        )
        ORDER BY REG_DT DESC
            ) T
            GROUP BY T.TR_CD) C
        ON
        A.TR_CD = C.TR_CD AND A.CARD_BA_NB = C.CARD_BA_NB
        LEFT JOIN
        CAM_MNG.DJ_CARD_MANAGER D
        ON
        A.TR_CD = D.TR_CD AND A.CARD_BA_NB = D.CARD_BA_NB
        WHERE
        1 = 1
        <if test='"M".equals(cardVal)'>
            AND
            A.TR_NM NOT LIKE '%' + '_개인카드' + '%'
        </if>
        <if test='"P".equals(cardVal)'>
            AND
            A.TR_NM LIKE '%' + '_개인카드' + '%'
        </if>
        <if test='searchValue != null and !"".equals(searchValue)'>
            AND
            (A.TR_NM LIKE CONCAT('%', #{searchValue}, '%') OR A.BA_NB LIKE CONCAT('%', #{searchValue}, '%') OR scp.dec_b64('KEY1', A.CARD_BA_NB) LIKE CONCAT('%', #{searchValue}, '%'))
        </if>
        <if test='auth == "user" or "user".equals(auth)'>
            AND
            B.TR_CD IS NULL
        </if>
        <if test='"8".equals(searchType)'>
            <choose>
                <when test='privateYn != null and !"".equals(privateYn) and "Y".equals(privateYn)'>
                    AND B.TR_CD IS NOT NULL
                </when>
                <otherwise>
                    AND (C.RT_YN = 'Y' OR C.RT_YN IS NULL)
                    <if test='adminEmpSeq != null and !"".equals(adminEmpSeq)'>
                        AND
                            CASE
                                WHEN #{adminEmpSeq} IN (SELECT EMP_SEQ FROM CAM_MNG.DJ_CARD_AUTH_USER_MNG) THEN 1=1
                                ELSE B.TR_CD IS NULL
                            END
                    </if>
                    <if test='adminEmpSeq == null and "".equals(adminEmpSeq)'>
                        AND B.TR_CD IS NULL
                    </if>
                </otherwise>
            </choose>
        </if>
        <if test='rtYn != null and !"".equals(rtYn)'>
            <choose>
                <when test='"N".equals(rtYn)'>
                    AND C.RT_YN = 'N'
                </when>
                <otherwise>
                    AND (C.RT_YN = 'Y' OR C.RT_YN IS NULL OR C.DEL_YN = 'Y')
                </otherwise>
            </choose>
        </if>
    </select>

    <select id="getUserCardList" parameterType="map" resultType="map">
        /*getUserCardList*/
        SELECT
            A.CLTTR_CD,
            A.TR_CD,
            A.JIRO_NM,
            A.BA_NB,
            A.DEPOSITOR,
            A.TR_NM,
            scp.dec_b64('KEY1', A.CARD_BA_NB) AS CARD_BA_NB,
            A.CVC,
            IFNULL(B.TR_CD, 'Y') as USE_YN,
            C.USE_EMP_SEQ,
            C.USE_EMP_NAME,
            C.CARD_TO_DE,
            C.CARD_FROM_DE,
            C.RT_YN,
            C.DEL_YN,
            C.REG_EMP_SEQ,
            D.MNG_SEQ,
            D.MNG_NAME,
            D.MNG_DEPT_SEQ,
            D.MNG_DEPT_NAME,
            D.HOLDER_SEQ,
            D.HOLDER_NAME,
            D.HOLDER_DEPT_SEQ,
            D.HOLDER_DEPT_NAME,
            REPLACE((SELECT PATH_NAME FROM CAM_HR.DJ_DEPT_INFO WHERE DEPT_SEQ = (SELECT DEPT_SEQ FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = D.MNG_SEQ)), '|', ' ') AS DEPT_NAME
        FROM
            CAM_MNG.DJ_CARD_INFO A
        LEFT JOIN
            CAM_MNG.DJ_CARD_PRIV B
        ON
            A.TR_CD = B.TR_CD AND A.CARD_BA_NB = B.CARD_BA_NB
        LEFT JOIN
        (SELECT
            *
        FROM(
            SELECT
                *
            FROM CAM_MNG.DJ_CARD_TO
            WHERE (TR_CD, REG_DT) IN (
            SELECT TR_CD, MAX(REG_DT) AS DATE_TIME
            FROM CAM_MNG.DJ_CARD_TO GROUP BY TR_CD
        )
        ORDER BY REG_DT DESC
        ) T
            GROUP BY T.TR_CD) C
        ON
            A.TR_CD = C.TR_CD AND A.CARD_BA_NB = C.CARD_BA_NB
        LEFT JOIN
            CAM_MNG.DJ_CARD_MANAGER D
        ON
            A.TR_CD = D.TR_CD AND A.CARD_BA_NB = D.CARD_BA_NB
        WHERE
            1 = 1
            AND A.TR_NM LIKE '%개인카드%'
            <if test='searchValue != null and !"".equals(searchValue)'>
                AND
                (A.TR_NM LIKE CONCAT('%', #{searchValue}, '%') OR A.BA_NB LIKE CONCAT('%', #{searchValue}, '%') OR A.CARD_BA_NB LIKE CONCAT('%', #{searchValue}, '%'))
            </if>
            <if test='auth == "user" or "user".equals(auth)'>
                AND
                B.TR_CD IS NULL
            </if>
            <if test='"8".equals(searchType)'>
                AND (C.RT_YN = 'Y' OR C.RT_YN IS NULL)
            </if>
            <if test='rtYn != null and !"".equals(rtYn)'>
                <choose>
                    <when test='"N".equals(rtYn)'>
                        AND C.RT_YN = 'N'
                    </when>
                    <otherwise>
                        AND (C.RT_YN = 'Y' OR C.RT_YN IS NULL OR C.DEL_YN = 'Y')
                    </otherwise>
                </choose>
            </if>
    </select>

    <select id="getCorpCardList" parameterType="map" resultType="map">
        /*getCorpCardList*/
        SELECT
            A.CLTTR_CD,
            A.TR_CD,
            A.JIRO_NM,
            A.BA_NB,
            A.DEPOSITOR,
            A.TR_NM,
            scp.dec_b64('KEY1', A.CARD_BA_NB) AS CARD_BA_NB,
            A.CVC,
            IFNULL(B.TR_CD, 'Y') as USE_YN,
            C.USE_EMP_SEQ,
            C.USE_EMP_NAME,
            C.CARD_TO_DE,
            C.CARD_TO_TIME,
            C.CARD_FROM_DE,
            C.CARD_FROM_TIME,
            C.RT_YN,
            C.DEL_YN,
            C.REG_EMP_SEQ,
            D.MNG_SEQ,
            D.MNG_NAME,
            D.MNG_DEPT_SEQ,
            D.MNG_DEPT_NAME,
            D.HOLDER_SEQ,
            D.HOLDER_NAME,
            D.HOLDER_DEPT_SEQ,
            D.HOLDER_DEPT_NAME,
            REPLACE((SELECT PATH_NAME FROM CAM_HR.DJ_DEPT_INFO WHERE DEPT_SEQ = (SELECT DEPT_SEQ FROM CAM_HR.DJ_EMP_INFO WHERE EMP_SEQ = D.MNG_SEQ)), '|', ' ') AS DEPT_NAME
        FROM
            CAM_MNG.DJ_CARD_INFO A
        LEFT JOIN
            CAM_MNG.DJ_CARD_PRIV B
        ON
            A.TR_CD = B.TR_CD AND scp.dec_b64('KEY1', A.CARD_BA_NB) = B.CARD_BA_NB
        LEFT JOIN
            CAM_MNG.DJ_CARD_AUTH_MNG BB
        ON
            B.CARD_BA_NB = BB.CARD_NO AND B.TR_CD = BB.TR_CD
        LEFT JOIN
            (SELECT
                *
            FROM(
                SELECT
                    *
                FROM CAM_MNG.DJ_CARD_TO
                WHERE (TR_CD, REG_DT) IN (
                    SELECT TR_CD, MAX(REG_DT) AS DATE_TIME
                    FROM CAM_MNG.DJ_CARD_TO GROUP BY TR_CD
                )
                ORDER BY REG_DT DESC
            ) T
            GROUP BY T.TR_CD) C
        ON
            A.TR_CD = C.TR_CD AND scp.dec_b64('KEY1', A.CARD_BA_NB) = C.CARD_BA_NB
        LEFT JOIN
            CAM_MNG.DJ_CARD_MANAGER D
        ON
            A.TR_CD = D.TR_CD AND scp.dec_b64('KEY1', A.CARD_BA_NB) = D.CARD_BA_NB
        WHERE
            A.TR_NM NOT LIKE '%개인카드%'
        <if test='searchValue != null and !"".equals(searchValue)'>
            AND
                (A.TR_NM LIKE CONCAT('%', #{searchValue}, '%') OR A.BA_NB LIKE CONCAT('%', #{searchValue}, '%') OR scp.dec_b64('KEY1', A.CARD_BA_NB) LIKE CONCAT('%', #{searchValue}, '%'))
        </if>
        <if test='auth == "user" or "user".equals(auth)'>
            <if test='adminEmpSeq != null and !"".equals(adminEmpSeq)'>
                AND
                    CASE
                        WHEN #{adminEmpSeq} IN (SELECT EMP_SEQ FROM CAM_MNG.DJ_CARD_AUTH_USER_MNG) THEN (B.TR_CD IS NULL OR BB.TR_CD IS NOT NULL)
                        ELSE (B.TR_CD IS NULL)
                    END
            </if>
            <if test='adminEmpSeq == null and "".equals(adminEmpSeq)'>
                AND B.TR_CD IS NULL
            </if>
        </if>
        <if test='"8".equals(searchType)'>
            AND (C.RT_YN = 'Y' OR C.DEL_YN = 'Y' OR C.RT_YN IS NULL)
        </if>
        <if test='rtYn != null and !"".equals(rtYn)'>
            <choose>
                <when test='"N".equals(rtYn)'>
                    AND C.RT_YN = 'N'
                </when>
                <otherwise>
                    AND (C.RT_YN = 'Y' OR C.DEL_YN = 'Y' OR C.RT_YN IS NULL)
                </otherwise>
            </choose>
        </if>
    </select>

    <select id="getCardManagerData" parameterType="map" resultType="map">
        /*getCardManagerData*/
        SELECT
            *
        FROM
            CAM_MNG.DJ_CARD_MANAGER
        WHERE
            CARD_BA_NB = #{CARD_BA_NB}
        AND
            TR_CD = #{TR_CD}
    </select>

    <insert id="insCardManager" parameterType="map">
        /*insCardManager*/
        INSERT INTO CAM_MNG.DJ_CARD_MANAGER
            (
                CARD_BA_NB,
                TR_CD,
                MNG_SEQ,
                MNG_NAME,
                MNG_DEPT_SEQ,
                MNG_DEPT_NAME
            )
        VALUES
            (
                #{CARD_BA_NB},
                #{TR_CD},
                #{MNG_SEQ},
                #{MNG_NAME},
                #{MNG_DEPT_SEQ},
                #{MNG_DEPT_NAME}
            )
    </insert>

    <update id="updCardManager" parameterType="map">
        /*updCardManager*/
        UPDATE CAM_MNG.DJ_CARD_MANAGER
        SET
            MNG_SEQ = #{MNG_SEQ},
            MNG_NAME = #{MNG_NAME},
            MNG_DEPT_SEQ = #{MNG_DEPT_SEQ},
            MNG_DEPT_NAME = #{MNG_DEPT_NAME}
        WHERE
            CARD_BA_NB = #{CARD_BA_NB}
        AND
            TR_CD = #{TR_CD}
    </update>

    <select id="getCardHolderData" parameterType="map" resultType="map">
        /*getCardHolderData*/
        SELECT
            *
        FROM
            CAM_MNG.DJ_CARD_MANAGER
        WHERE
            CARD_BA_NB = #{CARD_BA_NB}
          AND
            TR_CD = #{TR_CD}
    </select>

    <insert id="insCardHolder" parameterType="map">
        /*insCardHolder*/
        INSERT INTO CAM_MNG.DJ_CARD_MANAGER
        (
            CARD_BA_NB,
            TR_CD,
            HOLDER_SEQ,
            HOLDER_NAME,
            HOLDER_DEPT_SEQ,
            HOLDER_DEPT_NAME
        )
        VALUES
            (
                #{CARD_BA_NB},
                #{TR_CD},
                #{HOLDER_SEQ},
                #{HOLDER_NAME},
                #{HOLDER_DEPT_SEQ},
                #{HOLDER_DEPT_NAME}
            )
    </insert>

    <update id="updCardHolder" parameterType="map">
        /*updCardHolder*/
        UPDATE CAM_MNG.DJ_CARD_MANAGER
        SET
            HOLDER_SEQ = #{HOLDER_SEQ},
            HOLDER_NAME = #{HOLDER_NAME},
            HOLDER_DEPT_SEQ = #{HOLDER_DEPT_SEQ},
            HOLDER_DEPT_NAME = #{HOLDER_DEPT_NAME}
        WHERE
            CARD_BA_NB = #{CARD_BA_NB}
          AND
            TR_CD = #{TR_CD}
    </update>

    <select id="getCardAuthList" parameterType="map" resultType="map">
        /*getCardAuthList*/
        SELECT
            *
        FROM
            CAM_MNG.DJ_CARD_AUTH_MNG
        WHERE 1=1
        <if test='cardNo != null and cardNo != ""'>
            AND REPLACE(CARD_NO, '-', '') = REPLACE(#{cardNo}, '-', '')
        </if>
    </select>

    <select id="getCardAuthUserList" parameterType="map" resultType="map">
        /*getCardAuthUserList*/
        SELECT
            *
        FROM
            CAM_MNG.DJ_CARD_AUTH_USER_MNG
        WHERE 1=1
        <if test='empSeq != null and empSeq != ""'>
            AND EMP_SEQ = #{empSeq}
        </if>
    </select>

    <insert id="setCardAuthData" parameterType="map">
        /*setCardAuthData*/
        INSERT INTO CAM_MNG.DJ_CARD_AUTH_MNG
        (
            TR_CD,
            CARD_NO,
            TR_NM
        )
        VALUES
        (
            #{trCd},
            #{cardNo},
            #{trNm}
        )
    </insert>

    <delete id="delCardAuthData" parameterType="map">
        /*delCardAuthData*/
        DELETE FROM CAM_MNG.DJ_CARD_AUTH_MNG WHERE CARD_AUTH_SN IN (${cardAuthSn})
    </delete>

    <insert id="setCardAuthUserData" parameterType="map">
        /*setCardAuthUserData*/
        INSERT INTO CAM_MNG.DJ_CARD_AUTH_USER_MNG
        (
            EMP_SEQ,
            EMP_NAME
        )
        VALUES
        (
            #{empSeq},
            #{empName}
        )
    </insert>

    <delete id="delCardAuthUserData" parameterType="map">
        /*delCardAuthUserData*/
        DELETE FROM CAM_MNG.DJ_CARD_AUTH_USER_MNG WHERE CARD_AUTH_USER_SN IN (${cardAuthUserSn})
    </delete>

    <insert id="insMeetingData" parameterType="map">
        /*insMeetingData*/
        INSERT INTO CAM_MNG.DJ_MEETING
            (
                CARD_TO_SN,
                PJT_NM,
                PJT_SN,
                PJT_CD,
                PM_EMP_SEQ,
                PM,
                PJT_SUB_NM,
                MET_DE,
                MET_STR_TIME,
                MET_END_TIME,
                MET_LOC,
                MET_OBJ,
                MET_CONT,
                MET_EMP_NAME,
                MET_EMP_SEQ
            )
        VALUES
            (
                #{cardToSn},
                #{pjtNm},
                #{pjtSn},
                #{pjtCd},
                #{pmEmpSeq},
                #{pm},
                #{pjtSubNm},
                #{metDe},
                #{metStrTime},
                #{metEndTime},
                #{metLoc},
                #{metObj},
                #{metCont},
                #{metEmpName},
                #{metEmpSeq}
            )
        <selectKey keyProperty="metSn" resultType="Integer" order="BEFORE">
            SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'CAM_MNG' AND TABLE_NAME = 'DJ_MEETING'
        </selectKey>
    </insert>

    <update id="updMeetingData" parameterType="map">
        /*updMeetingData*/
        UPDATE CAM_MNG.DJ_MEETING
        SET
            MET_DE = #{metDe},
            MET_STR_TIME = #{metStrTime},
            MET_END_TIME = #{metEndTime},
            MET_LOC = #{metLoc},
            MET_OBJ = #{metObj},
            MET_CONT = #{metCont},
            MET_EMP_NAME = #{metEmpName},
            MET_EMP_SEQ = #{metEmpSeq}
        WHERE
            MET_SN = #{metSn}
    </update>

    <insert id="insMeetingExternal" parameterType="map">
        /*insMeetingExternal*/
        INSERT INTO CAM_MNG.DJ_MEETING_EXT
            (
                MET_SN,
                EXT_NM,
                EXT_BELONG,
                EXT_SPOT,
                EXT_ETC
            )
        VALUES
            (
                #{metSn},
                #{name},
                #{belong},
                #{spot},
                #{etc}
            )
    </insert>

    <update id="updCardToByFrKey" parameterType="map">
        /*updCardToByFrKey*/
        UPDATE CAM_MNG.DJ_CARD_TO
        SET
            FR_KEY = #{frKey}
        WHERE
            CARD_TO_SN = #{cardToSn}
    </update>

    <select id="getMeetingList" parameterType="map" resultType="map">
        /*getMeetingList*/
        SELECT
            *
        FROM
            CAM_MNG.DJ_MEETING
        WHERE
            LEFT(PJT_CD, 9) = LEFT((SELECT PJT_CD FROM CAM_PJT_MNG.DJ_PROJECT WHERE PJT_SN = #{pjtSn}), 9)
    </select>

    <select id="getMeetingData" parameterType="map" resultType="map">
        /*getMeetingData*/
        SELECT
            *
        FROM
            CAM_MNG.DJ_MEETING
        WHERE
            MET_SN = #{metSn}
    </select>

    <select id="getExtData" parameterType="map" resultType="map">
        /*getExtData*/
        SELECT
            *
        FROM
            CAM_MNG.DJ_MEETING_EXT
        WHERE
            MET_SN = #{metSn}
    </select>

    <update id="updateMeetingApprStat" parameterType="map">
        /* updateMeetingApprStat */
        UPDATE CAM_MNG.DJ_MEETING
        SET
            STATUS = #{approveStatCode},
            DOC_ID = #{docId}
        WHERE
            MET_SN = #{metSn}
    </update>

    <update id="updateMeetingFinalApprStat" parameterType="map">
        /* updateMeetingFinalApprStat */
        UPDATE CAM_MNG.DJ_MEETING
        SET
            STATUS = #{approveStatCode},
            APPROVAL_DATE = DATE_FORMAT(NOW(), '%Y-%m-%d'),
            APPROVAL_EMP_SEQ = #{empSeq}
        WHERE
            MET_SN = #{metSn}
    </update>

    <select id="getCardInfo" parameterType="map" resultType="map">
        /*getCardInfo*/
        SELECT * FROM CAM_MNG.DJ_CARD_INFO WHERE REPLACE(scp.dec_b64('KEY1', CARD_BA_NB), '-', '') = REPLACE(#{cardNo}, '-', '')
    </select>
</mapper>
