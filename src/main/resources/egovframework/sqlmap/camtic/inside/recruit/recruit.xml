<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="recruit">

    <select id="getRecruitNum" resultType="map">
        /* getRecruitNum */
        SELECT CONCAT('제', DATE_FORMAT(NOW(), '%Y'), '-', LPAD((SELECT IFNULL(max(siri.RECRUIT_SN), 0)+1 FROM cam_inside.dj_recruit_info siri), '2', '0'), '호') AS RECRUIT_NUM FROM DUAL
    </select>

    <select id="getRecruitList" parameterType="map" resultType="map">
        /* getRecruitList */
        SELECT
        IRI.*,
        AAA.USER_NAME,
        GROUP_CONCAT(DISTINCT AI.JOB) as JOB_TYPE,
        GROUP_CONCAT(DISTINCT AI.CAREER_TYPE) AS CAREER_TYPE,
        (SELECT SUM(SAI.RECRUITMENT) FROM CAM_INSIDE.DJ_RECRUIT_AREA_INFO SAI WHERE SAI.RECRUIT_INFO_SN = IRI.RECRUIT_INFO_SN) AS RECRUITMENT,
        (SELECT COUNT(*) FROM CAM_INSIDE.DJ_APPLICATION_MAIN WHERE RECRUIT_INFO_SN = IRI.RECRUIT_INFO_SN AND SAVE_TYPE = 'S') as APPLICATION_CNT,
        (SELECT COUNT(*) FROM CAM_INSIDE.DJ_APPLICATION_MAIN AM WHERE AM.RECRUIT_INFO_SN = IRI.RECRUIT_INFO_SN AND AM.SAVE_TYPE = 'S' AND AM.APPLICATION_STAT != 'S') AS DOC_SCREEN_CNT,
        (
        SELECT
        COUNT(*)
        FROM (
        SELECT
        SB.*,
        AM.RECRUIT_INFO_SN
        FROM
        CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD SB
        JOIN
        CAM_INSIDE.DJ_APPLICATION_MAIN AM
        ON SB.APPLICATION_ID = AM.APPLICATION_ID
        WHERE
        SB.EVAL_SCREEN_TYPE = 'doc'
        GROUP BY
        SB.APPLICATION_ID
        )A
        WHERE
        IRI.RECRUIT_INFO_SN = A.RECRUIT_INFO_SN
        ) AS DOC_SCREEN_RESULT,
        (SELECT COUNT(*) FROM CAM_INSIDE.DJ_APPLICATION_MAIN AM WHERE AM.RECRUIT_INFO_SN = IRI.RECRUIT_INFO_SN AND AM.SAVE_TYPE = 'S' AND AM.APPLICATION_STAT = 'I' AND AM.IN_AVOID = 'N') AS IN_SCREEN_CNT,
        (
        SELECT
        COUNT(*)
        FROM (
        SELECT
        SB.*,
        AM.RECRUIT_INFO_SN,
        AM.USER_NAME
        FROM
        CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD SB
        JOIN
        CAM_INSIDE.DJ_APPLICATION_MAIN AM
        ON SB.APPLICATION_ID = AM.APPLICATION_ID
        WHERE
        SB.EVAL_SCREEN_TYPE = 'in' AND AM.SAVE_TYPE = 'S' AND AM.APPLICATION_STAT = 'I' AND AM.IN_AVOID = 'N'
        GROUP BY
        SB.APPLICATION_ID
        )A
        WHERE
        IRI.RECRUIT_INFO_SN = A.RECRUIT_INFO_SN
        ) AS IN_SCREEN_RESULT
        FROM
        CAM_INSIDE.DJ_RECRUIT_INFO IRI
        JOIN
        CAM_INSIDE.DJ_RECRUIT_AREA_INFO AI
        ON IRI.RECRUIT_INFO_SN = AI.RECRUIT_INFO_SN
        LEFT JOIN CAM_INSIDE.DJ_APPLICATION_MAIN AAA
        ON IRI.RECRUIT_INFO_SN = AAA.RECRUIT_INFO_SN
        <if test='page != null and !"".equals(page)'>
            <choose>
                <when test='"eval".equals(page)'>
                    JOIN
                        CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN EL
                    ON EL.RECRUIT_INFO_SN = IRI.RECRUIT_INFO_SN AND AI.RECRUIT_AREA_INFO_SN = EL.RECRUIT_AREA_INFO_SN AND EMP_SEQ = #{empSeq}
                </when>
            </choose>
        </if>
        WHERE
            1=1
        <if test='recruitYear != null and !"".equals(recruitYear)'>
            AND YEAR(IRI.UPLOAD_DT) = YEAR(STR_TO_DATE(#{recruitYear}, '%Y'))
        </if>
        <choose>
            <when test='searchVal != null and !"".equals(searchVal) and "3".equals(searchType)'>
                AND IRI.RECRUIT_NUM LIKE CONCAT('%', #{searchVal}, '%')
            </when>
            <when test='searchVal != null and !"".equals(searchVal) and "2".equals(searchType)'>
                AND IRI.RECRUIT_TITLE like CONCAT('%', #{searchVal}, '%')
            </when>
            <when test='searchVal != null and !"".equals(searchVal) and "1".equals(searchType)'>
                AND IRI.JOB_POSITION_ETC like CONCAT('%', #{searchVal}, '%')
            </when>
            <when test='searchVal != null and !"".equals(searchVal) and "4".equals(searchType)'>
                AND AAA.USER_NAME like CONCAT('%', #{searchVal}, '%')
            </when>
            <!-- 추가된 조건: "전체"를 선택한 경우 -->
            <otherwise>
                    AND (IRI.RECRUIT_NUM LIKE CONCAT('%', #{searchVal}, '%')
                    OR IRI.RECRUIT_TITLE LIKE CONCAT('%', #{searchVal}, '%')
                    OR IRI.JOB_POSITION_ETC LIKE CONCAT('%', #{searchVal}, '%')
                    OR AAA.USER_NAME LIKE CONCAT('%', #{searchVal}, '%'))
            </otherwise>
        </choose>
        AND
            IRI.ACTIVE = 'Y'
        <if test='page != null and !"".equals(page) and "tl".equals(page)'>
           AND (AI.TEAM_SEQ = #{deptSeq} OR AI.DEPT_SEQ = #{deptSeq})
        </if>
        GROUP BY IRI.RECRUIT_INFO_SN
        ORDER BY IRI.REG_DT DESC
    </select>

    <select id="getRecruit" parameterType="map" resultType="map">
        /* getRecruit */
        SELECT
            COUNT(APP.RECRUIT_INFO_SN) AS applicationCount,
            RI.*,
            RES.RECRUIT_EVAL_SHEET_ID,
            RES.INTERVIEW_EVAL_SHEET
        FROM
            CAM_INSIDE.DJ_RECRUIT_INFO RI
        LEFT JOIN
            CAM_INSIDE.DJ_APPLICATION_MAIN APP
        ON APP.RECRUIT_INFO_SN = RI.RECRUIT_INFO_SN AND APP.SAVE_TYPE = 'S'
        LEFT JOIN
            CAM_INSIDE.DJ_RECRUIT_EVAL_SHEET RES
        ON RES.RECRUIT_INFO_SN = RI.RECRUIT_INFO_SN
        WHERE
            RI.RECRUIT_INFO_SN = #{recruitInfoSn}
    </select>

    <select id="getCommissionerListCustom" parameterType="map" resultType="map">
        /*getCommissionerListCustom*/
        SELECT
            A.*,
            B.*,
            (SELECT CM_CODE_NM FROM CAM_COMMON.dj_com_code WHERE CM_GROUP_CODE_ID = '3' AND CM_CODE = B.DUTY_CODE) AS DUTY_NAME
        FROM
            CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN A
        LEFT JOIN
            CAM_HR.DJ_EMP_INFO B
        ON
            A.EMP_SEQ = B.EMP_SEQ
        WHERE 1=1
        AND
            A.RECRUIT_INFO_SN = #{recruitInfoSn}
        AND
            A.EVAL_TYPE = #{evalType}
        AND
            A.RECRUIT_AREA_INFO_SN = #{recruitAreaInfoSn}
    </select>

    <select id="getCommissionerList" parameterType="map" resultType="map">
        /*getCommissionerList*/
        SELECT
            EI.*,
            DI.PARENT_DEPT_SEQ,
            (SELECT B.CM_CODE_NM FROM CAM_COMMON.dj_com_code B WHERE B.CM_GROUP_CODE_ID = '3' AND B.CM_CODE = EI.DUTY_CODE) AS DUTY_NAME
            <if test='recruitInfoSn != null and !"".equals(recruitInfoSn)'>
            ,(
                SELECT
                    COUNT(*)
                FROM
                    CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN
                WHERE
                    EMP_SEQ = EI.EMP_SEQ
                AND
                    RECRUIT_INFO_SN = #{recruitInfoSn}
                AND
                    RECRUIT_AREA_INFO_SN = #{recruitAreaInfoSn}
                <if test='evalType != null and !"".equals(evalType)'>
                AND
                    EVAL_TYPE = #{evalType}
                </if>
            ) AS CHK
            </if>
        FROM
            CAM_HR.DJ_EMP_INFO EI
        LEFT JOIN CAM_HR.DJ_DEPT_INFO DI ON EI.DEPT_SEQ = DI.DEPT_SEQ
        WHERE
            1=1
        AND
            EI.TEMP_DIVISION = #{tempDivision}
        AND
            EI.ACTIVE = 'Y'
        <if test='dutyCode != null and !"".equals(dutyCode)'>
            AND EI.DUTY_CODE IN(${dutyCode})
        </if>
        <if test='loginId != null and !"".equals(loginId)'>
            AND EI.LOGIN_ID LIKE CONCAT('%', #{loginId}, '%')
        </if>
        <if test='empNameKr != null and !"".equals(empNameKr)'>
            AND EI.EMP_NAME_KR LIKE CONCAT('%', #{empNameKr}, '%')
        </if>
        <if test='deptName != null and !"".equals(deptName)'>
            AND EI.DEPT_NAME LIKE CONCAT('%', #{deptName}, '%')
        </if>

        <if test='searchKeyWord != null and !"".equals(searchKeyWord)'>
            <choose>
                <when test='!"all".equals(searchKeyWord)'>
                    AND ${searchKeyWord} LIKE CONCAT('%', #{searchContent}, '%')
                </when>
                <otherwise>
                    AND (
                        EI.LOGIN_ID LIKE CONCAT('%', #{searchContent}, '%') OR
                        EI.EMP_NAME_KR LIKE CONCAT('%', #{searchContent}, '%') OR
                        EI.DEPT_NAME LIKE CONCAT('%', #{searchContent}, '%')
                    )
                </otherwise>
            </choose>
        </if>

        ORDER BY EI.REG_DATE DESC
    </select>

    <delete id="setCommissionerEmpInfoDel" parameterType="map">
        /* setCommissionerEmpInfoDel */
        UPDATE
            CAM_HR.DJ_EMP_INFO
        SET
            TEMP_DIVISION = 'ED',
            MOD_EMP_SEQ = #{empSeq},
            MOD_DATE = NOW()
        WHERE
            EMP_SEQ IN (${evalEmpSeq})
    </delete>

    <select id="getEvalHistoryList" parameterType="map" resultType="map">
        /* getEvalHistoryList */
        SELECT
            EL.EMP_SEQ,
            EL.EMP_NAME_KR,
            RI.RECRUIT_TITLE,
            CONCAT('근무부서 - [', RAI.DEPT_NAME, ' > ', RAI.TEAM_NAME, '] 채용부문 - [', RAI.JOB, '] 필요경력 - [', RAI.CAREER, ']') AS AREA_TITLE,
            AM.APPLICATION_ID,
            AM.USER_NAME,
            (
                SELECT
                    TRUNCATE(SUM(A.EVAL_ITEM_SCORE)/COUNT(DISTINCT A.EVAL_LOGIN_ID), 1)
                FROM
                    CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD A
                WHERE
                    APPLICATION_ID = AM.APPLICATION_ID
                AND
                    A.EVAL_LOGIN_ID = EL.EVAL_LOGIN_ID
                AND
                    EL.EVAL_STATUS = 'E'
                AND
                    EVAL_ITEM_ID != 'opinion'
                AND
                    EVAL_SCREEN_TYPE = 'in'
                GROUP BY APPLICATION_ID
            ) AS IN_SCREEN_AVERAGE
        FROM
            CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN EL
        JOIN
            CAM_INSIDE.DJ_RECRUIT_INFO RI
        ON RI.RECRUIT_INFO_SN = EL.RECRUIT_INFO_SN
        JOIN
            CAM_INSIDE.DJ_RECRUIT_AREA_INFO RAI
        ON RI.RECRUIT_INFO_SN = RAI.RECRUIT_INFO_SN
        JOIN
            CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD SB
        ON EL.EVAL_LOGIN_ID = SB.EVAL_LOGIN_ID
        JOIN
            CAM_INSIDE.DJ_APPLICATION_MAIN AM
        ON SB.APPLICATION_ID = AM.APPLICATION_ID
        WHERE
            EL.EVAL_TYPE = 'in'
        AND
            EL.EMP_SEQ = #{empSeq}
        GROUP BY AM.APPLICATION_ID
    </select>

    <insert id="setRecruitInsert" parameterType="map" useGeneratedKeys="true" keyProperty="recruitInfoSn">
        /* setRecruitInsert */
        INSERT INTO CAM_INSIDE.DJ_RECRUIT_INFO
            (
                RECRUIT_NUM,
                RECRUIT_TITLE,
                RECRUIT_DETAIL,
                UPLOAD_DT,
                UPLOAD_TEXT,
                START_DT,
                END_DT,
                JOB_POSITION_ETC,
                ELIGIBILITY_ETC,
                WORK_TYPE,
                ADMISSION,
                APPLICATION_DOC,
                RECEIPT_DOCU,
                REMARK,
                RECRUIT_STATUS_SN,
                RECRUIT_STATUS_TEXT,
                REG_EMP_SEQ,
                REG_EMP_NAME
            )
        VALUE
            (
                #{recruitNum},
                #{recruitTitle},
                #{recruitDetail},
                #{uploadDt},
                #{uploadText},
                #{startDt},
                #{endDt},
                #{jobPositionEtc},
                #{eligibilityEtc},
                #{workType},
                #{admission},
                #{applicationDoc},
                #{receiptDocu},
                #{remark},
                #{recruitStatusSn},
                #{recruitStatusText},
                #{regEmpSeq},
                #{regEmpName}
            )
        <selectKey keyProperty="recruitInfoSn" resultType="Integer" order="BEFORE">
            SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'CAM_INSIDE' AND TABLE_NAME = 'DJ_RECRUIT_INFO'
        </selectKey>
    </insert>

    <update id="setRecruitUpdate" parameterType="map">
        /* setRecruitUpdate */
        UPDATE
            CAM_INSIDE.DJ_RECRUIT_INFO
        SET
            RECRUIT_TITLE = #{recruitTitle},
            RECRUIT_DETAIL = #{recruitDetail},
            UPLOAD_DT = #{uploadDt},
            UPLOAD_TEXT = #{uploadText},
            START_DT = #{startDt},
            END_DT = #{endDt},
            JOB_POSITION_ETC = #{jobPositionEtc},
            ELIGIBILITY_ETC = #{eligibilityEtc},
            WORK_TYPE = #{workType},
            ADMISSION = #{admission},
            APPLICATION_DOC = #{applicationDoc},
            RECEIPT_DOCU = #{receiptDocu},
            REMARK = #{remark},
            RECRUIT_STATUS_SN = #{recruitStatusSn},
            RECRUIT_STATUS_TEXT = #{recruitStatusText},
            MOD_EMP_SEQ = #{regEmpSeq},
            MOD_DATE = NOW()
        WHERE
            RECRUIT_INFO_SN = #{recruitInfoSn}
    </update>

    <update id="setRecruitDel" parameterType="map">
        /* setRecruitDel */
        UPDATE
            CAM_INSIDE.DJ_RECRUIT_INFO
        SET
            ACTIVE = 'N',
            MOD_EMP_SEQ = #{regEmpSeq},
            MOD_DATE = NOW()
        WHERE
            RECRUIT_INFO_SN IN (${recruitInfoSn})
    </update>

    <delete id="setRecruitAreaDelete" parameterType="map">
        /* setRecruitAreaDelete */
        DELETE FROM CAM_INSIDE.DJ_RECRUIT_AREA_INFO WHERE RECRUIT_INFO_SN = #{recruitInfoSn}
    </delete>

    <insert id="setRecruitAreaInsert" parameterType="map">
        /* setRecruitAreaInsert */
        INSERT INTO CAM_INSIDE.DJ_RECRUIT_AREA_INFO
            (
                RECRUIT_INFO_SN,
                DEPT_SEQ,
                DEPT_NAME,
                TEAM_SEQ,
                TEAM_NAME,
                JOB,
                RECRUITMENT,
                CAREER_TYPE,
                DUTY,
                CAREER,
                WORK_TYPE,
                QUALIFICATION
            )
        VALUES
        <foreach collection="area" item="item" separator=" , ">
            (
                #{recruitInfoSn},
                #{item.deptSeq},
                #{item.deptName},
                #{item.teamSeq},
                #{item.teamName},
                #{item.job},
                #{item.recruitment},
                #{item.careerType},
                #{item.duty},
                #{item.career},
                #{item.workType},
                #{item.qualification}
            )
        </foreach>
    </insert>

    <update id="setRecruitStatusUpd" parameterType="map">
        /* setRecruitStatusUpd */
        UPDATE
            CAM_INSIDE.DJ_RECRUIT_INFO
        SET
            RECRUIT_STATUS_SN = #{recruitStatusSn},
            RECRUIT_STATUS_TEXT = #{recruitStatusText}
        WHERE
            RECRUIT_INFO_SN = #{recruitInfoSn}
    </update>

    <select id="getRecruitAreaList" parameterType="map" resultType="map">
        /* getRecruitAreaList */
        SELECT
            RAI.*,
            CONCAT('근무부서 - [', RAI.DEPT_NAME, ' > ', RAI.TEAM_NAME, '] 채용부문 - [', RAI.JOB, '] 필요경력 - [', RAI.CAREER, ']') AS AREA_TITLE,
            (SELECT COUNT(*) FROM CAM_INSIDE.DJ_APPLICATION_MAIN WHERE RECRUIT_AREA_INFO_SN = RAI.RECRUIT_AREA_INFO_SN AND SAVE_TYPE = 'S') as APPLICATION_CNT,
            (SELECT COUNT(*) FROM CAM_INSIDE.DJ_APPLICATION_MAIN AM WHERE AM.RECRUIT_AREA_INFO_SN = RAI.RECRUIT_AREA_INFO_SN AND AM.SAVE_TYPE = 'S' AND AM.APPLICATION_STAT != 'S') AS DOC_SCREEN_CNT,
            (SELECT COUNT(*) FROM CAM_INSIDE.DJ_APPLICATION_MAIN AM WHERE AM.RECRUIT_AREA_INFO_SN = RAI.RECRUIT_AREA_INFO_SN AND AM.SAVE_TYPE = 'S' AND AM.APPLICATION_STAT = 'I' AND AM.IN_AVOID = 'N') AS IN_SCREEN_CNT
        FROM
            CAM_INSIDE.DJ_RECRUIT_AREA_INFO RAI
        <if test='evalEmpSeq != null and !"".equals(evalEmpSeq)'>
        JOIN
            CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN EL
        ON EL.RECRUIT_AREA_INFO_SN = RAI.RECRUIT_AREA_INFO_SN AND EL.RECRUIT_INFO_SN = #{recruitInfoSn} AND EMP_SEQ = #{evalEmpSeq}
        </if>
        WHERE 1=1
        <choose>
            <when test='RECRUIT_INFO_SN != null and !"".equals(RECRUIT_INFO_SN)'>
                AND RAI.RECRUIT_INFO_SN = #{RECRUIT_INFO_SN}
            </when>
            <when test='recruitInfoSn != null and !"".equals(recruitInfoSn)'>
                AND RAI.RECRUIT_INFO_SN = #{recruitInfoSn}
            </when>
        </choose>

        GROUP BY RAI.RECRUIT_AREA_INFO_SN
        ORDER BY RAI.REG_DT DESC
    </select>

    <select id="getRecruitArea" parameterType="map" resultType="map">
        /* getRecruitArea */
        SELECT
            *
        FROM
            CAM_INSIDE.DJ_RECRUIT_AREA_INFO
        WHERE 1=1
            AND RECRUIT_AREA_INFO_SN = #{recruitAreaInfoSn}
    </select>

    <select id="getApplicationList" parameterType="map" resultType="map">
        /* getApplicationList */
        SELECT
            AM.APPLICATION_ID,
            AM.USER_EMAIL,
            AM.RECRUIT_INFO_SN,
            AM.RECRUIT_AREA_INFO_SN,
            AM.CAREER_TYPE,
            AM.USER_NAME,
            YEAR(NOW())-LEFT(AM.BDAY ,4) +1 AS AGE,
            CASE WHEN AM.GENDER = 'M' THEN '남자'
                ELSE '여자'
            END AS GENDER,
            DAS.SCHOOL_NAME,
            SUM(TIMESTAMPDIFF(MONTH, WORK_ST_DT, DATE_ADD(DATE_FORMAT(WORK_EN_DT, '%Y%m%d'), INTERVAL 1 MONTH))) AS WORK_DATE,
            REPLACE(SUBSTRING_INDEX(REPLACE(AM.ADDR, ' ', '_'), '_', 2), '_', ' ') AS ADDR,
            GROUP_CONCAT(LA.LANG_NAME SEPARATOR ', ') AS LANG_NAME,
            AI.JOB,
            CASE WHEN INSTR(DATE_FORMAT(AM.SAVE_DATE, '%Y-%m-%d %p %h:%i'), 'PM') > 0 THEN REPLACE(DATE_FORMAT(AM.SAVE_DATE, '%Y-%m-%d %p %h:%i'), 'PM', '오후')
                 ELSE REPLACE(DATE_FORMAT(AM.SAVE_DATE, '%Y-%m-%d %p %h:%i'), 'AM', '오전')
            END AS SAVE_DATE,
            (SELECT COUNT(*) FROM CAM_INSIDE.DJ_APPLICATION_MAIN WHERE SAVE_TYPE = 'S' AND AM.RECRUIT_INFO_SN != RECRUIT_INFO_SN AND AM.APPLICATION_ID != APPLICATION_ID AND AM.USER_EMAIL = USER_EMAIL) AS DUPLICATION_CNT,
            (
                SELECT
                    TRUNCATE(SUM(A.EVAL_ITEM_SCORE)/COUNT(DISTINCT A.EVAL_LOGIN_ID), 1)
                FROM
                    CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD A
                JOIN
                    CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN B
                ON A.EVAL_LOGIN_ID = B.EVAL_LOGIN_ID AND B.EVAL_STATUS = 'E'
                WHERE
                    APPLICATION_ID = AM.APPLICATION_ID
                AND
                    EVAL_ITEM_ID != 'otherRmk'
                AND
                    EVAL_SCREEN_TYPE = 'doc'
                GROUP BY APPLICATION_ID
            ) AS DOC_SCREEN_AVERAGE,
            (
                SELECT
                    TRUNCATE(SUM(A.EVAL_ITEM_SCORE)/COUNT(DISTINCT A.EVAL_LOGIN_ID), 1)
                FROM
                    CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD A
                LEFT JOIN
                    CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN B
                ON A.EVAL_LOGIN_ID = B.EVAL_LOGIN_ID AND B.EVAL_STATUS = 'E'
                WHERE
                    APPLICATION_ID = AM.APPLICATION_ID
                AND
                    EVAL_ITEM_ID != 'opinion'
                AND
                    EVAL_SCREEN_TYPE = 'in'
                GROUP BY APPLICATION_ID
            ) AS IN_SCREEN_AVERAGE,
            AM.IN_AVOID,
            CASE WHEN AM.IN_AVOID = 'Y' THEN '불참'
                ELSE ''
            END IN_AVOID_TXT,
            AM.PRELIMINARY_PASS,
            AM.APPLICATION_STAT
        FROM
            CAM_INSIDE.DJ_APPLICATION_MAIN AM
        JOIN (
            SELECT
                DAS.APPLICATION_ID,
                MAX(SCHOOL_TYPE) AS SCHOOL_TYPE,
                CONCAT(
                    (SELECT CONCAT(SCHOOL_NAME, ' ', DEPT) FROM CAM_INSIDE.DJ_APPLICATION_SCHOOL WHERE APPLICATION_ID = DAS.APPLICATION_ID ORDER BY SCHOOL_TYPE DESC LIMIT 1),
                    '(',
                    CASE WHEN MAX(SCHOOL_TYPE) = '1' THEN '고등학교'
                        WHEN MAX(SCHOOL_TYPE) = '2' THEN '전문학사'
                        WHEN MAX(SCHOOL_TYPE) = '3' OR MAX(SCHOOL_TYPE) = '4' THEN '학사'
                        WHEN MAX(SCHOOL_TYPE) = '5' THEN '석사'
                        WHEN MAX(SCHOOL_TYPE) = '6' THEN '박사'
                    END,
                    CASE WHEN GRADUATE_TYPE = '1' THEN ''
                        WHEN GRADUATE_TYPE = '2' THEN ' 졸업예정'
                        WHEN GRADUATE_TYPE = '3' THEN ' 수료'
                    END,
                    ')'
                ) AS SCHOOL_NAME
            FROM
                CAM_INSIDE.DJ_APPLICATION_SCHOOL DAS
            GROUP BY DAS.APPLICATION_ID
        )DAS
        ON AM.APPLICATION_ID = DAS.APPLICATION_ID
        LEFT JOIN
            CAM_INSIDE.DJ_APPLICATION_LANG_ABILITY LA
        ON AM.APPLICATION_ID = LA.APPLICATION_ID
        LEFT JOIN
            CAM_INSIDE.DJ_APPLICATION_CAREER AC
        ON AM.APPLICATION_ID = AC.APPLICATION_ID
        JOIN
            CAM_INSIDE.DJ_RECRUIT_AREA_INFO AI
        ON AM.RECRUIT_AREA_INFO_SN = AI.RECRUIT_AREA_INFO_SN
        WHERE
            AM.RECRUIT_INFO_SN = #{recruitInfoSn}
        AND
            AM.SAVE_TYPE = 'S'
        <if test='searchType != null and !"".equals(searchType)'>
        AND
            AM.APPLICATION_STAT = #{searchType}
        </if>
        <if test='recruitAreaInfoSn != null and !"".equals(recruitAreaInfoSn)'>
        AND
            AM.RECRUIT_AREA_INFO_SN = #{recruitAreaInfoSn}
        </if>

        <if test='docScreenType != null and !"".equals(docScreenType)'>
            <choose>
                <when test='"D".equals(docScreenType)'>
                    AND
                        (
                            AM.APPLICATION_STAT = #{docScreenType} OR
                            AM.APPLICATION_STAT = 'I' OR
                            AM.APPLICATION_STAT = 'IF'
                        )
                </when>
                <when test='"DF".equals(docScreenType)'>
                    AND AM.APPLICATION_STAT = #{docScreenType}
                </when>
            </choose>
        </if>

        <if test='interViewType != null and !"".equals(interViewType)'>
            <choose>
                <when test='"preliminaryPass".equals(interViewType)'>
                    AND
                        AM.PRELIMINARY_PASS = 'Y'
                </when>
                <when test='"avoid".equals(interViewType)'>
                    AND
                        AM.IN_AVOID = 'Y'
                </when>
                <otherwise>
                    AND
                        AM.APPLICATION_STAT = #{interViewType}
                </otherwise>
            </choose>
        </if>
        GROUP BY AM.SAVE_DATE DESC
    </select>

    <select id="getUserDuplicationList" parameterType="map" resultType="map">
        /* getUserDuplicationList */
        SELECT
            AM.APPLICATION_ID,
            AM.RECRUIT_INFO_SN,
            AI.JOB,
            CASE WHEN INSTR(DATE_FORMAT(AM.SAVE_DATE, '%Y-%m-%d %p %h:%i'), 'PM') > 0 THEN REPLACE(DATE_FORMAT(AM.SAVE_DATE, '%Y-%m-%d %p %h:%i'), 'PM', '오후')
                 ELSE REPLACE(DATE_FORMAT(AM.SAVE_DATE, '%Y-%m-%d %p %h:%i'), 'AM', '오전')
            END AS SAVE_DATE,
            (
                SELECT
                    TRUNCATE(SUM(A.EVAL_ITEM_SCORE)/COUNT(DISTINCT A.EVAL_LOGIN_ID), 1)
                FROM
                    CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD A
                JOIN
                    CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN B
                ON A.EVAL_LOGIN_ID = B.EVAL_LOGIN_ID AND B.EVAL_STATUS = 'E'
                WHERE
                    APPLICATION_ID = AM.APPLICATION_ID
                AND
                    EVAL_ITEM_ID != 'otherRmk'
                GROUP BY APPLICATION_ID
            ) AS DOC_SCREEN_AVERAGE,
            (
                SELECT
                    TRUNCATE(SUM(A.EVAL_ITEM_SCORE)/COUNT(DISTINCT A.EVAL_LOGIN_ID), 1)
                FROM
                    CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD A
                    LEFT JOIN
                    CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN B
                ON A.EVAL_LOGIN_ID = B.EVAL_LOGIN_ID AND B.EVAL_STATUS = 'E'
                WHERE
                    APPLICATION_ID = AM.APPLICATION_ID
                AND
                    EVAL_ITEM_ID != 'opinion'
                AND
                    EVAL_SCREEN_TYPE = 'in'
                GROUP BY APPLICATION_ID
            ) AS IN_SCREEN_AVERAGE
        FROM
            CAM_INSIDE.DJ_APPLICATION_MAIN AM
        JOIN
            CAM_INSIDE.DJ_RECRUIT_AREA_INFO AI
        ON AM.RECRUIT_AREA_INFO_SN = AI.RECRUIT_AREA_INFO_SN
        WHERE
            AM.USER_EMAIL = #{userEmail}
        AND
            AM.SAVE_TYPE = 'S'
        AND
            AM.RECRUIT_INFO_SN != #{notRecruitInfoSn}
    </select>

    <update id="setApplicationUpd" parameterType="map">
        /* setApplicationUpd */
        UPDATE
            CAM_INSIDE.DJ_APPLICATION_MAIN
        SET
            APPLICATION_STAT = #{applicationStat},
            IN_AVOID = 'N',
            MOD_ID = #{empSeq},
            MOD_DATE = NOW()
        WHERE
            APPLICATION_ID IN (${applicationId})
    </update>

    <update id="setInAvoidUpd" parameterType="map">
        /* setInAvoidUpd */
        UPDATE
            CAM_INSIDE.DJ_APPLICATION_MAIN
        SET
            IN_AVOID = #{inAvoid},
            MOD_ID = #{empSeq},
            MOD_DATE = NOW()
        WHERE
            APPLICATION_ID = #{applicationId}
    </update>

    <select id="getInterViewEvalChk" parameterType="map" resultType="boolean">
        /* getInterViewEvalChk */
        SELECT
            CASE WHEN (
                    SELECT
                        COUNT(*)
                    FROM
                        CAM_INSIDE.DJ_APPLICATION_MAIN
                    WHERE
                        SAVE_TYPE = 'S'
                    AND
                        RECRUIT_INFO_SN = #{recruitInfoSn}
                    AND (
                        APPLICATION_STAT = 'D' OR
                        APPLICATION_STAT = 'I' OR
                        APPLICATION_STAT = 'IF'
                    )
                ) = (
                    SELECT
                        COUNT(*)
                    FROM
                        CAM_INSIDE.DJ_APPLICATION_MAIN
                    WHERE
                        SAVE_TYPE = 'S'
                    AND
                        RECRUIT_INFO_SN = #{recruitInfoSn}
                    AND (
                        APPLICATION_STAT = 'I' OR
                        APPLICATION_STAT = 'IF' OR
                        IN_AVOID = 'Y')
                    )
                THEN 1 ELSE 0
            END
        FROM
            DUAL
    </select>

    <delete id="setInAvoidScoreBoardDel" parameterType="map">
        /* setInAvoidScoreBoardDel */
        DELETE FROM CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD WHERE APPLICATION_ID IN (${applicationId})
    </delete>

    <delete id="setApplicationInTimeDel" parameterType="map">
        /* setApplicationInTimeDel */
        DELETE FROM CAM_INSIDE.DJ_APPLICATION_IN_TIME WHERE RECRUIT_AREA_INFO_SN = #{recruitAreaInfoSn}
    </delete>

    <insert id="setApplicationInTime" parameterType="list">
        /* setApplicationInTime */
        INSERT INTO CAM_INSIDE.DJ_APPLICATION_IN_TIME
        (
            RECRUIT_AREA_INFO_SN,
            APPLICATION_ID,
            IN_TIME,
            RMK,
            REG_ID
        )
        VALUES
        <foreach collection="list" item="item" separator=" , ">
        (
            #{item.recruitAreaInfoSn},
            #{item.applicationId},
            #{item.inTime},
            #{item.rmk},
            #{item.empSeq}
        )
        </foreach>
    </insert>

    <select id="getInApplicationList" parameterType="map" resultType="map">
        /* getInApplicationList */
        SELECT
            AM.APPLICATION_ID,
            AI.RECRUIT_AREA_INFO_SN,
            AI.JOB,
            IT.IN_TIME,
            AM.USER_NAME,
            CONCAT(
            YEAR(NOW())-LEFT(AM.BDAY ,4) +1,
                '(',
                CASE WHEN AM.GENDER = 'M' THEN '남자'
                     ELSE '여자'
                END,
                ')'
            ) AS AGE_GENDER,
            DAS.SCHOOL_NAME,
            SUM(TIMESTAMPDIFF(MONTH, WORK_ST_DT, DATE_ADD(DATE_FORMAT(WORK_EN_DT, '%Y%m%d'), INTERVAL 1 MONTH))) AS WORK_DATE,
            REPLACE(SUBSTRING_INDEX(REPLACE(AM.ADDR, ' ', '_'), '_', 2), '_', ' ') AS ADDR,
            IT.RMK
            <if test='evalType != null and !"".equals(evalType) and "in".equals(evalType)'>
            ,(
                SELECT
                    CASE WHEN COUNT(*) > 0 THEN 1
                    ELSE 0 END
                FROM
                    CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD SB
                JOIN
                    CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN EL
                ON
                    EL.EVAL_LOGIN_ID = SB.EVAL_LOGIN_ID AND EL.EMP_SEQ = #{evalEmpSeq}
                WHERE
                    AM.APPLICATION_ID = APPLICATION_ID
                AND
                    SB.EVAL_SCREEN_TYPE = 'in'
            ) AS INSCREEN_YN
            </if>
        FROM
            CAM_INSIDE.DJ_APPLICATION_MAIN AM
        JOIN
            CAM_INSIDE.DJ_RECRUIT_AREA_INFO AI
        ON AM.RECRUIT_AREA_INFO_SN = AI.RECRUIT_AREA_INFO_SN
        <if test='evalLoginId != null and !"".equals(evalLoginId)'>
            JOIN
                CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN EL
            ON EL.RECRUIT_AREA_INFO_SN = AI.RECRUIT_AREA_INFO_SN AND EVAL_LOGIN_ID = #{evalLoginId}
        </if>
        JOIN (
            SELECT
                DAS.APPLICATION_ID,
                MAX(SCHOOL_TYPE) AS SCHOOL_TYPE,
                CONCAT(
                (SELECT CONCAT(SCHOOL_NAME, ' ', DEPT) FROM CAM_INSIDE.DJ_APPLICATION_SCHOOL WHERE APPLICATION_ID = DAS.APPLICATION_ID ORDER BY SCHOOL_TYPE DESC LIMIT 1),
                '(',
                CASE WHEN MAX(SCHOOL_TYPE) = '1' THEN '고등학교'
                WHEN MAX(SCHOOL_TYPE) = '2' THEN '전문학사'
                WHEN MAX(SCHOOL_TYPE) = '3' OR MAX(SCHOOL_TYPE) = '4' THEN '학사'
                WHEN MAX(SCHOOL_TYPE) = '5' THEN '석사'
                WHEN MAX(SCHOOL_TYPE) = '6' THEN '박사'
                END,
                CASE WHEN GRADUATE_TYPE = '1' THEN ''
                WHEN GRADUATE_TYPE = '2' THEN ' 졸업예정'
                WHEN GRADUATE_TYPE = '3' THEN ' 수료'
                END,
                ')'
                ) AS SCHOOL_NAME
            FROM
                CAM_INSIDE.DJ_APPLICATION_SCHOOL DAS
            GROUP BY DAS.APPLICATION_ID
        )DAS
        ON AM.APPLICATION_ID = DAS.APPLICATION_ID
        LEFT JOIN
            CAM_INSIDE.DJ_APPLICATION_CAREER AC
        ON AM.APPLICATION_ID = AC.APPLICATION_ID
        LEFT JOIN
            CAM_INSIDE.DJ_APPLICATION_IN_TIME IT
        ON AM.APPLICATION_ID = IT.APPLICATION_ID
        WHERE
            AM.RECRUIT_AREA_INFO_SN = #{recruitAreaInfoSn}
        <if test='"1".equals(searchType2)'>
            AND
                (AM.APPLICATION_STAT != 'DF' AND AM.APPLICATION_STAT != 'S')
        </if>
        <if test='"2".equals(searchType2)'>
            AND
                AM.APPLICATION_STAT = 'D'
            AND
                AM.IN_AVOID = 'N'
        </if>
        GROUP BY AM.APPLICATION_ID
        ORDER BY AM.USER_NAME
    </select>

    <update id="setPrePassAppl" parameterType="map">
        /* setPrePassAppl */
        UPDATE
            CAM_INSIDE.DJ_APPLICATION_MAIN
        SET
            PRELIMINARY_PASS = #{preliminaryPass},
            MOD_ID = #{empSeq},
            MOD_DATE = NOW()
        WHERE
            APPLICATION_ID = #{applicationId}
    </update>

    <select id="getRecruitPrint" parameterType="map" resultType="map">
        /*getRecruitPrint*/
        SELECT
            AM.APPLICATION_ID,
            AM.USER_EMAIL,
            AM.RECRUIT_INFO_SN,
            AM.RECRUIT_AREA_INFO_SN,
            AM.CAREER_TYPE,
            AM.USER_NAME,
            YEAR(NOW())-LEFT(AM.BDAY ,4) +1 AS AGE,
            CASE WHEN AM.GENDER = 'M' THEN '남자' ELSE '여자' END AS GENDER,
            DAS.SCHOOL_NAME,
            GROUP_CONCAT(DISTINCT AC.WORK_ST_DT, '~', AC.WORK_EN_DT SEPARATOR'|') AS WORK_DATE,
            REPLACE(SUBSTRING_INDEX(REPLACE(AM.ADDR, ' ', '_'), '_', 2), '_', ' ') AS ADDR,
            GROUP_CONCAT(DISTINCT LA.LANG_NAME,'  ',LA.ACQUISITION_SCORE SEPARATOR ', ') AS LANG_NAME,
            AI.JOB,
            CASE WHEN INSTR(DATE_FORMAT(AM.SAVE_DATE, '%Y-%m-%d %p %h:%i'), 'PM') > 0 THEN REPLACE(DATE_FORMAT(AM.SAVE_DATE, '%Y-%m-%d %p %h:%i'), 'PM', '오후')
                 ELSE REPLACE(DATE_FORMAT(AM.SAVE_DATE, '%Y-%m-%d %p %h:%i'), 'AM', '오전') END AS SAVE_DATE,
            (SELECT COUNT(*) FROM CAM_INSIDE.DJ_APPLICATION_MAIN WHERE SAVE_TYPE = 'S' AND AM.RECRUIT_INFO_SN != RECRUIT_INFO_SN AND AM.APPLICATION_ID != APPLICATION_ID AND AM.USER_EMAIL = USER_EMAIL) AS DUPLICATION_CNT,
            (
        SELECT TRUNCATE(SUM(A.EVAL_ITEM_SCORE)/COUNT(DISTINCT A.EVAL_LOGIN_ID), 1)
        FROM CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD A
            JOIN CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN B
        ON A.EVAL_LOGIN_ID = B.EVAL_LOGIN_ID AND B.EVAL_STATUS = 'E'
        WHERE APPLICATION_ID = AM.APPLICATION_ID
          AND EVAL_ITEM_ID != 'otherRmk'
          AND EVAL_SCREEN_TYPE = 'doc'
        GROUP BY APPLICATION_ID
            ) AS DOC_SCREEN_AVERAGE,
            (
        SELECT TRUNCATE(SUM(A.EVAL_ITEM_SCORE)/COUNT(DISTINCT A.EVAL_LOGIN_ID), 1)
        FROM CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD A
            LEFT JOIN CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN B
        ON A.EVAL_LOGIN_ID = B.EVAL_LOGIN_ID AND B.EVAL_STATUS = 'E'
        WHERE APPLICATION_ID = AM.APPLICATION_ID
          AND EVAL_ITEM_ID != 'opinion'
          AND EVAL_SCREEN_TYPE = 'in'
        GROUP BY APPLICATION_ID
            ) AS IN_SCREEN_AVERAGE,
            AM.IN_AVOID,
            CASE WHEN AM.IN_AVOID = 'Y' THEN '불참' ELSE '' END AS IN_AVOID_TXT,
        AM.PRELIMINARY_PASS,
        AM.APPLICATION_STAT,
        RI.START_DT,
        RI.END_DT,
        RI.REG_EMP_NAME,
        CONCAT(
            '근무부서 - [', AI.DEPT_NAME, ' > ', AI.TEAM_NAME, '] ',
            '채용부문 - [', AI.JOB, '] ',
            '필요경력 - [', AI.CAREER, ']'
        ) AS AREA_TITLE,
        GROUP_CONCAT(DISTINCT RAC.CERT_NAME, '  ', RAC.CERT_CLASS SEPARATOR', ') AS CERT_AREA
    FROM
        CAM_INSIDE.DJ_APPLICATION_MAIN AM
    JOIN (
            SELECT
            DAS.APPLICATION_ID,
            MAX(SCHOOL_TYPE) AS SCHOOL_TYPE,
            CONCAT(
                (SELECT CONCAT(SCHOOL_NAME, ' ', DEPT) FROM CAM_INSIDE.DJ_APPLICATION_SCHOOL WHERE APPLICATION_ID = DAS.APPLICATION_ID ORDER BY SCHOOL_TYPE DESC LIMIT 1),
                '(',
                CASE WHEN MAX(SCHOOL_TYPE) = '1' THEN '고등학교'
                    WHEN MAX(SCHOOL_TYPE) = '2' THEN '전문학사'
                    WHEN MAX(SCHOOL_TYPE) = '3' OR MAX(SCHOOL_TYPE) = '4' THEN '학사'
                    WHEN MAX(SCHOOL_TYPE) = '5' THEN '석사'
                    WHEN MAX(SCHOOL_TYPE) = '6' THEN '박사'
                END,
                CASE WHEN GRADUATE_TYPE = '1' THEN ''
                    WHEN GRADUATE_TYPE = '2' THEN ' 졸업예정'
                    WHEN GRADUATE_TYPE = '3' THEN ' 수료'
                END,
                ')'
            ) AS SCHOOL_NAME
        FROM
            CAM_INSIDE.DJ_APPLICATION_SCHOOL DAS
        GROUP BY DAS.APPLICATION_ID
    ) DAS ON AM.APPLICATION_ID = DAS.APPLICATION_ID
    LEFT JOIN CAM_INSIDE.DJ_APPLICATION_LANG_ABILITY LA ON AM.APPLICATION_ID = LA.APPLICATION_ID
    LEFT JOIN CAM_INSIDE.DJ_APPLICATION_CAREER AC ON AM.APPLICATION_ID = AC.APPLICATION_ID
    LEFT JOIN CAM_INSIDE.DJ_RECRUIT_AREA_INFO AI ON AM.RECRUIT_AREA_INFO_SN = AI.RECRUIT_AREA_INFO_SN
    LEFT JOIN CAM_INSIDE.DJ_RECRUIT_INFO RI ON AM.RECRUIT_INFO_SN = RI.RECRUIT_INFO_SN
    LEFT JOIN CAM_INSIDE.DJ_APPLICATION_CERT RAC ON AM.APPLICATION_ID = RAC.APPLICATION_ID
    WHERE
        AM.RECRUIT_INFO_SN = #{recruitInfoSn}
        AND
        AM.SAVE_TYPE = 'S'
        <if test='recruitAreaInfoSn != null and !"".equals(recruitAreaInfoSn)'>
        AND
        AM.RECRUIT_AREA_INFO_SN = #{recruitAreaInfoSn}
        </if>
        GROUP BY AM.APPLICATION_ID
        ORDER BY AM.USER_NAME
    </select>


    <update id="setRecruitArticleViewCount" parameterType="map">
        /*setBoardArticleViewCount*/
        UPDATE
            CAM_INSIDE.DJ_RECRUIT_INFO
        SET
            RECRUIT_VIEW_COUNT = (RECRUIT_VIEW_COUNT + 1)
        WHERE
            RECRUIT_INFO_SN = #{recruitInfoSn}
    </update>


    <select id="getRecruitPrintTitle" parameterType="map" resultType="map">
        /*getRecruitPrintTitle*/
        SELECT
        b.RECRUIT_TITLE,
        b.START_DT,
        b.END_DT,
        b.REG_EMP_NAME
        FROM
        cam_inside.dj_recruit_info b
        WHERE
        b.RECRUIT_INFO_SN = #{recruitInfoSn}
    </select>

    <delete id="insRecruitMemberDelete" parameterType="map">
        /*insRecruitMemberDelete*/
        DELETE
        FROM
            CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN
        WHERE
            EVAL_LOGIN_ID = #{evalLoginId}
    </delete>

    <select id="getDraftingList" parameterType="map" resultType="map">
        /*getDraftingList*/
        SELECT
            PC.*,
            DI.APPRO_KEY,
            DI.DOC_NO,
            DI.DOC_MENU_CD,
            DI.DOC_TITLE,
            DI.DRAFT_EMP_NAME,
            DATE_FORMAT(DI.DRAFT_DT, '%Y-%m-%d') AS DRAFT_DATE
        FROM
            CAM_INSIDE.DJ_RECRUIT_DRAFT PC
        LEFT JOIN
            DJ_CAMTIC.A_DOC_INFO DI ON PC.DOC_ID = DI.DOC_ID
        WHERE
            PC.RECRUIT_INFO_SN = #{recruitInfoSn}
        ORDER BY RECRUIT_DRAFT_SN DESC
    </select>

    <insert id="insDraftInfo" parameterType="map">
        INSERT INTO CAM_INSIDE.DJ_RECRUIT_DRAFT
            (
                RECRUIT_INFO_SN,
                REG_EMP_SEQ
            )
        VALUES
            (
                #{recruitInfoSn},
                #{empSeq}
            )
    </insert>

    <update id="updateDraftApprStat" parameterType="map">
        /* updateDraftApprStat */
        UPDATE CAM_INSIDE.DJ_RECRUIT_DRAFT
        SET
            STATUS = #{approveStatCode},
            DOC_ID = #{docId}
        WHERE
            RECRUIT_DRAFT_SN = (SELECT MAX(RECRUIT_DRAFT_SN) FROM CAM_INSIDE.DJ_RECRUIT_DRAFT WHERE RECRUIT_INFO_SN = #{recruitInfoSn})
    </update>

    <update id="updateDraftFinalApprStat" parameterType="map">
        /* updateDraftFinalApprStat */
        UPDATE CAM_INSIDE.DJ_RECRUIT_DRAFT
        SET
            STATUS = #{approveStatCode},
            APPROVAL_DATE = DATE_FORMAT(NOW(), '%Y-%m-%d'),
            APPROVAL_EMP_SEQ = #{empSeq}
        WHERE
            RECRUIT_DRAFT_SN = (SELECT MAX(RECRUIT_DRAFT_SN) FROM CAM_INSIDE.DJ_RECRUIT_DRAFT WHERE RECRUIT_INFO_SN = #{recruitInfoSn})
    </update>
</mapper>



