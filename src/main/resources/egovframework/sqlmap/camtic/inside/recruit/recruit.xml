<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="recruit">

    <select id="getRecruitNum" resultType="map">
        /* getRecruitNum */
        SELECT CONCAT('제', DATE_FORMAT(NOW(), '%Y'), '-', LPAD((SELECT IFNULL(max(siri.RECRUIT_SN), 0)+1 FROM cam_inside.dj_recruit_info siri), '2', '0'), '호') AS RECRUIT_NUM FROM DUAL
    </select>

    <select id="getRecruitList" parameterType="map" resultType="map">
        /* getRecruitList */
        SELECT
            IRI.*,
            GROUP_CONCAT(DISTINCT AI.CAREER_TYPE separator '~') AS CAREER_TYPE,
            SUM(AI.RECRUITMENT) AS RECRUITMENT,
            (SELECT COUNT(*) FROM CAM_INSIDE.DJ_APPLICATION_MAIN WHERE RECRUIT_INFO_SN = IRI.RECRUIT_INFO_SN AND SAVE_TYPE = 'S') as APPLICATION_CNT
        FROM
            CAM_INSIDE.DJ_RECRUIT_INFO IRI
        JOIN
            CAM_INSIDE.DJ_RECRUIT_AREA_INFO AI
        ON IRI.RECRUIT_INFO_SN = AI.RECRUIT_INFO_SN
        WHERE
            1=1
        GROUP BY IRI.RECRUIT_INFO_SN
        ORDER BY IRI.REG_DT DESC
    </select>

    <select id="getRecruit" parameterType="map" resultType="map">
        /* getRecruit */
        SELECT
            RI.*,
            RES.INTERVIEW_EVAL_SHEET
        FROM
            CAM_INSIDE.DJ_RECRUIT_INFO RI
        LEFT JOIN
            CAM_INSIDE.DJ_RECRUIT_EVAL_SHEET RES
        ON RES.RECRUIT_INFO_SN = RI.RECRUIT_INFO_SN
        WHERE
            RI.RECRUIT_INFO_SN = #{recruitInfoSn}
    </select>

    <select id="getCommissionerList" parameterType="map" resultType="map">
        /*getCommissionerList*/
        SELECT
            RE.*
            <if test='recruitInfoSn != null and !"".equals(recruitInfoSn)'>
            ,(
                SELECT
                    COUNT(*)
                FROM
                    CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN
                WHERE
                    RECRUIT_COMMISSIONER_INFO_SN = RE.RECRUIT_COMMISSIONER_INFO_SN
                AND
                    RECRUIT_INFO_SN = #{recruitInfoSn}
            ) AS CHK
            </if>
        FROM
            (
                SELECT
                    @ROWNUM := @ROWNUM + 1 AS ROW_NUM,
                    IRCI.*
                FROM
                    CAM_INSIDE.DJ_RECRUIT_COMMISSIONER_INFO IRCI,
                    (SELECT @ROWNUM := 0) TMP
                WHERE
                    1=1
                <if test='searchName != null and !"".equals(searchName)'>
                    AND IRCI.NAME LIKE CONCAT('%', #{searchName}, '%')
                </if>
                <if test='searchComp != null and !"".equals(searchComp)'>
                    AND IRCI.BELONG LIKE CONCAT('%', #{searchComp}, '%')
                </if>
                ORDER BY IRCI.REG_DT
            ) RE
        ORDER BY RE.REG_DT DESC
    </select>

    <insert id="setRecruitInsert" parameterType="map">
        /* setRecruitInsert */
        INSERT INTO CAM_INSIDE.DJ_RECRUIT_INFO
            (
                RECRUIT_NUM,
                RECRUIT_TITLE,
                RECRUIT_DETAIL,
                UPLOAD_DT,
                UPLOAD_TEXT,
                START_DT,
                END_DT,
                START_TIME,
                END_TIME,
                JOB_POSITION_ETC,
                ELIGIBILITY_ETC,
                WORK_TYPE,
                ADMISSION,
                RECEIPT_DOCU,
                REMARK,
                RECRUIT_STATUS_SN,
                RECRUIT_STATUS_TEXT,
                REG_EMP_SEQ,
                REG_EMP_NAME
            )
        VALUE
            (
                #{recruitNum},
                #{recruitTitle},
                #{recruitDetail},
                #{uploadDt},
                #{uploadText},
                #{startDt},
                #{endDt},
                #{startTime},
                #{endTime},
                #{jobPositionEtc},
                #{eligibilityEtc},
                #{workType},
                #{admission},
                #{receiptDocu},
                #{remark},
                #{recruitStatusSn},
                #{recruitStatusText},
                #{regEmpSeq},
                #{regEmpName}
            )
        <selectKey keyProperty="recruitInfoSn" resultType="Integer" order="BEFORE">
            SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'CAM_INSIDE' AND TABLE_NAME = 'DJ_RECRUIT_INFO'
        </selectKey>
    </insert>

    <update id="setRecruitUpdate" parameterType="map">
        /* setRecruitUpdate */
        UPDATE
            CAM_INSIDE.DJ_RECRUIT_INFO
        SET
            RECRUIT_TITLE = #{recruitTitle},
            RECRUIT_DETAIL = #{recruitDetail},
            UPLOAD_DT = #{uploadDt},
            UPLOAD_TEXT = #{uploadText},
            START_DT = #{startDt},
            END_DT = #{endDt},
            START_TIME = #{startTime},
            END_TIME = #{endTime},
            JOB_POSITION_ETC = #{jobPositionEtc},
            ELIGIBILITY_ETC = #{eligibilityEtc},
            WORK_TYPE = #{workType},
            ADMISSION = #{admission},
            RECEIPT_DOCU = #{receiptDocu},
            REMARK = #{remark},
            RECRUIT_STATUS_SN = #{recruitStatusSn},
            RECRUIT_STATUS_TEXT = #{recruitStatusText},
            MOD_EMP_SEQ = #{regEmpSeq},
            MOD_DATE = NOW()
        WHERE
            RECRUIT_INFO_SN = #{recruitInfoSn}
    </update>

    <delete id="setRecruitAreaDelete" parameterType="map">
        /* setRecruitAreaDelete */
        DELETE FROM CAM_INSIDE.DJ_RECRUIT_AREA_INFO WHERE RECRUIT_INFO_SN = #{recruitInfoSn}
    </delete>

    <insert id="setRecruitAreaInsert" parameterType="map">
        /* setRecruitAreaInsert */
        INSERT INTO CAM_INSIDE.DJ_RECRUIT_AREA_INFO
            (
                RECRUIT_INFO_SN,
                DEPT_SEQ,
                DEPT_NAME,
                TEAM_SEQ,
                TEAM_NAME,
                JOB,
                RECRUITMENT,
                CAREER_TYPE,
                DUTY,
                CAREER,
                WORK_TYPE,
                QUALIFICATION
            )
        VALUES
        <foreach collection="area" item="item" separator=" , ">
            (
                #{recruitInfoSn},
                #{item.deptSeq},
                #{item.deptName},
                #{item.teamSeq},
                #{item.teamName},
                #{item.job},
                #{item.recruitment},
                #{item.careerType},
                #{item.duty},
                #{item.career},
                #{item.workType},
                #{item.qualification}
            )
        </foreach>
    </insert>

    <insert id="setCommissionerInsert" parameterType="map">
        /* setCommissionerInsert */
        INSERT INTO CAM_INSIDE.DJ_RECRUIT_COMMISSIONER_INFO
            (
                ID,
                NAME,
                FIRST_RRN_NAME,
                SECOND_RRN_NAME,
                TEL_NUM,
                EMAIL,
                BELONG,
                REG_EMP_SEQ,
                REG_EMP_NAME,
                GENDER,
                DUTY_POSITION,
                BMK
            )
        VALUE
            (
                #{id},
                #{name},
                #{firstRrnName},
                #{secondRrnName},
                #{telNum},
                #{email},
                #{belong},
                #{regEmpSeq},
                #{regEmpName},
                #{gender},
                #{dutyPosition},
                #{bmk}
            )
    </insert>

    <select id="getRecruitAreaList" parameterType="map" resultType="map">
        /* getRecruitAreaList */
        SELECT
            RAI.*,
            CONCAT('근무부서 - [', RAI.DEPT_NAME, ' > ', RAI.TEAM_NAME, '] 채용부문 - [', RAI.JOB, '] 필요경력 - [', RAI.CAREER, ']') AS AREA_TITLE
        FROM
            CAM_INSIDE.DJ_RECRUIT_AREA_INFO RAI
        WHERE 1=1
        <choose>
            <when test='RECRUIT_INFO_SN != null and !"".equals(RECRUIT_INFO_SN)'>
                AND RECRUIT_INFO_SN = #{RECRUIT_INFO_SN}
            </when>
            <when test='recruitInfoSn != null and !"".equals(recruitInfoSn)'>
                AND RECRUIT_INFO_SN = #{recruitInfoSn}
            </when>
        </choose>

        ORDER BY REG_DT DESC
    </select>

    <select id="getRecruitArea" parameterType="map" resultType="map">
        /* getRecruitArea */
        SELECT
            *
        FROM
            CAM_INSIDE.DJ_RECRUIT_AREA_INFO
        WHERE 1=1
            AND RECRUIT_AREA_INFO_SN = #{recruitAreaInfoSn}
    </select>

    <select id="getApplicationList" parameterType="map" resultType="map">
        /* getApplicationList */
        SELECT
            AM.APPLICATION_ID,
            AM.USER_EMAIL,
            AM.RECRUIT_INFO_SN,
            AM.RECRUIT_AREA_INFO_SN,
            AM.USER_NAME,
            ROUND((TO_DAYS(NOW()) - TO_DAYS(AM.BDAY)) / 365, 0) AS AGE,
            CASE WHEN AM.GENDER = 'M' THEN '남자'
                ELSE '여자'
            END AS GENDER,
            DAS.SCHOOL_NAME,
            GROUP_CONCAT(AC.WORK_ST_DT, '~', AC.WORK_EN_DT SEPARATOR '|') AS WORK_DATE,
            REPLACE(SUBSTRING_INDEX(REPLACE(AM.ADDR, ' ', '_'), '_', 2), '_', ' ') AS ADDR,
            GROUP_CONCAT(LA.LANG_NAME SEPARATOR ', ') AS LANG_NAME,
            AI.JOB,
            CASE WHEN INSTR(DATE_FORMAT(AM.SAVE_DATE, '%Y-%m-%d %p %h:%i'), 'PM') > 0 THEN REPLACE(DATE_FORMAT(AM.SAVE_DATE, '%Y-%m-%d %p %h:%i'), 'PM', '오후')
                 ELSE REPLACE(DATE_FORMAT(AM.SAVE_DATE, '%Y-%m-%d %p %h:%i'), 'AM', '오전')
            END AS SAVE_DATE,
            (SELECT COUNT(*) FROM CAM_INSIDE.DJ_APPLICATION_MAIN WHERE SAVE_TYPE = 'S' AND AM.APPLICATION_ID != APPLICATION_ID AND AM.USER_EMAIL = USER_EMAIL) AS DUPLICATION_CNT,
            (
                SELECT
                    TRUNCATE(SUM(A.EVAL_ITEM_SCORE)/COUNT(DISTINCT A.EVAL_LOGIN_ID), 1)
                FROM
                    CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD A
                JOIN
                    CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN B
                ON A.EVAL_LOGIN_ID = B.EVAL_LOGIN_ID AND B.EVAL_STATUS = 'E'
                WHERE
                    APPLICATION_ID = AM.APPLICATION_ID
                AND
                    EVAL_ITEM_ID != 'otherRmk'
                AND
                    EVAL_SCREEN_TYPE = 'doc'
                GROUP BY APPLICATION_ID
            ) AS DOC_SCREEN_AVERAGE,
            (
                SELECT
                    TRUNCATE(SUM(A.EVAL_ITEM_SCORE)/COUNT(DISTINCT A.EVAL_LOGIN_ID), 1)
                FROM
                    CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD A
                LEFT JOIN
                    CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN B
                ON A.EVAL_LOGIN_ID = B.EVAL_LOGIN_ID AND B.EVAL_STATUS = 'E'
                WHERE
                    APPLICATION_ID = AM.APPLICATION_ID
                AND
                    EVAL_ITEM_ID != 'opinion'
                AND
                    EVAL_SCREEN_TYPE = 'in'
                GROUP BY APPLICATION_ID
            ) AS IN_SCREEN_AVERAGE,
            CASE WHEN AM.IN_AVOID = 'Y' THEN '불참'
                ELSE ''
            END IN_AVOID,
            AM.PRELIMINARY_PASS
        FROM
            CAM_INSIDE.DJ_APPLICATION_MAIN AM
        JOIN (
            SELECT
                DAS.APPLICATION_ID,
                MAX(SCHOOL_TYPE) AS SCHOOL_TYPE,
                CONCAT(
                    SCHOOL_NAME,
                    ' ',
                    DEPT,
                    '(',
                    CASE WHEN MAX(SCHOOL_TYPE) = '1' THEN '고등학교'
                        WHEN MAX(SCHOOL_TYPE) = '2' THEN '전문대학'
                        WHEN MAX(SCHOOL_TYPE) = '3' OR MAX(SCHOOL_TYPE) = '4' THEN '대학교'
                        WHEN MAX(SCHOOL_TYPE) = '5' THEN '석사'
                        WHEN MAX(SCHOOL_TYPE) = '6' THEN '박사'
                    END,
                    CASE WHEN GRADUATE_TYPE = '1' THEN ''
                        WHEN GRADUATE_TYPE = '2' THEN ' 졸업예정'
                        WHEN GRADUATE_TYPE = '2' THEN ' 수료'
                    END,
                    ')'
                ) AS SCHOOL_NAME
            FROM
                CAM_INSIDE.DJ_APPLICATION_SCHOOL DAS
            GROUP BY DAS.APPLICATION_ID
        )DAS
        ON AM.APPLICATION_ID = DAS.APPLICATION_ID
        LEFT JOIN
            CAM_INSIDE.DJ_APPLICATION_LANG_ABILITY LA
        ON AM.APPLICATION_ID = LA.APPLICATION_ID
        LEFT JOIN
            CAM_INSIDE.DJ_APPLICATION_CAREER AC
        ON AM.APPLICATION_ID = AC.APPLICATION_ID
        JOIN
            CAM_INSIDE.DJ_RECRUIT_AREA_INFO AI
        ON AM.RECRUIT_AREA_INFO_SN = AI.RECRUIT_AREA_INFO_SN
        WHERE
            AM.RECRUIT_INFO_SN = #{recruitInfoSn}
        AND
            AM.SAVE_TYPE = 'S'
        AND
            AM.APPLICATION_STAT = #{searchType}
        <if test='recruitAreaInfoSn != null and !"".equals(recruitAreaInfoSn)'>
        AND
            AM.RECRUIT_AREA_INFO_SN = #{recruitAreaInfoSn}
        </if>
        GROUP BY AM.APPLICATION_ID
    </select>

    <select id="getUserDuplicationList" parameterType="map" resultType="map">
        /* getUserDuplicationList */
        SELECT
            AM.APPLICATION_ID,
            AM.RECRUIT_INFO_SN,
            AI.JOB,
            CASE WHEN INSTR(DATE_FORMAT(AM.SAVE_DATE, '%Y-%m-%d %p %h:%i'), 'PM') > 0 THEN REPLACE(DATE_FORMAT(AM.SAVE_DATE, '%Y-%m-%d %p %h:%i'), 'PM', '오후')
                 ELSE REPLACE(DATE_FORMAT(AM.SAVE_DATE, '%Y-%m-%d %p %h:%i'), 'AM', '오전')
            END AS SAVE_DATE,
            (
                SELECT
                    TRUNCATE(SUM(A.EVAL_ITEM_SCORE)/COUNT(DISTINCT A.EVAL_LOGIN_ID), 1)
                FROM
                    CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD A
                JOIN
                    CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN B
                ON A.EVAL_LOGIN_ID = B.EVAL_LOGIN_ID AND B.EVAL_STATUS = 'E'
                WHERE
                    APPLICATION_ID = AM.APPLICATION_ID
                AND
                    EVAL_ITEM_ID != 'otherRmk'
                GROUP BY APPLICATION_ID
            ) AS DOC_SCREEN_AVERAGE,
            (
                SELECT
                    TRUNCATE(SUM(A.EVAL_ITEM_SCORE)/COUNT(DISTINCT A.EVAL_LOGIN_ID), 1)
                FROM
                    CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD A
                    LEFT JOIN
                    CAM_INSIDE.DJ_APPLICATION_EVAL_LOGIN B
                ON A.EVAL_LOGIN_ID = B.EVAL_LOGIN_ID AND B.EVAL_STATUS = 'E'
                WHERE
                    APPLICATION_ID = AM.APPLICATION_ID
                AND
                    EVAL_ITEM_ID != 'opinion'
                AND
                    EVAL_SCREEN_TYPE = 'in'
                GROUP BY APPLICATION_ID
            ) AS IN_SCREEN_AVERAGE
        FROM
            CAM_INSIDE.DJ_APPLICATION_MAIN AM
        JOIN
            CAM_INSIDE.DJ_RECRUIT_AREA_INFO AI
        ON AM.RECRUIT_AREA_INFO_SN = AI.RECRUIT_AREA_INFO_SN
        WHERE
            AM.USER_EMAIL = #{userEmail}
        AND
            AM.SAVE_TYPE = 'S'
        AND
            AM.RECRUIT_INFO_SN != #{notRecruitInfoSn}
    </select>

    <update id="setApplicationUpd" parameterType="map">
        /* setApplicationUpd */
        UPDATE
            CAM_INSIDE.DJ_APPLICATION_MAIN
        SET
            APPLICATION_STAT = #{applicationStat},
            IN_AVOID = 'N',
            MOD_ID = #{empSeq},
            MOD_DATE = NOW()
        WHERE
            APPLICATION_ID IN (${applicationId})
    </update>

    <update id="setInAvoidUpd" parameterType="map">
        /* setInAvoidUpd */
        UPDATE
            CAM_INSIDE.DJ_APPLICATION_MAIN
        SET
            IN_AVOID = 'Y',
            MOD_ID = #{empSeq},
            MOD_DATE = NOW()
        WHERE
            APPLICATION_ID IN (${applicationId})
    </update>

    <delete id="setInAvoidScoreBoardDel" parameterType="map">
        /* setInAvoidScoreBoardDel */
        DELETE FROM CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD WHERE APPLICATION_ID IN (${applicationId})
    </delete>

    <delete id="setApplicationInTimeDel" parameterType="map">
        /* setApplicationInTimeDel */
        DELETE FROM CAM_INSIDE.DJ_APPLICATION_IN_TIME WHERE RECRUIT_AREA_INFO_SN = #{recruitAreaInfoSn}
    </delete>

    <insert id="setApplicationInTime" parameterType="list">
        /* setApplicationInTime */
        INSERT INTO CAM_INSIDE.DJ_APPLICATION_IN_TIME
        (
            RECRUIT_AREA_INFO_SN,
            APPLICATION_ID,
            IN_TIME,
            RMK,
            REG_ID
        )
        VALUES
        <foreach collection="list" item="item" separator=" , ">
        (
            #{item.recruitAreaInfoSn},
            #{item.applicationId},
            #{item.inTime},
            #{item.rmk},
            #{item.empSeq}
        )
        </foreach>
    </insert>

    <select id="getInApplicationList" parameterType="map" resultType="map">
        /* getInApplicationList */
        SELECT
            AM.APPLICATION_ID,
            AI.RECRUIT_AREA_INFO_SN,
            AI.JOB,
            IT.IN_TIME,
            AM.USER_NAME,
            CONCAT(
                ROUND((TO_DAYS(NOW()) - TO_DAYS(AM.BDAY)) / 365, 0),
                '(',
                CASE WHEN AM.GENDER = 'M' THEN '남자'
                     ELSE '여자'
                END,
                ')'
            ) AS AGE_GENDER,
            DAS.SCHOOL_NAME,
            GROUP_CONCAT(AC.WORK_ST_DT, '~', AC.WORK_EN_DT SEPARATOR '|') AS WORK_DATE,
            REPLACE(SUBSTRING_INDEX(REPLACE(AM.ADDR, ' ', '_'), '_', 2), '_', ' ') AS ADDR,
            IT.RMK
            <if test='evalType != null and !"".equals(evalType) and "in".equals(evalType)'>
            ,(SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM CAM_INSIDE.DJ_APPLICATION_EVAL_SCORE_BOARD WHERE EVAL_LOGIN_ID = #{evalLoginId} AND AM.APPLICATION_ID = APPLICATION_ID) AS INSCREEN_YN
            </if>
        FROM
            CAM_INSIDE.DJ_APPLICATION_MAIN AM
        JOIN
            CAM_INSIDE.DJ_RECRUIT_AREA_INFO AI
        ON AM.RECRUIT_AREA_INFO_SN = AI.RECRUIT_AREA_INFO_SN
        JOIN (
            SELECT
                DAS.APPLICATION_ID,
                MAX(SCHOOL_TYPE) AS SCHOOL_TYPE,
                CONCAT(
                    SCHOOL_NAME,
                    ' ',
                    DEPT,
                    '(',
                    CASE WHEN MAX(SCHOOL_TYPE) = '1' THEN '고등학교'
                         WHEN MAX(SCHOOL_TYPE) = '2' THEN '전문대학'
                         WHEN MAX(SCHOOL_TYPE) = '3' OR MAX(SCHOOL_TYPE) = '4' THEN '대학교'
                         WHEN MAX(SCHOOL_TYPE) = '5' THEN '석사'
                         WHEN MAX(SCHOOL_TYPE) = '6' THEN '박사'
                    END,
                    CASE WHEN GRADUATE_TYPE = '1' THEN ''
                         WHEN GRADUATE_TYPE = '2' THEN ' 졸업예정'
                         WHEN GRADUATE_TYPE = '2' THEN ' 수료'
                    END,
                    ')'
                ) AS SCHOOL_NAME
            FROM
                CAM_INSIDE.DJ_APPLICATION_SCHOOL DAS
            GROUP BY DAS.APPLICATION_ID
        )DAS
        ON AM.APPLICATION_ID = DAS.APPLICATION_ID
        LEFT JOIN
            CAM_INSIDE.DJ_APPLICATION_CAREER AC
        ON AM.APPLICATION_ID = AC.APPLICATION_ID
        LEFT JOIN
            CAM_INSIDE.DJ_APPLICATION_IN_TIME IT
        ON AM.APPLICATION_ID = IT.APPLICATION_ID
        WHERE
            AM.RECRUIT_AREA_INFO_SN = #{recruitAreaInfoSn}
        AND
            AM.APPLICATION_STAT = 'D'
        AND
            AM.IN_AVOID = 'N'
        GROUP BY AM.APPLICATION_ID
    </select>

    <update id="setPrePassAppl" parameterType="map">
        /* setPrePassAppl */
        UPDATE
            CAM_INSIDE.DJ_APPLICATION_MAIN
        SET
            PRELIMINARY_PASS = #{preliminaryPass},
            MOD_ID = #{empSeq},
            MOD_DATE = NOW()
        WHERE
            APPLICATION_ID = #{applicationId}
    </update>
</mapper>



