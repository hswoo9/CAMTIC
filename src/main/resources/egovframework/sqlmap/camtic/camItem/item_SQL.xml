<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="item">

    <select id="getItemStandardUnitPriceList" parameterType="map" resultType="map">
        /* getItemStandardUnitPriceList */
        SELECT
            IM.*,
            MSU.MASTER_SD_UP_SN,
            MSU.UNIT_PRICE,
            MSU.START_DT,
            MSU.END_DT,
            MSU.CHANGE_NUM,
            ITC.ITEM_CD_NM AS ITEM_TYPE_NM,
            WHC.ITEM_CD_NM AS WH_CD_NM,
            IUC.ITEM_CD_NM AS ITEM_UNIT_NM,
            (SELECT REG_EMP_NAME FROM CAM_ITEM.DJ_ITEM_MASTER_SD_UP WHERE MASTER_SN = IM.MASTER_SN AND CHANGE_NUM = 1) AS REG_EMP_NAME,
            (SELECT REG_EMP_NAME FROM CAM_ITEM.DJ_ITEM_MASTER_SD_UP WHERE MASTER_SN = IM.MASTER_SN AND CHANGE_NUM != 1 ORDER BY CHANGE_NUM DESC LIMIT 1) AS MOD_EMP_NAME
        FROM
            CAM_ITEM.DJ_ITEM_MASTER IM
        JOIN
            CAM_ITEM.DJ_ITEM_CD ITC
        ON ITC.LG_CD = 'IT' AND IM.ITEM_TYPE = ITC.ITEM_CD
        JOIN
            CAM_ITEM.DJ_ITEM_CD WHC
        ON WHC.LG_CD = 'WH' AND IM.WH_CD = WHC.ITEM_CD
        JOIN
            CAM_ITEM.DJ_ITEM_CD IUC
        ON IUC.LG_CD = 'UNIT' AND IM.ITEM_UNIT_CD = IUC.ITEM_CD
        LEFT JOIN
            CAM_ITEM.DJ_ITEM_MASTER_SD_UP MSU
        ON MSU.MASTER_SN = IM.MASTER_SN AND MSU.ACTIVE = 'Y'

        WHERE 1=1
        <if test='masterSn != null and !"".equals(masterSn)'>
            AND IM.MASTER_SN = #{masterSn}
        </if>

        <if test='itemType != null and !"".equals(itemType)'>
            AND IM.ITEM_TYPE = #{itemType}
        </if>

        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword)'>
                AND IM.${searchKeyword} LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <otherwise>
                <if test='searchValue != null and !"".equals(searchValue)'>
                    AND (
                        IM.ITEM_NO LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.ITEM_NAME LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.STANDARD LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.SAFETY_INVEN LIKE CONCAT('%', #{searchValue}, '%')
                    )
                </if>
            </otherwise>
        </choose>

        ORDER BY IM.ITEM_NO ASC
    </select>

    <select id="getSdunitPriceList" parameterType="map" resultType="map">
        /* getSdunitPriceList */
        SELECT
            *
        FROM
            CAM_ITEM.DJ_ITEM_MASTER_SD_UP
        WHERE
            MASTER_SN = #{masterSn}
    </select>

    <select id="getMaxChangeNum" parameterType="map" resultType="String">
        /* getMaxChangeNum */
        SELECT IFNULL(MAX(CHANGE_NUM) + 1, '1') FROM CAM_ITEM.DJ_ITEM_MASTER_SD_UP IM WHERE IM.MASTER_SN = #{masterSn}
    </select>

    <insert id="setSdUnitPriceReg" parameterType="map">
        /* setSdUnitPriceReg */
        INSERT INTO CAM_ITEM.DJ_ITEM_MASTER_SD_UP
        (
            MASTER_SN,
            UNIT_PRICE,
            START_DT,
            END_DT,
            RMK,
            CHANGE_NUM,
            REG_EMP_SEQ,
            REG_EMP_NAME
        )
        VALUES
        (
            #{masterSn},
            #{unitPrice},
            #{startDt},
            '9999-12-31',
            #{rmk},
            #{changeNum},
            #{empSeq},
            #{empName}
        )
    </insert>

    <update id="setSdUnitPriceEndDtUpd" parameterType="map">
        /* setSdUnitPriceEndDtUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_MASTER_SD_UP
        SET
            END_DT = DATE_FORMAT(DATE_ADD(#{endDt}, INTERVAL -1 DAY), '%Y-%m-%d'),
            ACTIVE = 'N',
            MOD_EMP_SEQ = #{empSeq},
            MOD_EMP_NAME = #{empName},
            MOD_DT = NOW()
        WHERE
            MASTER_SD_UP_SN = (
                SELECT
                    MASTER_SD_UP_SN
                FROM
                    CAM_ITEM.DJ_ITEM_MASTER_SD_UP
                WHERE
                    MASTER_SN = #{masterSn}
                AND
                    CHANGE_NUM = (${changeNum} - 1)
            )
        AND
            MASTER_SN = #{masterSn}
    </update>

    <update id="setSdUnitPriceRegUpd" parameterType="map">
        /* setSdUnitPriceRegUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_MASTER_SD_UP
        SET
            UNIT_PRICE = #{unitPrice},
            START_DT = #{startDt},
            RMK = #{rmk},
            MOD_EMP_SEQ = #{empSeq},
            MOD_EMP_NAME = #{empName},
            MOD_DT = NOW()
        WHERE
            MASTER_SD_UP_SN = #{masterSdUpSn}
        AND
            MASTER_SN = #{masterSn}
    </update>

    <delete id="setSdUnitPriceDel" parameterType="map">
        /* setSdUnitPriceDel */
        DELETE FROM CAM_ITEM.DJ_ITEM_MASTER_SD_UP WHERE MASTER_SD_UP_SN IN (${masterSdUpSn})
    </delete>

    <select id="getObtainOrderList" parameterType="map" resultType="map">
        /* getObtainOrderList */
        SELECT
            OO.*,
            EI.EMP_NAME_KR,
            IM.ITEM_NO,
            IM.ITEM_NAME,
            IUC.ITEM_CD_NM AS UNIT,
            (SELECT SUM(CURRENT_INVEN) FROM CAM_ITEM.dj_item_inventory WHERE MASTER_SN = OO.MASTER_SN) AS OVERALL_INVEN,
            CI.CRM_NM
        FROM
            CAM_ITEM.DJ_ITEM_OBTAIN_ORDER OO
        JOIN
            CAM_CRM.DJ_CRM_INFO CI
        ON OO.CRM_SN = CI.CRM_SN
        JOIN
            CAM_HR.DJ_EMP_INFO EI
        ON OO.REG_EMP_SEQ = EI.EMP_SEQ
        JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
        ON IM.MASTER_SN = OO.MASTER_SN
        JOIN
            CAM_ITEM.DJ_ITEM_CD IUC
        ON IUC.LG_CD = 'UNIT' AND IM.ITEM_UNIT_CD = IUC.ITEM_CD
        WHERE 1=1

        <if test='obtainOrderType != null and !"".equals(obtainOrderType)'>
            AND OO.OBTAIN_ORDER_TYPE = #{obtainOrderType}
        </if>

        <if test='deadLine != null and !"".equals(deadLine)'>
            AND OO.DEADLINE = #{deadLine}
        </if>

        <if test='startDt != null and !"".equals(startDt)'>
            <![CDATA[
            AND
                DATE_FORMAT(#{startDt}, '%Y%m%d') <= DATE_FORMAT(OO.ORDER_DT, '%Y%m%d')
            AND
                DATE_FORMAT(#{endDt}, '%Y%m%d') >= DATE_FORMAT(OO.ORDER_DT, '%Y%m%d')
            ]]>
        </if>

        <if test='crmSn != null and !"".equals(crmSn)'>
            AND OO.CRM_SN = #{crmSn}
        </if>

        <if test='masterSn != null and !"".equals(masterSn)'>
            AND IM.MASTER_SN = #{masterSn}
        </if>

        <if test='ooArr != null and !"".equals(ooArr)'>
            AND OO.OBTAIN_ORDER_SN IN(${ooArr})
        </if>

        <if test='deadLine != null and !"".equals(deadLine)'>
            AND OO.DEADLINE = #{deadLine}
        </if>

        <if test='unpaidType != null and !"".equals(unpaidType)'>
            AND OO.UNPAID_TYPE = #{unpaidType}
        </if>

        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword)'>
                AND IM.${searchKeyword} LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <otherwise>
                <if test='searchValue != null and !"".equals(searchValue)'>
                    AND (
                        IM.ITEM_NO LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.ITEM_NAME LIKE CONCAT('%', #{searchValue}, '%')
                    )
                </if>
            </otherwise>
        </choose>

        <if test='regEmpSeq != null and !"".equals(regEmpSeq)'>
            AND OO.REG_EMP_SEQ = #{regEmpSeq}
        </if>

        ORDER BY
            CASE WHEN OO.MOD_DT IS NULL THEN OO.REG_DT
                ELSE OO.MOD_DT
            END
        DESC
    </select>

    <select id="getObtainOrder" parameterType="map" resultType="map">
        /* getObtainOrder */
        SELECT
            OO.*,
            EI.EMP_NAME_KR,
            IM.ITEM_NO,
            IM.ITEM_NAME,
            IM.STANDARD,
            CI.CRM_NM
        FROM
            CAM_ITEM.DJ_ITEM_OBTAIN_ORDER OO
        JOIN
            CAM_CRM.DJ_CRM_INFO CI
        ON OO.CRM_SN = CI.CRM_SN
        JOIN
            CAM_HR.DJ_EMP_INFO EI
        ON OO.REG_EMP_SEQ = EI.EMP_SEQ
        JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
        ON IM.MASTER_SN = OO.MASTER_SN
        WHERE 1=1
        AND OBTAIN_ORDER_SN = #{obtainOrderSn}
    </select>

    <update id="setDeadlineUpd" parameterType="map">
        /* setDeadlineUpd */
        <![CDATA[
        UPDATE
            CAM_ITEM.DJ_ITEM_OBTAIN_ORDER
        SET
            DEADLINE = 'Y',
--             UNPAID_TYPE = CASE WHEN CAST(ORDER_VOLUME AS UNSIGNED) = CAST(ORDER_REMAIN AS UNSIGNED) AND CAST(DELIVERY_AMT AS UNSIGNED) = 0 THEN 'C'
--                                WHEN CAST(ORDER_VOLUME AS UNSIGNED) > CAST(DELIVERY_AMT AS UNSIGNED) AND CAST(DELIVERY_AMT AS UNSIGNED) != 0 THEN 'P'
--                                WHEN CAST(ORDER_VOLUME AS UNSIGNED) = CAST(DELIVERY_AMT AS UNSIGNED) AND CAST(ORDER_REMAIN AS UNSIGNED) = 0 THEN 'N'
--                             END,
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            OBTAIN_ORDER_SN = #{obtainOrderSn}
        ]]>
    </update>

    <insert id="setObtainOrder" parameterType="map">
        /* setObtainOrder */
        INSERT INTO CAM_ITEM.DJ_ITEM_OBTAIN_ORDER
        (
            CRM_SN,
            MASTER_SN,
            ORDER_VOLUME,
            ORDER_REMAIN,
            ORDER_DT,
            DUE_DT,
            UNIT_PRICE,
            AMT,
            RMK,
            REG_EMP_SEQ
        )
        VALUES
        (
            #{crmSn},
            #{masterSn},
            #{orderVolume},
            #{orderRemain},
            #{orderDt},
            #{dueDt},
            #{unitPrice},
            #{amt},
            #{rmk},
            #{empSeq}
        )
    </insert>

    <update id="setObtainOrderUpd" parameterType="map">
        /* setObtainOrderUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_OBTAIN_ORDER
        SET
            CRM_SN = #{crmSn},
            MASTER_SN = #{masterSn},
            ORDER_VOLUME = #{orderVolume},
            DUE_DT = #{dueDt},
            UNIT_PRICE = #{unitPrice},
            AMT = #{amt},
            RMK = #{rmk},
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            OBTAIN_ORDER_SN = #{obtainOrderSn}
    </update>

    <update id="setObtainOrderCancel" parameterType="map">
        /* setObtainOrderCancel */
        UPDATE
            CAM_ITEM.DJ_ITEM_OBTAIN_ORDER
        SET
            OBTAIN_ORDER_TYPE = 'N',
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            OBTAIN_ORDER_SN IN (${obtainOrderSn})
    </update>

    <insert id="setItemEstPrint" parameterType="map">
        /* setItemEstPrint */
        INSERT INTO CAM_ITEM.DJ_ITEM_EST_PRINT
            (
                CRM_SN,
                OBTAIN_ORDER_SN,
                RMK,
                REG_EMP_SEQ
            )
        VALUES
            (
                #{crmSn},
                #{obtainOrderSn},
                #{rmk},
                #{empSeq}
            )

        <selectKey keyProperty="estPrintSn" resultType="Integer" order="BEFORE">
            SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'CAM_ITEM' AND TABLE_NAME = 'DJ_ITEM_EST_PRINT'
        </selectKey>
    </insert>

    <select id="getEstPrintSn" parameterType="map" resultType="map">
        /* getEstPrintSn */
        SELECT
            *
        FROM
            CAM_ITEM.DJ_ITEM_EST_PRINT A
        JOIN
            CAM_CRM.DJ_CRM_INFO B
        ON A.CRM_SN = B.CRM_SN
        WHERE
            A.EST_PRINT_SN = #{estPrintSn}
    </select>

    <select id="getShipmentRecordList" parameterType="map" resultType="map">
        /* getShipmentRecordList */
        SELECT
            SR.*,
            (SELECT IFNULL((SUM(IN_CNT) - SUM(OUT_CNT)), 0) FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN) AS OVERALL_INVEN,
            EI.EMP_NAME_KR,
            IM.MASTER_SN,
            IM.ITEM_NO,
            IM.ITEM_NAME,
            CI.CRM_NM
        FROM
            CAM_ITEM.DJ_ITEM_SM_RECORD SR
        JOIN
            CAM_ITEM.DJ_ITEM_OBTAIN_ORDER OO
        ON OO.OBTAIN_ORDER_SN = SR.OBTAIN_ORDER_SN
        JOIN
            CAM_CRM.DJ_CRM_INFO CI
        ON SR.CRM_SN = CI.CRM_SN
        JOIN
            CAM_HR.DJ_EMP_INFO EI
        ON SR.REG_EMP_SEQ = EI.EMP_SEQ
        JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
        ON IM.MASTER_SN = OO.MASTER_SN
        WHERE 1=1

        <if test='deadline != null and !"".equals(deadline)'>
            AND SR.DEADLINE = #{deadline}
        </if>

        <if test='startDt != null and !"".equals(startDt)'>
            <![CDATA[
            AND
                DATE_FORMAT(#{startDt}, '%Y%m%d') <= DATE_FORMAT(SR.DELIVERY_DT, '%Y%m%d')
            AND
                DATE_FORMAT(#{endDt}, '%Y%m%d') >= DATE_FORMAT(SR.DELIVERY_DT, '%Y%m%d')
            ]]>
        </if>

        <if test='crmSn != null and !"".equals(crmSn)'>
            AND SR.CRM_SN = #{crmSn}
        </if>

        <if test='masterSn != null and !"".equals(masterSn)'>
            AND IM.MASTER_SN = #{masterSn}
        </if>

        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword)'>
                AND IM.${searchKeyword} LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <otherwise>
                <if test='searchValue != null and !"".equals(searchValue)'>
                    AND (
                        IM.ITEM_NO LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.ITEM_NAME LIKE CONCAT('%', #{searchValue}, '%')
                    )
                </if>
            </otherwise>
        </choose>

        <if test='regEmpSeq != null and !"".equals(regEmpSeq)'>
            AND SR.REG_EMP_SEQ = #{regEmpSeq}
        </if>

        <if test='smRecordSnArr != null and !"".equals(smRecordSnArr)'>
            AND SR.SM_RECORD_SN IN (${smRecordSnArr})
        </if>

        ORDER BY SR.DELIVERY_DT DESC
    </select>

    <update id="setDeliveryAmtUpd" parameterType="map">
        /* setDeliveryAmtUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_OBTAIN_ORDER
        SET
            DELIVERY_AMT = (IFNULL(DELIVERY_AMT, 0) + ${deliveryAmt}),
            ORDER_REMAIN = (ORDER_VOLUME - IFNULL(DELIVERY_AMT, 0)),
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            OBTAIN_ORDER_SN = (SELECT OBTAIN_ORDER_SN FROM CAM_ITEM.DJ_ITEM_SM_RECORD WHERE SM_RECORD_SN = #{smRecordSn})
    </update>

    <update id="getShipmentDeliveryAmtUpd" parameterType="map">
        /* getShipmentDeliveryAmtUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_SM_RECORD
        SET
            DELIVERY_AMT = (IFNULL(DELIVERY_AMT, 0) + ${deliveryAmt}),
            DELIVERY_DT = DATE_FORMAT(NOW(), '%Y-%m-%d'),
            RMK = #{rmk},
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            SM_RECORD_SN = #{smRecordSn}
    </update>

    <insert id="setItemSmRecordHist" parameterType="map">
        /* setItemSmRecordHist */
        INSERT INTO CAM_ITEM.DJ_ITEM_SM_RECORD_HIST
        (
            SM_RECORD_SN,
            CRM_SN,
            DELIVERY_VOLUME,
            DELIVERY_DT,
            UNIT_PRICE,
            AMT,
            RMK,
            REG_EMP_SEQ
        )
        SELECT
            SM_RECORD_SN,
            CRM_SN,
            ${deliveryAmt},
            DATE_FORMAT(NOW(), '%Y-%m-%d'),
            UNIT_PRICE,
            ${deliveryAmt} * UNIT_PRICE,
            #{rmk},
            #{empSeq}
        FROM
            CAM_ITEM.DJ_ITEM_SM_RECORD
        WHERE
            SM_RECORD_SN = #{smRecordSn}
    </insert>

    <select id="getShipmentList" parameterType="map" resultType="map">
        /* getShipmentList */
        SELECT
            IM.ITEM_NO,
            IM.ITEM_NAME,
            IM.ITEM_TYPE,
            (SELECT IFNULL(UNIT_AMT, 0) FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN ORDER BY MOD_DT DESC LIMIT 1) AS UNIT_PRICE,
            IM.WH_CD,
            (SELECT IFNULL((SUM(IN_CNT) - SUM(OUT_CNT)), 0) FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN) AS CURRENT_INVEN,
            #{reqQty} AS REQ_QTY,
            IM.SAFETY_INVEN
        FROM
            CAM_ITEM.DJ_ITEM_MASTER IM
        WHERE
            IM.MASTER_SN = #{masterSn}
        GROUP BY IM.MASTER_SN
    </select>

    <insert id="setShipmentRecord" parameterType="map">
        /* setShipmentRecord */
        INSERT INTO CAM_ITEM.DJ_ITEM_SM_RECORD
        (
            OBTAIN_ORDER_SN,
            CRM_SN,
            DELIVERY_VOLUME,
            UNIT_PRICE,
            AMT,
            RMK,
            REG_EMP_SEQ
        )
        SELECT
            OBTAIN_ORDER_SN,
            CRM_SN,
            ORDER_VOLUME,
            UNIT_PRICE,
            AMT,
            RMK,
            #{empSeq}
        FROM
            CAM_ITEM.DJ_ITEM_OBTAIN_ORDER
        WHERE
            OBTAIN_ORDER_SN = #{obtainOrderSn}
    </insert>

    <update id="setUnPaidTypeUpd" parameterType="map">
        /* setUnPaidTypeUpd */
        <![CDATA[
        UPDATE
            CAM_ITEM.DJ_ITEM_OBTAIN_ORDER
        SET
            UNPAID_TYPE = CASE WHEN CAST(ORDER_VOLUME AS UNSIGNED) = CAST(ORDER_REMAIN AS UNSIGNED) AND CAST(DELIVERY_AMT AS UNSIGNED) = 0 THEN 'C'
                               WHEN CAST(ORDER_VOLUME AS UNSIGNED) > CAST(DELIVERY_AMT AS UNSIGNED) AND CAST(DELIVERY_AMT AS UNSIGNED) != 0 THEN 'P'
                               WHEN CAST(ORDER_VOLUME AS UNSIGNED) = CAST(DELIVERY_AMT AS UNSIGNED) AND CAST(ORDER_REMAIN AS UNSIGNED) = 0 THEN 'N'
                            END,
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            OBTAIN_ORDER_SN = (SELECT OBTAIN_ORDER_SN FROM CAM_ITEM.DJ_ITEM_SM_RECORD WHERE SM_RECORD_SN = #{smRecordSn})
        ]]>
    </update>

    <update id="setShipmentDeadlineUpd" parameterType="map">
        /* setShipmentDeadlineUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_SM_RECORD
        SET
            DEADLINE = 'Y',
            UNPAID_TYPE = CASE WHEN CAST(DELIVERY_VOLUME AS UNSIGNED) = CAST((DELIVERY_VOLUME - DELIVERY_AMT) AS UNSIGNED) AND CAST(DELIVERY_AMT AS UNSIGNED) = 0 THEN 'C'
                               WHEN CAST(DELIVERY_VOLUME AS UNSIGNED) > CAST(DELIVERY_AMT AS UNSIGNED) AND CAST(DELIVERY_AMT AS UNSIGNED) != 0 THEN 'P'
                               WHEN CAST(DELIVERY_VOLUME AS UNSIGNED) = CAST(DELIVERY_AMT AS UNSIGNED) AND CAST((DELIVERY_VOLUME - DELIVERY_AMT) AS UNSIGNED) = 0 THEN 'N'
                            END,
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            SM_RECORD_SN = #{smRecordSn}
    </update>

    <select id="getShipmentTrendList" parameterType="map" resultType="map">
        /* getShipmentTrendList */

        SELECT
            A.MONTH_DATA,
            SUM(IFNULL(B.CONFIRM_AMT, 0)) AS CONFIRM_AMT
        FROM (
            <![CDATA[
            SELECT
                DATE_FORMAT(CONCAT(#{year}, '-12-01') + INTERVAL -SEQ MONTH, '%Y-%m') MONTH_DATA
            FROM
                SEQ_0_TO_99 A
            WHERE
                SEQ < 60
            ]]>
        )A
        LEFT JOIN
            CAM_ITEM.DJ_CRM_SALES_CONFIRM B
        ON A.MONTH_DATA = DATE_FORMAT(B.CONFIRM_DATE, '%Y-%m')
        <if test='crmSn != null and !"".equals(crmSn)'>
            AND B.CRM_SN = #{crmSn}
        </if>
        GROUP BY MONTH_DATA

    </select>

    <select id="getReturnRecordRegList" parameterType="map" resultType="map">
        /* getReturnRecordRegList */
        SELECT
            RR.*,
            EI.EMP_NAME_KR,
            IM.ITEM_NO,
            IM.ITEM_NAME,
            CI.CRM_NM,
            WHC.ITEM_CD_NM AS WH_CD_NM
        FROM
            CAM_ITEM.DJ_ITEM_RETURN_RECORD RR
        JOIN
            CAM_CRM.DJ_CRM_INFO CI
        ON RR.CRM_SN = CI.CRM_SN
        JOIN
            CAM_ITEM.DJ_ITEM_INVENTORY II
        ON II.INVEN_SN = RR.INVEN_SN
        JOIN
            CAM_HR.DJ_EMP_INFO EI
        ON RR.REG_EMP_SEQ = EI.EMP_SEQ
        JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
        ON IM.MASTER_SN = II.MASTER_SN
        JOIN
            CAM_ITEM.DJ_ITEM_CD WHC
        ON WHC.LG_CD = 'WH' AND II.WH_CD = WHC.ITEM_CD
        WHERE 1=1

        <if test='startDt != null and !"".equals(startDt)'>
            <![CDATA[
            AND
                DATE_FORMAT(#{startDt}, '%Y%m%d') <= DATE_FORMAT(RR.DELIVERY_DT, '%Y%m%d')
            AND
                DATE_FORMAT(#{endDt}, '%Y%m%d') >= DATE_FORMAT(RR.DELIVERY_DT, '%Y%m%d')
            ]]>
        </if>

        <if test='crmSn != null and !"".equals(crmSn)'>
            AND RR.CRM_SN = #{crmSn}
        </if>

        <if test='whCd != null and !"".equals(whCd)'>
            AND II.WH_CD = #{whCd}
        </if>

        <if test='masterSn != null and !"".equals(masterSn)'>
            AND IM.MASTER_SN = #{masterSn}
        </if>


        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword)'>
                AND IM.${searchKeyword} LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <otherwise>
                <if test='searchValue != null and !"".equals(searchValue)'>
                    AND (
                        IM.ITEM_NO LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.ITEM_NAME LIKE CONCAT('%', #{searchValue}, '%')
                    )
                </if>
            </otherwise>
        </choose>

        <if test='regEmpSeq != null and !"".equals(regEmpSeq)'>
            AND RR.REG_EMP_SEQ = #{regEmpSeq}
        </if>

        ORDER BY RR.DELIVERY_DT DESC
    </select>

    <insert id="setReturnRecord" parameterType="map">
        /* setReturnRecord */
        INSERT INTO CAM_ITEM.DJ_ITEM_RETURN_RECORD
        (
            CRM_SN,
            INVEN_SN,
            DELIVERY_VOLUME,
            DELIVERY_DT,
            UNIT_PRICE,
            AMT,
            RMK,
            REG_EMP_SEQ
        )
        VALUES
        (
            #{crmSn},
            #{invenSn},
            #{deliveryVolume},
            #{deliveryDt},
            #{unitPrice},
            #{amt},
            #{rmk},
            #{empSeq}
        )
    </insert>

    <update id="setReturnRecordUpd" parameterType="map">
        /* setReturnRecordUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_RETURN_RECORD
        SET
            CRM_SN = #{crmSn},
            INVEN_SN = #{invenSn},
            DELIVERY_VOLUME = #{deliveryVolume},
            DELIVERY_DT = #{deliveryDt},
            UNIT_PRICE = #{unitPrice},
            AMT = #{amt},
            RMK = #{rmk},
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            RETURN_RECORD_SN = #{returnRecordSn}
    </update>

    <select id="getBomList" parameterType="map" resultType="map">
        /* getBomList */
        SELECT
            B.*,
            IM.*,
            WHC.ITEM_CD_NM AS WH_CD_NM,
            ITC.ITEM_CD_NM AS ITEM_TYPE_NM
        FROM
            CAM_ITEM.DJ_BOM B
        JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
        ON IM.MASTER_SN = B.MASTER_SN
        JOIN
            CAM_ITEM.DJ_ITEM_CD WHC
        ON WHC.LG_CD = 'WH' AND IM.WH_CD = WHC.ITEM_CD
        JOIN
            CAM_ITEM.DJ_ITEM_CD ITC
        ON ITC.LG_CD = 'IT' AND IM.ITEM_TYPE = ITC.ITEM_CD
        WHERE 1=1

        <if test='masterSn != null and !"".equals(masterSn)'>
            AND IM.MASTER_SN = #{masterSn}
        </if>

        <if test='whCd != null and !"".equals(whCd)'>
            AND IM.WH_CD = #{whCd}
        </if>

        <if test='itemType != null and !"".equals(itemType)'>
            AND IM.ITEM_TYPE = #{itemType}
        </if>


        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword)'>
                <choose>
                    <when test='"BOM_TITLE".equals(searchKeyword)'>
                        AND B.BOM_TITLE LIKE CONCAT('%', #{searchValue}, '%')
                    </when>
                    <otherwise>
                        AND IM.${searchKeyword} LIKE CONCAT('%', #{searchValue}, '%')
                    </otherwise>
                </choose>
            </when>
            <otherwise>
                <if test='searchValue != null and !"".equals(searchValue)'>
                    AND (
                        B.BOM_TITLE LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.ITEM_NO LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.ITEM_NAME LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.STANDARD LIKE CONCAT('%', #{searchValue}, '%')
                    )
                </if>
            </otherwise>
        </choose>

        ORDER BY
            CASE WHEN B.MOD_DT IS NULL THEN B.REG_DT
                ELSE B.MOD_DT
            END
        DESC
    </select>

    <select id="getBom" parameterType="map" resultType="map">
        /* getBom */
        SELECT
            B.*,
            IM.ITEM_NO,
            IM.ITEM_NAME,
            CONCAT(IM.ITEM_NO, ' [', IM.ITEM_NAME, ']') AS TREE_NAME,
            IM.STANDARD,
            IM.ITEM_TYPE,
            IM.WH_CD,
            WHC.ITEM_CD_NM AS WH_CD_NM
        FROM
            CAM_ITEM.DJ_BOM B
        JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
        ON IM.MASTER_SN = B.MASTER_SN
        JOIN
            CAM_ITEM.DJ_ITEM_CD WHC
        ON WHC.LG_CD = 'WH' AND IM.WH_CD = WHC.ITEM_CD
        WHERE
            BOM_SN = #{bomSn}
    </select>

    <select id="getBomSn" parameterType="map" resultType="String">
        /* getBomSn */
        SELECT
            BOM_SN
        FROM
            CAM_ITEM.DJ_BOM
        WHERE
             = #{masterBomSn}
    </select>

    <select id="getBomOutputHistory" parameterType="map" resultType="map">
        /* getBomOutputHistory */
        SELECT
            B.BOM_TITLE,
            BOH.BOM_SN,
            IM.ITEM_NO,
            IM.ITEM_NAME,
            IM.STANDARD,
            ITC.ITEM_CD_NM AS ITEM_TYPE_NM,
            WHC.ITEM_CD_NM AS WH_CD_NM,
            BOH.OUTPUT_CNT,
            BOH.RMK,
            EI.EMP_NAME_KR,
            DATE_FORMAT(BOH.REG_DT, '%Y-%m-%d') AS REG_DT
        FROM
            CAM_ITEM.DJ_BOM_OUTPUT_HISTORY BOH
        JOIN
            CAM_HR.DJ_EMP_INFO EI
        ON BOH.REG_EMP_SEQ = EI.EMP_SEQ
        JOIN
            CAM_ITEM.DJ_BOM B
        ON BOH.BOM_SN = B.BOM_SN
        JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
        ON IM.MASTER_SN = B.MASTER_SN
        JOIN
            CAM_ITEM.DJ_ITEM_CD WHC
        ON WHC.LG_CD = 'WH' AND IM.WH_CD = WHC.ITEM_CD
        JOIN
            CAM_ITEM.DJ_ITEM_CD ITC
        ON ITC.LG_CD = 'IT' AND IM.ITEM_TYPE = ITC.ITEM_CD
        WHERE 1=1

        <if test='whCd != null and !"".equals(whCd)'>
            AND IM.WH_CD = #{whCd}
        </if>

        <if test='itemType != null and !"".equals(itemType)'>
            AND IM.ITEM_TYPE = #{itemType}
        </if>

        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword)'>
                <choose>
                    <when test='"BOM_TITLE".equals(searchKeyword)'>
                        AND B.BOM_TITLE LIKE CONCAT('%', #{searchValue}, '%')
                    </when>
                    <otherwise>
                        AND IM.${searchKeyword} LIKE CONCAT('%', #{searchValue}, '%')
                    </otherwise>
                </choose>
            </when>
            <otherwise>
                <if test='searchValue != null and !"".equals(searchValue)'>
                    AND (
                        B.BOM_TITLE LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.ITEM_NO LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.ITEM_NAME LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.STANDARD LIKE CONCAT('%', #{searchValue}, '%')
                    )
                </if>
            </otherwise>
        </choose>

        ORDER BY BOH.REG_DT DESC
    </select>

    <select id="getBomDetailList" parameterType="map" resultType="map">
        /* getBomDetailList */
        SELECT
            BD.*,
            IM.ITEM_NO,
            IM.ITEM_NAME,
            IM.ITEM_TYPE,
            CONCAT(IM.ITEM_NO, ' [', IM.ITEM_NAME, '] X ', BD.REQ_QTY) AS TREE_NAME,
            IFNULL(MAX(II.UNIT_PRICE), 0) AS UNIT_PRICE,
            COUNT(II.INVEN_SN) AS INVEN_CNT,
            II.WH_CD,
            IFNULL(CAST(SUM(II.CURRENT_INVEN) AS SIGNED INTEGER), 0) AS CURRENT_INVEN,
            IM.SAFETY_INVEN,
            BD.MASTER_BOM_SN
        FROM
            CAM_ITEM.DJ_BOM_DETAIL BD
        JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
        ON BD.MASTER_SN = IM.MASTER_SN
        LEFT JOIN
            CAM_ITEM.DJ_ITEM_INVENTORY II
        ON II.MASTER_SN = IM.MASTER_SN
        WHERE
            BOM_SN = #{bomSn}
        GROUP BY MASTER_SN
    </select>

    <delete id="setBomDel" parameterType="map">
        /* setBomDel */
        DELETE FROM CAM_ITEM.DJ_BOM WHERE BOM_SN IN (${bomSn})
    </delete>

    <delete id="setBomDetailDel" parameterType="map">
        /* setBomDetailDel */
        DELETE FROM
            CAM_ITEM.DJ_BOM_DETAIL
       WHERE 1=1
       <choose>
           <when test='bomDetailSn != null and !"".equals(bomDetailSn)'>
               AND BOM_DETAIL_SN = #{bomDetailSn}
           </when>
            <otherwise>
                AND BOM_SN IN (${bomSn})
            </otherwise>
       </choose>
    </delete>

    <insert id="setBomCopy" parameterType="map">
        /* setBomCopy */
        INSERT INTO CAM_ITEM.DJ_BOM
        (
            BOM_TITLE,
            MASTER_SN,
            BOM_COST_PRICE,
            BOM_UNIT_PRICE,
            REG_EMP_SEQ
        )
        SELECT
            CONCAT(BOM_TITLE, ' - 복사본'),
            MASTER_SN,
            BOM_COST_PRICE,
            BOM_UNIT_PRICE,
            #{empSeq}
        FROM
            CAM_ITEM.DJ_BOM
        WHERE
            BOM_SN = #{copyId}

        <selectKey keyProperty="bomSn" resultType="Integer" order="BEFORE">
            SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'CAM_ITEM' AND TABLE_NAME = 'DJ_BOM'
        </selectKey>
    </insert>

    <insert id="setBomDetailCopy" parameterType="map">
        /* setBomDetailCopy */
        INSERT INTO CAM_ITEM.DJ_BOM_DETAIL
        (
            BOM_SN,
            MASTER_SN,
            REQ_QTY,
            RMK,
            REG_EMP_SEQ
        )
        SELECT
            #{bomSn},
            MASTER_SN,
            REQ_QTY,
            RMK,
            #{empSeq}
        FROM
            CAM_ITEM.DJ_BOM_DETAIL
        WHERE
            BOM_SN = #{copyId}
    </insert>


    <insert id="setBom" parameterType="map">
        /* setBom */
        INSERT INTO CAM_ITEM.DJ_BOM
        (
            BOM_TITLE,
            MASTER_SN,
            BOM_COST_PRICE,
            BOM_UNIT_PRICE,
            REG_EMP_SEQ
        )
        VALUES
        (
            #{bomTitle},
            #{masterSn},
            #{bomCostPrice},
            #{bomUnitPrice},
            #{empSeq}
        )

        <selectKey keyProperty="bomSn" resultType="Integer" order="BEFORE">
            SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'CAM_ITEM' AND TABLE_NAME = 'DJ_BOM'
        </selectKey>
    </insert>

    <update id="setBomUpd" parameterType="map">
        /* setBomUpd */
        UPDATE
            CAM_ITEM.DJ_BOM
        SET
            BOM_TITLE = #{bomTitle},
            MASTER_SN = #{masterSn},
            BOM_COST_PRICE = #{bomCostPrice},
            BOM_UNIT_PRICE = #{bomUnitPrice},
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            BOM_SN = #{bomSn}
    </update>

    <insert id="setBomDetail" parameterType="map">
        /* setBomDetail */
        INSERT INTO CAM_ITEM.DJ_BOM_DETAIL
        (
            BOM_SN,
            MASTER_SN,
            MASTER_BOM_SN,
            REQ_QTY,
            RMK,
            REG_EMP_SEQ
        )
        VALUES
        (
            #{bomSn},
            #{masterSn},
            #{masterBomSn},
            #{reqQty},
            #{rmk},
            #{empSeq}
        )
    </insert>

    <update id="setBomDetailUpd" parameterType="map">
        /* setBomDetailUpd */
        UPDATE
            CAM_ITEM.DJ_BOM_DETAIL
        SET
            MASTER_SN = #{masterSn},
            MASTER_BOM_SN = #{masterBomSn},
            REQ_QTY = #{reqQty},
            RMK = #{rmk},
            REG_EMP_SEQ = #{empSeq}
        WHERE
            BOM_DETAIL_SN = #{bomDetailSn}
    </update>

    <update id="setBomCurrentInvenUpd" parameterType="map">
        /* setBomCurrentInvenUpd */
        UPDATE
            CAM_ITEM.DJ_BOM
        SET
            CURRENT_INVEN = CURRENT_INVEN + ${outputCnt},
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            BOM_SN = #{bomSn}
    </update>

    <insert id="setOutputByBom" parameterType="map">
        /* setOutputByBom */
        INSERT INTO CAM_ITEM.DJ_BOM_OUTPUT_HISTORY
            (
                BOM_SN,
                OUTPUT_CNT,
                REG_EMP_SEQ
            )
        VALUES
            (
                #{bomSn},
                #{outputCnt},
                #{empSeq}
            )
    </insert>

    <select id="getMaterialUnitPriceList" parameterType="map" resultType="map">
        /* getMaterialUnitPriceList */
        SELECT
            IM.*,
            IFNULL(CIM.CRM_ITEM_SN, '') AS CRM_ITEM_SN,
            IFNULL(CIM.CRM_SN, '') AS CRM_SN,
            IFNULL(CIM.CRM_ITEM_NO, '') AS CRM_ITEM_NO,
            IFNULL(CIM.CRM_ITEM_NAME, '') AS CRM_ITEM_NAME,
            IFNULL(CIM.BUS_CLASS, '') AS BUS_CLASS,
            CIU.*,
            (SELECT REG_EMP_NAME FROM CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE WHERE CRM_ITEM_SN = CIM.CRM_ITEM_SN AND CHANGE_NUM = 1) AS REG_EMP_NAME,
            (SELECT REG_EMP_NAME FROM CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE WHERE CRM_ITEM_SN = CIM.CRM_ITEM_SN AND CHANGE_NUM != 1 ORDER BY CHANGE_NUM DESC LIMIT 1) AS MOD_EMP_NAME
        FROM
            CAM_ITEM.DJ_ITEM_MASTER IM
        LEFT JOIN
            CAM_ITEM.DJ_CRM_ITEM_MANGE CIM
        ON IM.MASTER_SN = CIM.MASTER_SN AND CIM.BUS_CLASS = #{busClass} AND CIM.CRM_SN = #{crmSn}
        LEFT JOIN
            CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE CIU
        ON CIU.CRM_ITEM_SN = CIM.CRM_ITEM_SN AND CIU.ACTIVE = 'Y'
        WHERE
            1=1
        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword)'>
                AND IM.${searchKeyword} LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <otherwise>
                <if test='searchValue != null and !"".equals(searchValue)'>
                    AND (
                        IM.ITEM_NO LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.ITEM_NAME LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.STANDARD LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.SAFETY_INVEN LIKE CONCAT('%', #{searchValue}, '%')
                    )
                </if>
            </otherwise>
        </choose>

        ORDER BY
            CASE WHEN CIU.MOD_DT IS NULL THEN CIU.REG_DT
                ELSE CIU.MOD_DT
            END
        DESC
    </select>

    <select id="getCrmItemUnitPriceList" parameterType="map" resultType="map">
        /* getCrmItemUnitPriceList */
        SELECT
            *
        FROM
            CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE
        WHERE
            CRM_ITEM_SN = #{crmItemSn}
    </select>

    <select id="getCrmItemMaxChangeNum" parameterType="map" resultType="String">
        /* getCrmItemMaxChangeNum */
        SELECT IFNULL(MAX(CHANGE_NUM) + 1, '1') FROM CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE CIM WHERE CIM.CRM_ITEM_SN = #{crmItemSn}
    </select>

    <insert id="setCrmItemUnitPriceReg" parameterType="map">
        /* setCrmItemUnitPriceReg */
        INSERT INTO CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE
        (
            CRM_ITEM_SN,
            UNIT_PRICE,
            START_DT,
            END_DT,
            RMK,
            CHANGE_NUM,
            REG_EMP_SEQ,
            REG_EMP_NAME
        )
        VALUES
        (
            #{crmItemSn},
            #{unitPrice},
            #{startDt},
            '9999-12-31',
            #{rmk},
            #{changeNum},
            #{empSeq},
            #{empName}
        )
    </insert>

    <update id="setCrmItemUnitPriceEndDtUpd" parameterType="map">
        /* setCrmItemUnitPriceEndDtUpd */
        UPDATE
            CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE
        SET
            END_DT = DATE_FORMAT(DATE_ADD(#{endDt}, INTERVAL -1 DAY), '%Y-%m-%d'),
            ACTIVE = 'N',
            MOD_EMP_SEQ = #{empSeq},
            MOD_EMP_NAME = #{empName},
            MOD_DT = NOW()
        WHERE
            CRM_ITEM_UNIT_PRICE_SN = (
                SELECT
                    CRM_ITEM_UNIT_PRICE_SN
                FROM
                    CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE
                WHERE
                    CRM_ITEM_SN = #{crmItemSn}
                AND
                    CHANGE_NUM = (${changeNum} - 1)
            )
        AND
            CRM_ITEM_SN = #{crmItemSn}
    </update>

    <update id="setCrmItemUnitPriceRegUpd" parameterType="map">
        /* setCrmItemUnitPriceRegUpd */
        UPDATE
            CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE
        SET
            UNIT_PRICE = #{unitPrice},
            START_DT = #{startDt},
            RMK = #{rmk},
            MOD_EMP_SEQ = #{empSeq},
            MOD_EMP_NAME = #{empName},
            MOD_DT = NOW()
        WHERE
            CRM_ITEM_UNIT_PRICE_SN = #{ciupSn}
        AND
            CRM_ITEM_SN = #{crmItemSn}
    </update>

    <delete id="setCrmItemUnitPriceDel" parameterType="map">
        /* setCrmItemUnitPriceDel */
        DELETE FROM CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE WHERE CRM_ITEM_UNIT_PRICE_SN IN (${ciupSn})
    </delete>

    <select id="getCrmItemUnitPrice" parameterType="map" resultType="map">
        /* getCrmItemUnitPrice */
        SELECT
            CIUP.*
        FROM
            CAM_ITEM.DJ_CRM_ITEM_MANGE CIM
        JOIN
            CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE CIUP
        ON CIM.CRM_ITEM_SN = CIUP.CRM_ITEM_SN AND CIUP.ACTIVE = 'Y'
        WHERE
            CIM.CRM_SN = #{crmSn}
        AND
            CIM.MASTER_SN = #{masterSn}
        AND
            CIM.BUS_CLASS = #{busClass}
    </select>

    <select id="getItemUnitPrice" parameterType="map" resultType="map">
        /* getItemUnitPrice */
        SELECT
            *
        FROM
            CAM_ITEM.DJ_ITEM_MASTER_SD_UP
        WHERE
            ACTIVE = 'Y'
        AND
            MASTER_SN = #{masterSn}
    </select>

    <update id="setCrmItemManageUpd" parameterType="map">
        UPDATE
            CAM_ITEM.DJ_CRM_ITEM_MANGE
        SET
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            CRM_ITEM_SN = #{crmItemSn}
    </update>

    <select id="getItemWhInfoList" parameterType="map" resultType="map">
        /* getItemWhInfoList */
        SELECT
            WI.*,
            (SELECT IFNULL(ITEM_NO, '') FROM CAM_ITEM.DJ_ITEM_MASTER WHERE MASTER_SN = WI.MASTER_SN) AS ITEM_NO,
            (SELECT IFNULL(ITEM_NAME, '') FROM CAM_ITEM.DJ_ITEM_MASTER WHERE MASTER_SN = WI.MASTER_SN) AS ITEM_NAME,
            (SELECT IFNULL(ITEM_UNIT_CD, '') FROM CAM_ITEM.DJ_ITEM_MASTER WHERE MASTER_SN = WI.MASTER_SN) AS ITEM_UNIT_CD,
            (SELECT IFNULL(ITEM_TYPE, '') FROM CAM_ITEM.DJ_ITEM_MASTER WHERE MASTER_SN = WI.MASTER_SN) AS ITEM_TYPE,
            (SELECT IFNULL(STANDARD, '') FROM CAM_ITEM.DJ_ITEM_MASTER WHERE MASTER_SN = WI.MASTER_SN) AS STANDARD,
            (SELECT IFNULL(WH_CD, '') FROM CAM_ITEM.DJ_ITEM_MASTER WHERE MASTER_SN = WI.MASTER_SN) AS WH_CD,
            (SELECT IFNULL(SAFETY_INVEN, '') FROM CAM_ITEM.DJ_ITEM_MASTER WHERE MASTER_SN = WI.MASTER_SN) AS SAFETY_INVEN,
            CI.CRM_NM,
            WHC.ITEM_CD_NM AS WH_CD_NM,
            WTC.ITEM_CD_NM AS WH_TYPE_NM
        FROM
            CAM_ITEM.DJ_ITEM_WH_INFO WI
        JOIN
            CAM_CRM.DJ_CRM_INFO CI
        ON WI.CRM_SN = CI.CRM_SN
        JOIN
            CAM_ITEM.DJ_ITEM_CD WHC
        ON WHC.LG_CD = 'WH' AND WI.WH_CD = WHC.ITEM_CD
        JOIN
            CAM_ITEM.DJ_ITEM_CD WTC
        ON WTC.LG_CD = 'WT' AND WI.WH_TYPE = WTC.ITEM_CD
        WHERE 1=1
        <if test='whType != null and !"".equals(whType)'>
            AND WI.WH_TYPE = #{whType}
        </if>

        <if test='crmSn != null and !"".equals(crmSn)'>
            AND CI.CRM_SN = #{crmSn}
        </if>

        <if test='startDt != null and !"".equals(startDt)'>
            <![CDATA[
            AND
                DATE_FORMAT(#{startDt}, '%Y%m%d') <= DATE_FORMAT(WI.WH_DT, '%Y%m%d')
            AND
                DATE_FORMAT(#{endDt}, '%Y%m%d') >= DATE_FORMAT(WI.WH_DT, '%Y%m%d')
            ]]>
        </if>

        <if test='whCd != null and !"".equals(whCd)'>
            AND WI.WH_CD = #{whCd}
        </if>

        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword)'>
                AND IM.${searchKeyword} LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <otherwise>
                <if test='searchValue != null and !"".equals(searchValue)'>
                    AND (
                        IM.ITEM_NO LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.ITEM_NAME LIKE CONCAT('%', #{searchValue}, '%')
                    )
                </if>
            </otherwise>
        </choose>

        <if test='inspection != null and !"".equals(inspection)'>
            AND WI.INSPECTION = #{inspection}
        </if>

        <if test='regEmpSeq != null and !"".equals(regEmpSeq)'>
            AND WI.REG_EMP_SEQ = #{regEmpSeq}
        </if>

        <if test='crmSn != null and !"".equals(crmSn)'>
            AND WI.CRM_SN = #{crmSn}
        </if>

        <if test='masterSn != null and !"".equals(masterSn)'>
            AND WI.MASTER_SN = #{masterSn}
        </if>

        ORDER BY WI.WH_DT DESC
    </select>

    <select id="getItemWhInfo" parameterType="map" resultType="map">
        /* getItemWhInfo */
        SELECT
            WI.*,
            (SELECT IFNULL(ITEM_NO, '') FROM CAM_ITEM.DJ_ITEM_MASTER WHERE MASTER_SN = WI.MASTER_SN) AS ITEM_NO,
            (SELECT IFNULL(ITEM_NAME, '') FROM CAM_ITEM.DJ_ITEM_MASTER WHERE MASTER_SN = WI.MASTER_SN) AS ITEM_NAME,
            (SELECT IFNULL(ITEM_UNIT_CD, '') FROM CAM_ITEM.DJ_ITEM_MASTER WHERE MASTER_SN = WI.MASTER_SN) AS ITEM_UNIT_CD,
            (SELECT IFNULL(ITEM_TYPE, '') FROM CAM_ITEM.DJ_ITEM_MASTER WHERE MASTER_SN = WI.MASTER_SN) AS ITEM_TYPE,
            (SELECT IFNULL(STANDARD, '') FROM CAM_ITEM.DJ_ITEM_MASTER WHERE MASTER_SN = WI.MASTER_SN) AS STANDARD,
            (SELECT IFNULL(WH_CD, '') FROM CAM_ITEM.DJ_ITEM_MASTER WHERE MASTER_SN = WI.MASTER_SN) AS WH_CD,
            (SELECT IFNULL(SAFETY_INVEN, '') FROM CAM_ITEM.DJ_ITEM_MASTER WHERE MASTER_SN = WI.MASTER_SN) AS SAFETY_INVEN,
            CI.CRM_NM,
            WHC.ITEM_CD_NM AS WH_CD_NM,
            WTC.ITEM_CD_NM AS WH_TYPE_NM
        FROM
            CAM_ITEM.DJ_ITEM_WH_INFO WI
        JOIN
            CAM_CRM.DJ_CRM_INFO CI
        ON WI.CRM_SN = CI.CRM_SN
        JOIN
            CAM_ITEM.DJ_ITEM_CD WHC
        ON WHC.LG_CD = 'WH' AND WI.WH_CD = WHC.ITEM_CD
        JOIN
            CAM_ITEM.DJ_ITEM_CD WTC
        ON WTC.LG_CD = 'WT' AND WI.WH_TYPE = WTC.ITEM_CD
        WHERE
            WI.ITEM_WH_SN = #{itemWhSn}
    </select>

    <update id="setInspectionUpd" parameterType="map">
        /* setInspectionUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_WH_INFO
        SET
            INSPECTION = #{inspection},
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            ITEM_WH_SN IN (${whSn})
    </update>

    <insert id="setReceivingReg" parameterType="map">
        /* setReceivingReg */
        INSERT INTO CAM_ITEM.DJ_ITEM_WH_INFO
        (
            CRM_SN,
            MASTER_SN,
            INVEN_AMT,
            WH_TYPE,
            WH_VOLUME,
            WH_WEIGHT,
            WH_CD,
            WH_TOTAL,
            WH_DT,
            WH_NO,
            UNIT_PRICE,
            AMT,
            ORDER_NO,
            ORDER_DT,
            ORDER_VOLUME,
            RMK,
            REG_EMP_SEQ
        )
        VALUES
        <foreach collection="newRateArr" item="item" separator=" , ">
        (
            #{item.crmSn},
            #{item.masterSn},
            #{item.invenAmt},
            #{item.whType},
            #{item.whVolume},
            #{item.whWeight},
            #{item.whCd},
            #{item.whTotal},
            #{item.whDt},
            #{item.whNo},
            #{item.unitPrice},
            #{item.amt},
            #{item.orderNo},
            #{item.orderDt},
            #{item.orderVolume},
            #{item.rmk},
            #{item.empSeq}
        )
        </foreach>
    </insert>

    <update id="setReceivingRegUpd" parameterType="map">
        /* setReceivingRegUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_WH_INFO
        SET
            CRM_SN = #{crmSn},
            MASTER_SN = #{masterSn},
            WH_TYPE = #{whType},
            WH_VOLUME = #{whVolume},
            WH_WEIGHT = #{whWeight},
            WH_CD = #{whCd},
            WH_NO = #{whNo},
            UNIT_PRICE = #{unitPrice},
            AMT = #{amt},
            ORDER_NO = #{orderNo},
            ORDER_DT = #{orderDt},
            ORDER_VOLUME = #{orderVolume},
            RMK = #{rmk},
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            ITEM_WH_SN = #{itemWhSn}
    </update>

    <update id="setReceivingCancel" parameterType="map">
        /* setReceivingCancel */
        UPDATE
            CAM_ITEM.DJ_ITEM_WH_INFO
        SET
            INSPECTION = 'C',
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            ITEM_WH_SN IN (${itemWhSn})
    </update>

    <select id="getItemInvenValidation" parameterType="map" resultType="map">
        /* getItemInvenValidation */
        SELECT
            *
        FROM
            CAM_ITEM.DJ_ITEM_INVENTORY
        WHERE
            MASTER_SN = #{masterSn}
        <if test='whCd != null and !"".equals(whCd)'>
        AND
            WH_CD = #{whCd}
        </if>
    </select>
    <insert id="setItemInven" parameterType="map">
        /* setItemInven */
        INSERT INTO CAM_ITEM.DJ_ITEM_INVENTORY
        (
            MASTER_SN,
            CURRENT_INVEN,
            WH_CD,
            RECEIVING_INVEN,
            UNIT_PRICE,
            INVEN_AMT,
            REG_EMP_SEQ,
            REG_DT
        )
        VALUES
        (
            #{masterSn},
            #{whVolume},
            #{whCd},
            #{whVolume},
            #{unitPrice},
            #{whVolume} * #{unitPrice},
            #{empSeq},
            NOW()
        );
    </insert>

    <update id="setItemInvenUpd" parameterType="map">
        /* setItemInvenUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_INVENTORY
        SET
            CURRENT_INVEN = (CURRENT_INVEN + #{whVolume}),
            RECEIVING_INVEN = (RECEIVING_INVEN + #{whVolume}),
            INVEN_AMT = (CURRENT_INVEN + #{whVolume}) * #{unitPrice},
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            INVEN_SN = #{invenSn}
    </update>

    <update id="setItemInvenUnitPriceUpd" parameterType="map">
        /* setItemInvenUnitPriceUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_INVENTORY
        SET
            UNIT_PRICE = #{unitPrice},
            INVEN_AMT = CURRENT_INVEN * #{unitPrice},
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            MASTER_SN = #{masterSn}
    </update>

    <select id="getItemInvenList" parameterType="map" resultType="map">
        /* getItemInvenList */
        SELECT
            IM.*,
            (SELECT ITEM_CD_NM FROM CAM_ITEM.DJ_ITEM_CD WHERE LG_CD = 'WH' AND ITEM_CD = IM.WH_CD) AS WH_CD_NM,
            (SELECT IFNULL(SUM(IN_CNT), 0) FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN) AS IN_CNT,
            (SELECT IFNULL(SUM(OUT_CNT), 0) FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN) AS OUT_CNT,
            (SELECT IFNULL((SUM(IN_CNT) - SUM(OUT_CNT)), 0) FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN) AS TOT_CNT,
            IM.SAFETY_INVEN AS SAFE_CNT,
            IFNULL(ITEM_REAL_CNT, 0) AS REAL_CNT,
            (SELECT IFNULL((SELECT UNIT_AMT FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN AND UNIT_AMT IS NOT NULL ORDER BY REG_DT DESC LIMIT 1) * (SUM(IN_CNT) - SUM(OUT_CNT)), 0) FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN) AS AMT,
            IFNULL((SELECT UNIT_AMT FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN AND UNIT_AMT IS NOT NULL ORDER BY REG_DT DESC LIMIT 1), 0) AS UNIT_AMT
        FROM
            CAM_ITEM.DJ_ITEM_MASTER IM
        WHERE 1=1
        <if test='whCd != null and !"".equals(whCd)'>
            AND IM.WH_CD = #{whCd}
        </if>
        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword)'>
                AND IM.${searchKeyword} LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <otherwise>
                <if test='searchValue != null and !"".equals(searchValue)'>
                    AND (
                    IM.ITEM_NO LIKE CONCAT('%', #{searchValue}, '%') OR
                    IM.ITEM_NAME LIKE CONCAT('%', #{searchValue}, '%')
                    )
                </if>
            </otherwise>
        </choose>
          AND
            IM.ACTIVE = 'Y'
        ORDER BY IM.REG_DT DESC
    </select>

    <select id="getItemInvenAdminList" parameterType="map" resultType="map">
        /* getItemInvenAdminList */
        <![CDATA[
        SELECT
            IM.*,
            (SELECT ITEM_CD_NM FROM CAM_ITEM.DJ_ITEM_CD WHERE LG_CD = 'WH' AND ITEM_CD = IM.WH_CD) AS WH_CD_NM,
            (SELECT IFNULL(SUM(IN_CNT), 0) FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN AND DATE_FORMAT(REG_DT, '%Y-%m-%d') BETWEEN #{nowStrDt} AND #{nowEndDt}) AS IN_CNT,
            (SELECT IFNULL(SUM(OUT_CNT), 0) FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN AND DATE_FORMAT(REG_DT, '%Y-%m-%d') BETWEEN #{nowStrDt} AND #{nowEndDt}) AS OUT_CNT,
            (SELECT IFNULL((SUM(IN_CNT) - SUM(OUT_CNT)), 0) FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN AND DATE_FORMAT(REG_DT, '%Y-%m-%d') BETWEEN #{nowStrDt} AND #{nowEndDt}) AS TOT_CNT,
            IM.SAFETY_INVEN AS SAFE_CNT,
            IFNULL(ITEM_REAL_CNT, 0) AS REAL_CNT,
            (SELECT IFNULL((SUM(IN_CNT) - SUM(OUT_CNT)), 0) FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN AND DATE_FORMAT(REG_DT, '%Y-%m-%d') BETWEEN #{befStrDt} AND #{befEndDt}) AS BEF_TOT_CNT,
            (SELECT IFNULL((SELECT UNIT_AMT FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN AND UNIT_AMT IS NOT NULL ORDER BY REG_DT DESC LIMIT 1) * (SUM(IN_CNT) - SUM(OUT_CNT)), 0) FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN AND DATE_FORMAT(REG_DT, '%Y-%m-%d') BETWEEN #{befStrDt} AND #{befEndDt}) AS BEF_AMT,
            (SELECT IFNULL((SELECT UNIT_AMT FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN AND UNIT_AMT IS NOT NULL ORDER BY REG_DT DESC LIMIT 1) * (SUM(IN_CNT) - SUM(OUT_CNT)), 0) FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN AND DATE_FORMAT(REG_DT, '%Y-%m-%d') BETWEEN #{nowStrDt} AND #{nowEndDt}) AS AMT,
            IFNULL((SELECT UNIT_AMT FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN AND UNIT_AMT IS NOT NULL ORDER BY REG_DT DESC LIMIT 1), 0) AS UNIT_AMT
        FROM
            CAM_ITEM.DJ_ITEM_MASTER IM
        WHERE 1=1
        AND
            IM.ACTIVE = 'Y'
        ORDER BY IM.REG_DT DESC
        ]]>
    </select>

    <select id="getItemInven" parameterType="map" resultType="map">
        /* getItemInven */
        SELECT
            II.*,
            IM.*,
            WHC.ITEM_CD_NM AS WH_CD_NM
        FROM
            CAM_ITEM.DJ_ITEM_INVENTORY II
        JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
        ON IM.MASTER_SN = II.MASTER_SN
        JOIN
            CAM_ITEM.DJ_ITEM_CD WHC
        ON WHC.LG_CD = 'WH' AND II.WH_CD = WHC.ITEM_CD
        WHERE
            II.INVEN_SN = #{invenSn}
    </select>

    <insert id="setInvenTransferReg" parameterType="map">
        /* setInvenTransferReg */
        INSERT INTO CAM_ITEM.DJ_ITEM_INVENTORY_TRANSFER
            (
                TRANSFER_TYPE,
                FORWARDING_DATE,
                FORWARDER,
                INVEN_SN,
                MASTER_SN,
                CURRENT_INVEN,
                TRANSFER_QTY,
                FORWARDING_WH_CD,
                RECEIVING_WH_CD,
                RMK,
                REG_EMP_SEQ
            )
        VALUES
            (
                #{transferType},
                #{forwardingDate},
                #{forwarder},
                #{invenSn},
                #{masterSn},
                #{currentInven},
                #{transferQty},
                #{forwardingWhCd},
                #{receivingWhCd},
                #{rmk},
                #{empSeq}
            )
        <selectKey keyProperty="invenTransSn" resultType="Integer" order="BEFORE">
            SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'CAM_ITEM' AND TABLE_NAME = 'DJ_ITEM_INVENTORY_TRANSFER'
        </selectKey>
    </insert>

    <update id="setInvenTransferRegUpd" parameterType="map">
        /* setInvenTransferRegUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_INVENTORY_TRANSFER
        SET
            TRANSFER_TYPE = #{transferType},
            FORWARDING_DATE = #{forwardingDate},
            FORWARDER = #{forwarder},
            INVEN_SN = #{invenSn},
            MASTER_SN = #{masterSn},
            CURRENT_INVEN = #{currentInven},
            TRANSFER_QTY = #{transferQty},
            FORWARDING_WH_CD = #{forwardingWhCd},
            RECEIVING_WH_CD = #{receivingWhCd},
            RMK = #{rmk},
            MOD_EMP_SEQ = #{empSeq},
            MOD_DATE = NOW()
        WHERE
            INVEN_TRANS_SN = #{invenTransSn}
    </update>

    <select id="getInvenTransferHistoryList" parameterType="map" resultType="map">
        /* getInvenTransferHistoryList */
        SELECT
            IT.*,
            IM.*,
            EI.EMP_NAME_KR,
            TFT.ITEM_CD_NM AS TRANSFER_TYPE_NM,
            FWH.ITEM_CD_NM AS FORWARDING_WH_CD_NM,
            RWH.ITEM_CD_NM AS RECEIVING_WH_CD_NM
        FROM
            CAM_ITEM.DJ_ITEM_INVENTORY_TRANSFER IT
        JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
        ON IM.MASTER_SN = IT.MASTER_SN
        JOIN
            CAM_HR.DJ_EMP_INFO EI
        ON IT.FORWARDER = EI.EMP_SEQ
        JOIN
            CAM_ITEM.DJ_ITEM_CD TFT
        ON TFT.LG_CD = 'TFT' AND IT.TRANSFER_TYPE = TFT.ITEM_CD
        JOIN
            CAM_ITEM.DJ_ITEM_CD FWH
        ON FWH.LG_CD = 'WH' AND IT.FORWARDING_WH_CD = FWH.ITEM_CD
        LEFT JOIN
            CAM_ITEM.DJ_ITEM_CD RWH
        ON RWH.LG_CD = 'WH' AND IT.RECEIVING_WH_CD = RWH.ITEM_CD
        WHERE 1=1

        <if test='transferType != null and !"".equals(transferType)'>
            AND IT.TRANSFER_TYPE = #{transferType}
        </if>

        <if test='startDt != null and !"".equals(startDt)'>
        <![CDATA[
            AND
                DATE_FORMAT(#{startDt}, '%Y%m%d') <= DATE_FORMAT(IT.FORWARDING_DATE, '%Y%m%d')
            AND
                DATE_FORMAT(#{endDt}, '%Y%m%d') >= DATE_FORMAT(IT.FORWARDING_DATE, '%Y%m%d')
        ]]>
        </if>

        <if test='forwardingWhCd != null and !"".equals(forwardingWhCd)'>
            AND IT.FORWARDING_WH_CD = #{forwardingWhCd}
        </if>

        <if test='receivingWhCd != null and !"".equals(receivingWhCd)'>
            AND IT.RECEIVING_WH_CD = #{receivingWhCd}
        </if>


        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword)'>
                AND IM.${searchKeyword} LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <otherwise>
                AND (
                    IM.ITEM_NO LIKE CONCAT('%', #{searchValue}, '%') OR
                    IM.ITEM_NAME LIKE CONCAT('%', #{searchValue}, '%')
                )
            </otherwise>
        </choose>

        <if test='regEmpSeq != null and !"".equals(regEmpSeq)'>
            AND IT.REG_EMP_SEQ = #{regEmpSeq}
        </if>

        ORDER BY IT.FORWARDING_DATE DESC
    </select>

    <update id="setCurrentInvenUpd" parameterType="map">
        /* setCurrentInvenUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_INVENTORY
        SET
            CURRENT_INVEN = CURRENT_INVEN - ${reqQty},
            FORWARDING_INVEN = FORWARDING_INVEN + ${reqQty},
            INVEN_AMT = CURRENT_INVEN * UNIT_PRICE,
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE 1=1
        <choose>
            <when test='invenSn != null and !"".equals(invenSn)'>
                AND INVEN_SN = #{invenSn}
            </when>
            <otherwise>
                AND MASTER_SN = #{masterSn} AND WH_CD = #{whCd}
            </otherwise>
        </choose>

    </update>

    <update id="setSafetyInvenUpd" parameterType="map">
        /* setSafetyInvenUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_MASTER
        SET
            SAFETY_INVEN = #{safetyInven},
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            MASTER_SN = #{masterSn}
    </update>

    <select id="getCrmSalesConfirmList" parameterType="map" resultType="map">
        /* getCrmSalesConfirmList */
        SELECT
            CI.CRM_SN,
            CI.CRM_NM,
            SR.OBTAIN_ORDER_SN,
            IFNULL(CSC.CRM_SALES_CONFIRM_SN, '') AS CRM_SALES_CONFIRM_SN,
            IFNULL(SR.SALES_MONTH, 0) AS SALES_MONTH,
            IFNULL(SR.DEPOSIT_AMT, 0) AS DEPOSIT_AMT,
            IFNULL(CSC.CONFIRM_AMT, 0) AS CONFIRM_AMT,
            IFNULL(CSC.CONFIRM_YN, 'N') AS CONFIRM_YN,
            EI.EMP_SEQ,
            EI.EMP_NAME_KR
        FROM
            CAM_CRM.DJ_CRM_INFO CI
        LEFT JOIN
            CAM_ITEM.DJ_CRM_SALES_CONFIRM CSC
        ON CI.CRM_SN = CSC.CRM_SN AND DATE_FORMAT(CSC.CONFIRM_DATE, '%Y-%m') = #{yearMonth}
        LEFT JOIN
            CAM_HR.DJ_EMP_INFO EI
        ON CSC.CONFIRM_EMP_SEQ = EI.EMP_SEQ
        LEFT JOIN (
            SELECT
                SR.OBTAIN_ORDER_SN,
                SR.CRM_SN,
                SUM(SRH.AMT) AS SALES_MONTH,
                SUM(DISTINCT SR.DEPOSIT_AMT) AS DEPOSIT_AMT
            FROM
                CAM_ITEM.DJ_ITEM_SM_RECORD_HIST SRH
            JOIN
                CAM_ITEM.DJ_ITEM_SM_RECORD SR
            ON SRH.SM_RECORD_SN = SR.SM_RECORD_SN
            WHERE
                SR.DEADLINE = 'Y'
            AND
                SR.UNPAID_TYPE != 'C'
            AND
                DATE_FORMAT(SRH.DELIVERY_DT, '%Y-%m') = #{yearMonth}
            GROUP BY SRH.CRM_SN
        )SR
        ON CI.CRM_SN = SR.CRM_SN
        WHERE 1=1
        <if test='crmSn != null and !"".equals(crmSn)'>
            AND CI.CRM_SN = #{crmSn}
        </if>
        <if test='confirmYn != null and !"".equals(confirmYn)'>
            <choose>
                <when test='"N".equals(confirmYn)'>
                    AND CSC.CONFIRM_YN = 'N' OR CSC.CONFIRM_YN IS NULL
                </when>
                <otherwise>
                    AND CSC.CONFIRM_YN = 'Y'
                </otherwise>
            </choose>
        </if>
    </select>

    <insert id="setCrmSalesConfirm" parameterType="map">
        /* setCrmSalesConfirmUpd */
        INSERT INTO CAM_ITEM.DJ_CRM_SALES_CONFIRM
        (
            CRM_SN,
            CONFIRM_AMT,
            CONFIRM_YN,
            CONFIRM_EMP_SEQ,
            CONFIRM_DATE,
            REG_EMP_SEQ
        )
        VALUES
        (
            #{crmSn},
            #{confirmAmt},
            #{confirmYn},
            #{empSeq},
            DATE_FORMAT(NOW(), '%Y-%m-%d'),
            #{empSeq}
        )
    </insert>

    <update id="setCrmSalesConfirmUpd" parameterType="map">
        UPDATE
            CAM_ITEM.DJ_CRM_SALES_CONFIRM
        SET
            CONFIRM_AMT = #{confirmAmt},
            CONFIRM_YN = #{confirmYn},
            CONFIRM_EMP_SEQ = #{empSeq},
            CONFIRM_DATE = DATE_FORMAT(NOW(), '%Y-%m-%d'),
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            CRM_SALES_CONFIRM_SN = #{crmSalesConfirmSn}
    </update>

    <select id="getDepositStatList" parameterType="map" resultType="map">
        /* getDepositStatList */
        SELECT
            SR.SM_RECORD_SN,
            CI.CRM_NM,
            SRH.DELIVERY_DT,
            SUM(SRH.AMT) AS AMT,
            SRH.REG_DT,
            (SELECT RMK FROM CAM_ITEM.DJ_ITEM_SM_RECORD_HIST WHERE HIST_SN = MAX(SRH.HIST_SN)) AS RMK,
            SR.DEPOSIT
        FROM
            CAM_ITEM.DJ_ITEM_SM_RECORD_HIST SRH
        JOIN
            CAM_ITEM.DJ_ITEM_SM_RECORD SR
        ON SRH.SM_RECORD_SN = SR.SM_RECORD_SN
        JOIN
            CAM_CRM.DJ_CRM_INFO CI
        ON SRH.CRM_SN = CI.CRM_SN
        WHERE
            SR.CRM_SN = #{crmSn}
        AND
            DATE_FORMAT(SRH.DELIVERY_DT, '%Y-%m') = #{yearMonth}
        GROUP BY SRH.SM_RECORD_SN
    </select>

    <update id="setDepositConfirm" parameterType="map">
        /* setDepositConfirm */
        UPDATE
            CAM_ITEM.DJ_ITEM_SM_RECORD
        SET
            DEPOSIT = 'Y',
            DEPOSIT_AMT = #{depositAmt},
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            SM_RECORD_SN = #{smRecordSn}
    </update>

    <select id="getPurcItemMap" parameterType="map" resultType="map">
        /*getPurcItemMap*/
        SELECT
            MPI.PURC_ITEM_SN,
            MPI.PRODUCT_A,
            MPI.PRODUCT_B,
            MPI.PRODUCT_C,
            MPI.PURC_ITEM_TYPE,
            MPI.PURC_ITEM_NAME,
            MPI.PURC_ITEM_STD,
            MPI.PURC_ITEM_UNIT_PRICE,
            MPI.PURC_ITEM_QTY,
            MPI.PURC_ITEM_UNIT,
            MPI.PURC_ITEM_AMT,
            MPI.RMK,
            MPI.STATUS,
            CI.CRM_SN,
            CI.CRM_NM,
            FORMAT(PURC_ITEM_UNIT_PRICE , 0) AS PURC_ITEM_UNIT_PRICE_COMMA,
            FORMAT(PURC_ITEM_AMT , 0) AS PURC_ITEM_AMT_COMMA
        FROM
            CAM_MNG.DJ_MNG_PURC_ITEM MPI
                LEFT JOIN
            CAM_CRM.DJ_CRM_INFO CI
            ON MPI.CRM_SN = CI.CRM_SN
        WHERE
            PURC_ITEM_SN = #{item}
    </select>

    <select id="getExcelItemInfoList" parameterType="map" resultType="map">
        /*getExcelItemInfoList*/
        SELECT
            WHC.ITEM_CD_NM AS WH_CD_NM,
            ITEM_NAME,
            CURRENT_INVEN,
            ACTUAL_INVEN,
            INVEN_AJM,
            IFNULL(INVEN_AJM_NOTE, '') AS INVEN_AJM_NOTE
        FROM
            CAM_ITEM.DJ_ITEM_INVENTORY II
                JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
            ON IM.MASTER_SN = II.MASTER_SN
                JOIN
            CAM_ITEM.DJ_ITEM_CD WHC
            ON WHC.LG_CD = 'WH' AND II.WH_CD = WHC.ITEM_CD

        ORDER BY
            CASE WHEN II.MOD_DT IS NULL THEN II.REG_DT
                 ELSE II.MOD_DT
            END
        DESC
    </select>

    <select id="getInvenSn" parameterType="map" resultType="int">
        SELECT
            II.INVEN_SN
        FROM
            CAM_ITEM.DJ_ITEM_INVENTORY II
                JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
            ON IM.MASTER_SN = II.MASTER_SN
                JOIN
            CAM_ITEM.DJ_ITEM_CD WHC
            ON WHC.LG_CD = 'WH' AND II.WH_CD = WHC.ITEM_CD
        WHERE
            WHC.ITEM_CD_NM = #{whCdNm}
          AND
            ITEM_NAME = #{itemName}
    </select>

    <update id="setInvenActual" parameterType="map">
        UPDATE
            CAM_ITEM.DJ_ITEM_MASTER
        SET
            ITEM_REAL_CNT = #{actualInven},
            INVEN_AJM = #{invenAjm},
            INVEN_AJM_NOTE = #{invenAjmNote},
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            MASTER_SN = #{masterSn}
    </update>

    <select id="getItemInvenAdjustList" parameterType="map" resultType="map">
        /* getItemInvenAdjustList */
        SELECT
            IM.MASTER_SN AS MASTER_SN,
            WHC.ITEM_CD_NM AS WH_CD_NM,
            ITEM_NAME AS itemName,
            (SELECT IFNULL((SUM(IN_CNT) - SUM(OUT_CNT)), 0) FROM CAM_ITEM.DJ_ITEM_HIST WHERE MASTER_SN = IM.MASTER_SN) AS currentInven,
            IFNULL(ITEM_REAL_CNT, 0) AS actualInven,
            IFNULL(INVEN_AJM, 0) AS invenAjm,
            IFNULL(INVEN_AJM_NOTE, '') AS invenAjmNote
        FROM
            CAM_ITEM.DJ_ITEM_MASTER IM
                JOIN
            CAM_ITEM.DJ_ITEM_CD WHC
            ON WHC.LG_CD = 'WH' AND WHC.ITEM_CD = IM.WH_CD
        WHERE
            IM.MASTER_SN IN (${invenSnArr})
    </select>

    <update id="updItemHistInfo" parameterType="map">
        /*updItemHistInfo*/
        UPDATE CAM_ITEM.DJ_ITEM_HIST
        SET
            MASTER_SN = #{masterSn}
        WHERE
            ITEM_WH_SN = #{itemWhSn}
    </update>

    <insert id="insItemHistOutData" parameterType="map">
        /*insItemHistOutData*/
        INSERT INTO CAM_ITEM.DJ_ITEM_HIST
            (
                MASTER_SN,
                INVEN_TRANS_SN,
                CRM_SN,
                IN_CNT,
                OUT_CNT,
                UNIT_AMT,
                TOT_AMT,
                DEF_DATE
            )
        VALUES
            (
                #{masterSn},
                #{invenTransSn},
                #{crmSn},
                0,
                #{transferQty},
                #{unitAmt},
                (${transferQty} * ${unitAmt}),
                DATE_FORMAT(now(), '%Y-%m-%d')
            )
    </insert>

    <update id="setDeadLine" parameterType="map">
        /*setDeadLine*/
        UPDATE CAM_ITEM.DJ_ITEM_HIST
        SET
            COFL_CHK = 'Y'
        WHERE
            1 = 1
    </update>

    <update id="updItemManageRealCnt" parameterType="map">
        /*updItemManageRealCnt*/
        UPDATE CAM_ITEM.DJ_ITEM_MASTER
        SET
            ITEM_REAL_CNT = 0
        WHERE
            1 = 1
    </update>

    <insert id="insHistDeadLineCnt" parameterType="map">
        /*insHistDeadLineCnt*/
        INSERT INTO CAM_ITEM.DJ_ITEM_HIST
            (
                MASTER_SN,
                IN_CNT,
                OUT_CNT,
                COFL_CHK,
                REG_DT,
                MOD_DT
            )
        VALUES
            (
                #{masterSn},
                #{inCnt},
                #{outCnt},
                'Y',
                now(),
                now()
            )
    </insert>

    <update id="updItemMasterConfCnt" parameterType="map">
        /*updItemMasterConfCnt*/
        UPDATE CAM_ITEM.DJ_ITEM_MASTER
        SET
            ITEM_CONF_CNT = #{confCnt}
        WHERE
            MASTER_SN = #{masterSn}
    </update>
</mapper>