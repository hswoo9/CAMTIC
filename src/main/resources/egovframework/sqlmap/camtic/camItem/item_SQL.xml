<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="item">

    <select id="getItemStandardUnitPriceList" parameterType="map" resultType="map">
        /* getItemStandardUnitPriceList */
        SELECT
            IM.*,
            MSU.*,
            (SELECT REG_EMP_NAME FROM CAM_ITEM.DJ_ITEM_MASTER_SD_UP WHERE MASTER_SN = IM.MASTER_SN AND CHANGE_NUM = 1) AS REG_EMP_NAME,
            (SELECT REG_EMP_NAME FROM CAM_ITEM.DJ_ITEM_MASTER_SD_UP WHERE MASTER_SN = IM.MASTER_SN AND CHANGE_NUM != 1 ORDER BY CHANGE_NUM DESC LIMIT 1) AS MOD_EMP_NAME
        FROM
            CAM_ITEM.DJ_ITEM_MASTER IM
        LEFT JOIN
            CAM_ITEM.DJ_ITEM_MASTER_SD_UP MSU
        ON MSU.MASTER_SN = IM.MASTER_SN AND MSU.ACTIVE = 'Y'

        WHERE 1=1
        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword)'>
                AND IM.${searchKeyword} LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <otherwise>
                <if test='searchValue != null and !"".equals(searchValue)'>
                    AND (
                        IM.ITEM_NO LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.ITEM_NAME LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.STANDARD LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.SAFETY_INVEN LIKE CONCAT('%', #{searchValue}, '%')
                    )
                </if>
            </otherwise>
        </choose>
    </select>

    <select id="getSdunitPriceList" parameterType="map" resultType="map">
        /* getSdunitPriceList */
        SELECT
            *
        FROM
            CAM_ITEM.DJ_ITEM_MASTER_SD_UP
        WHERE
            MASTER_SN = #{masterSn}
    </select>

    <select id="getMaxChangeNum" parameterType="map" resultType="String">
        /* getMaxChangeNum */
        SELECT IFNULL(MAX(CHANGE_NUM) + 1, '1') FROM CAM_ITEM.DJ_ITEM_MASTER_SD_UP IM WHERE IM.MASTER_SN = #{masterSn}
    </select>

    <insert id="setSdUnitPriceReg" parameterType="map">
        /* setSdUnitPriceReg */
        INSERT INTO CAM_ITEM.DJ_ITEM_MASTER_SD_UP
        (
            MASTER_SN,
            UNIT_PRICE,
            START_DT,
            END_DT,
            RMK,
            CHANGE_NUM,
            REG_EMP_SEQ,
            REG_EMP_NAME
        )
        VALUES
        (
            #{masterSn},
            #{unitPrice},
            #{startDt},
            '9999-12-31',
            #{rmk},
            #{changeNum},
            #{empSeq},
            #{empName}
        )
    </insert>

    <update id="setSdUnitPriceEndDtUpd" parameterType="map">
        /* setSdUnitPriceEndDtUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_MASTER_SD_UP
        SET
            END_DT = DATE_FORMAT(DATE_ADD(#{endDt}, INTERVAL -1 DAY), '%Y-%m-%d'),
            ACTIVE = 'N',
            MOD_EMP_SEQ = #{empSeq},
            MOD_EMP_NAME = #{empName},
            MOD_DT = NOW()
        WHERE
            MASTER_SD_UP_SN = (
                SELECT
                    MASTER_SD_UP_SN
                FROM
                    CAM_ITEM.DJ_ITEM_MASTER_SD_UP
                WHERE
                    MASTER_SN = #{masterSn}
                AND
                    CHANGE_NUM = (${changeNum} - 1)
            )
        AND
            MASTER_SN = #{masterSn}
    </update>

    <update id="setSdUnitPriceRegUpd" parameterType="map">
        /* setSdUnitPriceRegUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_MASTER_SD_UP
        SET
            UNIT_PRICE = #{unitPrice},
            START_DT = #{startDt},
            RMK = #{rmk},
            MOD_EMP_SEQ = #{empSeq},
            MOD_EMP_NAME = #{empName},
            MOD_DT = NOW()
        WHERE
            MASTER_SD_UP_SN = #{masterSdUpSn}
        AND
            MASTER_SN = #{masterSn}
    </update>

    <delete id="setSdUnitPriceDel" parameterType="map">
        /* setSdUnitPriceDel */
        DELETE FROM CAM_ITEM.DJ_ITEM_MASTER_SD_UP WHERE MASTER_SD_UP_SN IN (${masterSdUpSn})
    </delete>

    <select id="getBomList" parameterType="map" resultType="map">
        /* getBomList */
        SELECT
            B.*,
            WHC.ITEM_CD_NM AS WH_CD_NM
        FROM
            CAM_ITEM.DJ_BOM B
        JOIN
            CAM_ITEM.DJ_ITEM_CD WHC
        ON WHC.LG_CD = 'WH' AND B.BOM_WH_CD = WHC.ITEM_CD
        WHERE 1=1
        <if test='whCd != null and !"".equals(whCd)'>
            AND B.BOM_WH_CD = #{whCd}
        </if>

        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword)'>
                AND B.${searchKeyword} LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <otherwise>
                <if test='searchValue != null and !"".equals(searchValue)'>
                    AND (
                        B.BOM_NO LIKE CONCAT('%', #{searchValue}, '%') OR
                        B.BOM_NAME LIKE CONCAT('%', #{searchValue}, '%') OR
                        B.STANDARD LIKE CONCAT('%', #{searchValue}, '%') OR
                    )
                </if>
            </otherwise>
        </choose>
    </select>

    <select id="getBom" parameterType="map" resultType="map">
        /* getBom */
        SELECT
            *
        FROM
            CAM_ITEM.DJ_BOM
        WHERE
            BOM_SN = #{bomSn}
    </select>

    <select id="getBomDetailList" parameterType="map" resultType="map">
        /* getBomDetailList */
        SELECT
            BD.*,
            IM.ITEM_NO,
            IM.ITEM_NAME,
            IFNULL(MAX(II.UNIT_PRICE), 0) AS UNIT_PRICE,
            COUNT(II.INVEN_SN) AS INVEN_CNT,
            IFNULL(CAST(SUM(II.CURRENT_INVEN) AS SIGNED INTEGER), 0) AS CURRENT_INVEN,
            IM.SAFETY_INVEN
        FROM
            CAM_ITEM.DJ_BOM_DETAIL BD
        JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
        ON BD.MASTER_SN = IM.MASTER_SN
        LEFT JOIN
            CAM_ITEM.DJ_ITEM_INVENTORY II
        ON II.MASTER_SN = IM.MASTER_SN
        WHERE
            BOM_SN = #{bomSn}
        GROUP BY MASTER_SN
    </select>

    <delete id="setBomDel" parameterType="map">
        /* setBomDel */
        DELETE FROM CAM_ITEM.DJ_BOM WHERE BOM_SN IN (${bomSn})
    </delete>

    <delete id="setBomDetailDel" parameterType="map">
        /* setBomDetailDel */
        DELETE FROM
            CAM_ITEM.DJ_BOM_DETAIL
       WHERE 1=1
       <choose>
           <when test='bomDetailSn != null and !"".equals(bomDetailSn)'>
               AND BOM_DETAIL_SN = #{bomDetailSn}
           </when>
            <otherwise>
                AND BOM_SN IN (${bomSn})
            </otherwise>
       </choose>

    </delete>

    <insert id="setBom" parameterType="map">
        /* setBom */
        INSERT INTO CAM_ITEM.DJ_BOM
        (
            BOM_NO,
            BOM_NAME,
            STANDARD,
            BOM_COST_PRICE,
            BOM_UNIT_PRICE,
            BOM_WH_CD,
            REG_EMP_SEQ
        )
        VALUES
        (
            #{bomNo},
            #{bomName},
            #{standard},
            #{bomCostPrice},
            #{bomUnitPrice},
            #{bomWhCd},
            #{empSeq}
        )

        <selectKey keyProperty="bomSn" resultType="Integer" order="BEFORE">
            SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'CAM_ITEM' AND TABLE_NAME = 'DJ_BOM'
        </selectKey>
    </insert>

    <update id="setBomUpd" parameterType="map">
        /* setBomUpd */
        UPDATE
            CAM_ITEM.DJ_BOM
        SET
            BOM_NO = #{bomNo},
            BOM_NAME = #{bomName},
            STANDARD = #{standard},
            BOM_COST_PRICE = #{bomCostPrice},
            BOM_UNIT_PRICE = #{bomUnitPrice},
            BOM_WH_CD = #{bomWhCd},
            MOD_EMP_SEQ = #{empSeq}
        WHERE
            BOM_SN = #{bomSn}
    </update>

    <insert id="setBomDetail" parameterType="map">
        /* setBomDetail */
        INSERT INTO CAM_ITEM.DJ_BOM_DETAIL
        (
            BOM_SN,
            MASTER_SN,
            REQ_QTY,
            RMK,
            REG_EMP_SEQ
        )
        VALUES
        (
            #{bomSn},
            #{masterSn},
            #{reqQty},
            #{rmk},
            #{empSeq}
        )
    </insert>

    <update id="setBomDetailUpd" parameterType="map">
        /* setBomDetailUpd */
        UPDATE
            CAM_ITEM.DJ_BOM_DETAIL
        SET
            MASTER_SN = #{masterSn},
            REQ_QTY = #{reqQty},
            RMK = #{rmk},
            REG_EMP_SEQ = #{empSeq}
        WHERE
            BOM_DETAIL_SN = #{bomDetailSn}
    </update>

    <select id="getMaterialUnitPriceList" parameterType="map" resultType="map">
        /* getMaterialUnitPriceList */
        SELECT
            IM.*,
            CIM.*,
            CIU.*,
            (SELECT REG_EMP_NAME FROM CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE WHERE CRM_ITEM_SN = CIM.CRM_ITEM_SN AND CHANGE_NUM = 1) AS REG_EMP_NAME,
            (SELECT REG_EMP_NAME FROM CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE WHERE CRM_ITEM_SN = CIM.CRM_ITEM_SN AND CHANGE_NUM != 1 ORDER BY CHANGE_NUM DESC LIMIT 1) AS MOD_EMP_NAME
        FROM
            CAM_ITEM.DJ_CRM_ITEM_MANGE CIM
        JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
        ON IM.MASTER_SN = CIM.MASTER_SN
        LEFT JOIN
            CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE CIU
        ON CIU.CRM_ITEM_SN = CIM.CRM_ITEM_SN AND CIU.ACTIVE = 'Y'
        WHERE 1=1

        <choose>
            <when test='crmSn != null and !"".equals(crmSn)'>
                AND CIM.CRM_SN = #{crmSn}
            </when>
            <otherwise>
                AND CIM.CRM_SN = '0'
            </otherwise>
        </choose>

        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword)'>
                AND IM.${searchKeyword} LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <otherwise>
                <if test='searchValue != null and !"".equals(searchValue)'>
                    AND (
                        IM.ITEM_NO LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.ITEM_NAME LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.STANDARD LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.SAFETY_INVEN LIKE CONCAT('%', #{searchValue}, '%')
                    )
                </if>
            </otherwise>
        </choose>
    </select>

    <select id="getCrmItemUnitPriceList" parameterType="map" resultType="map">
        /* getCrmItemUnitPriceList */
        SELECT
            *
        FROM
            CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE
        WHERE
            CRM_ITEM_SN = #{crmItemSn}
    </select>

    <select id="getCrmItemMaxChangeNum" parameterType="map" resultType="String">
        /* getCrmItemMaxChangeNum */
        SELECT IFNULL(MAX(CHANGE_NUM) + 1, '1') FROM CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE CIM WHERE CIM.CRM_ITEM_SN = #{crmItemSn}
    </select>

    <insert id="setCrmItemUnitPriceReg" parameterType="map">
        /* setCrmItemUnitPriceReg */
        INSERT INTO CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE
        (
            CRM_ITEM_SN,
            UNIT_PRICE,
            START_DT,
            END_DT,
            RMK,
            CHANGE_NUM,
            REG_EMP_SEQ,
            REG_EMP_NAME
        )
        VALUES
        (
            #{crmItemSn},
            #{unitPrice},
            #{startDt},
            '9999-12-31',
            #{rmk},
            #{changeNum},
            #{empSeq},
            #{empName}
        )
    </insert>

    <update id="setCrmItemUnitPriceEndDtUpd" parameterType="map">
        /* setCrmItemUnitPriceEndDtUpd */
        UPDATE
            CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE
        SET
            END_DT = DATE_FORMAT(DATE_ADD(#{endDt}, INTERVAL -1 DAY), '%Y-%m-%d'),
            ACTIVE = 'N',
            MOD_EMP_SEQ = #{empSeq},
            MOD_EMP_NAME = #{empName},
            MOD_DT = NOW()
        WHERE
            CRM_ITEM_UNIT_PRICE_SN = (
                SELECT
                    CRM_ITEM_UNIT_PRICE_SN
                FROM
                    CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE
                WHERE
                    CRM_ITEM_SN = #{crmItemSn}
                AND
                    CHANGE_NUM = (${changeNum} - 1)
            )
        AND
            CRM_ITEM_SN = #{crmItemSn}
    </update>

    <update id="setCrmItemUnitPriceRegUpd" parameterType="map">
        /* setCrmItemUnitPriceRegUpd */
        UPDATE
            CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE
        SET
            UNIT_PRICE = #{unitPrice},
            START_DT = #{startDt},
            RMK = #{rmk},
            MOD_EMP_SEQ = #{empSeq},
            MOD_EMP_NAME = #{empName},
            MOD_DT = NOW()
        WHERE
            CRM_ITEM_UNIT_PRICE_SN = #{ciupSn}
        AND
            CRM_ITEM_SN = #{crmItemSn}
    </update>

    <delete id="setCrmItemUnitPriceDel" parameterType="map">
        /* setCrmItemUnitPriceDel */
        DELETE FROM CAM_ITEM.DJ_CRM_ITEM_UNIT_PRICE WHERE CRM_ITEM_UNIT_PRICE_SN IN (${ciupSn})
    </delete>

    <select id="getItemWhInfoList" parameterType="map" resultType="map">
        /* getItemWhInfoList */
        SELECT
            WI.*,
            IM.*,
            CI.CRM_NM,
            WHC.ITEM_CD_NM AS WH_CD_NM,
            WTC.ITEM_CD_NM AS WH_TYPE_NM
        FROM
            CAM_ITEM.DJ_ITEM_WH_INFO WI
        JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
        ON IM.MASTER_SN = WI.MASTER_SN
        JOIN
            CAM_CRM.DJ_CRM_INFO CI
        ON WI.CRM_SN = CI.CRM_SN
        JOIN
            CAM_ITEM.DJ_ITEM_CD WHC
        ON WHC.LG_CD = 'WH' AND WI.WH_CD = WHC.ITEM_CD
        JOIN
            CAM_ITEM.DJ_ITEM_CD WTC
        ON WTC.LG_CD = 'WT' AND WI.WH_TYPE = WTC.ITEM_CD
        WHERE 1=1
        <if test='whType != null and !"".equals(whType)'>
            AND WI.WH_TYPE = #{whType}
        </if>

        <if test='whCd != null and !"".equals(whCd)'>
            AND WI.WH_CD = #{whCd}
        </if>

        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword)'>
                AND IM.${searchKeyword} LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <otherwise>
                <if test='searchValue != null and !"".equals(searchValue)'>
                    AND (
                        IM.ITEM_NO LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.ITEM_NAME LIKE CONCAT('%', #{searchValue}, '%')
                    )
                </if>
            </otherwise>
        </choose>

        <if test='inspection != null and !"".equals(inspection)'>
            AND WI.INSPECTION = #{inspection}
        </if>

        <if test='regEmpSeq != null and !"".equals(regEmpSeq)'>
            AND WI.REG_EMP_SEQ = #{regEmpSeq}
        </if>

        <if test='crmSn != null and !"".equals(crmSn)'>
            AND WI.CRM_SN = #{crmSn}
        </if>

        <if test='masterSn != null and !"".equals(masterSn)'>
            AND WI.MASTER_SN = #{masterSn}
        </if>

        ORDER BY WI.REG_DT DESC
    </select>

    <update id="setInspectionUpd" parameterType="map">
        /* setInspectionUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_WH_INFO
        SET
            INSPECTION = #{inspection},
            MOD_EMP_SEQ = #{empSeq},
            MOD_DT = NOW()
        WHERE
            ITEM_WH_SN IN (${whSn})
    </update>

    <insert id="setReceivingReg" parameterType="map">
        /* setReceivingReg */
        INSERT INTO CAM_ITEM.DJ_ITEM_WH_INFO
        (
            CRM_SN,
            MASTER_SN,
            INVEN_AMT,
            WH_TYPE,
            WH_VOLUME,
            WH_WEIGHT,
            WH_CD,
            WH_TOTAL,
            WH_DT,
            WH_NO,
            UNIT_PRICE,
            AMT,
            ORDER_NO,
            ORDER_DT,
            ORDER_VOLUME,
            RMK,
            REG_EMP_SEQ
        )
        VALUES
        <foreach collection="newRateArr" item="item" separator=" , ">
        (
            #{item.crmSn},
            #{item.masterSn},
            #{item.invenAmt},
            #{item.whType},
            #{item.whVolume},
            #{item.whWeight},
            #{item.whCd},
            #{item.whTotal},
            #{item.whDt},
            #{item.whNo},
            #{item.unitPrice},
            #{item.amt},
            #{item.orderNo},
            #{item.orderDt},
            #{item.orderVolume},
            #{item.rmk},
            #{item.empSeq}
        )
        </foreach>
    </insert>

    <update id="setReceivingRegUpd" parameterType="map">
        /* setReceivingRegUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_WH_INFO
        SET
            CRM_SN = #{crmSn},
            MASTER_SN = #{masterSn},
            INVEN_AMT = #{invenAmt},
            WH_TYPE = #{whType},
            WH_VOLUME = #{whVolume},
            WH_WEIGHT = #{whWeight},
            WH_CD = #{whCd},
            WH_TOTAL = #{whTotal},
            WH_DT = #{whDt},
            WH_NO = #{whNo},
            UNIT_PRICE = #{unitPrice},
            AMT = #{amt},
            ORDER_NO = #{orderNo},
            ORDER_DT = #{orderDt},
            ORDER_VOLUME = #{orderVolume},
            RMK = #{rmk},
            MOD_EMP_SEQ = #{empSeq},
            MOD_DATE = NOW()
        WHERE
            ITEM_WH_SN = #{itemWhSn}
    </update>

    <select id="getItemInvenList" parameterType="map" resultType="map">
        /* getItemInvenList */
        SELECT
            II.*,
            IM.*,
            WHC.ITEM_CD_NM AS WH_CD_NM
        FROM
            CAM_ITEM.DJ_ITEM_INVENTORY II
        JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
        ON IM.MASTER_SN = II.MASTER_SN
        JOIN
            CAM_ITEM.DJ_ITEM_CD WHC
        ON WHC.LG_CD = 'WH' AND II.WH_CD = WHC.ITEM_CD
        <if test='whCd != null and !"".equals(whCd)'>
            AND II.WH_CD = #{whCd}
        </if>

        <if test='masterSn != null and !"".equals(masterSn)'>
            AND II.MASTER_SN = #{masterSn}
        </if>

        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword)'>
                AND IM.${searchKeyword} LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <otherwise>
                <if test='searchValue != null and !"".equals(searchValue)'>
                    AND (
                        IM.ITEM_NO LIKE CONCAT('%', #{searchValue}, '%') OR
                        IM.ITEM_NAME LIKE CONCAT('%', #{searchValue}, '%')
                    )
                </if>
            </otherwise>
        </choose>
    </select>

    <select id="getItemInven" parameterType="map" resultType="map">
        /* getItemInven */
        SELECT
            II.*,
            IM.*,
            WHC.ITEM_CD_NM AS WH_CD_NM
        FROM
            CAM_ITEM.DJ_ITEM_INVENTORY II
        JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
        ON IM.MASTER_SN = II.MASTER_SN
        JOIN
            CAM_ITEM.DJ_ITEM_CD WHC
        ON WHC.LG_CD = 'WH' AND II.WH_CD = WHC.ITEM_CD
        WHERE
            II.INVEN_SN = #{invenSn}
    </select>

    <insert id="setInvenTransferReg" parameterType="map">
        /* setInvenTransferReg */
        INSERT INTO CAM_ITEM.DJ_ITEM_INVENTORY_TRANSFER
        (
            TRANSFER_TYPE,
            FORWARDING_DATE,
            FORWARDER,
            INVEN_SN,
            MASTER_SN,
            CURRENT_INVEN,
            TRANSFER_QTY,
            FORWARDING_WH_CD,
            RECEIVING_WH_CD,
            RMK,
            REG_EMP_SEQ
        )
        VALUES
        <foreach collection="newRateArr" item="item" separator=" , ">
        (
            #{item.transferType},
            #{item.forwardingDate},
            #{item.forwarder},
            #{item.invenSn},
            #{item.masterSn},
            #{item.currentInven},
            #{item.transferQty},
            #{item.forwardingWhCd},
            #{item.receivingWhCd},
            #{item.rmk},
            #{item.empSeq}
        )
        </foreach>
    </insert>

    <update id="setInvenTransferRegUpd" parameterType="map">
        /* setInvenTransferRegUpd */
        UPDATE
            CAM_ITEM.DJ_ITEM_INVENTORY_TRANSFER
        SET
            TRANSFER_TYPE = #{transferType},
            FORWARDING_DATE = #{forwardingDate},
            FORWARDER = #{forwarder},
            INVEN_SN = #{invenSn},
            MASTER_SN = #{masterSn},
            CURRENT_INVEN = #{currentInven},
            TRANSFER_QTY = #{transferQty},
            FORWARDING_WH_CD = #{forwardingWhCd},
            RECEIVING_WH_CD = #{receivingWhCd},
            RMK = #{rmk},
            MOD_EMP_SEQ = #{empSeq},
            MOD_DATE = NOW()
        WHERE
            INVEN_TRANS_SN = #{invenTransSn}
    </update>

    <select id="getInvenTransferHistoryList" parameterType="map" resultType="map">
        /* getInvenTransferHistoryList */
        SELECT
            IT.*,
            IM.*,
            EI.EMP_NAME_KR,
            TFT.ITEM_CD_NM AS TRANSFER_TYPE_NM,
            FWH.ITEM_CD_NM AS FORWARDING_WH_CD_NM,
            RWH.ITEM_CD_NM AS RECEIVING_WH_CD_NM
        FROM
            CAM_ITEM.DJ_ITEM_INVENTORY_TRANSFER IT
        JOIN
            CAM_ITEM.DJ_ITEM_MASTER IM
        ON IM.MASTER_SN = IT.MASTER_SN
        JOIN
            CAM_HR.DJ_EMP_INFO EI
        ON IT.FORWARDER = EI.EMP_SEQ
        JOIN
            CAM_ITEM.DJ_ITEM_CD TFT
        ON TFT.LG_CD = 'TFT' AND IT.TRANSFER_TYPE = TFT.ITEM_CD
        JOIN
            CAM_ITEM.DJ_ITEM_CD FWH
        ON FWH.LG_CD = 'WH' AND IT.FORWARDING_WH_CD = FWH.ITEM_CD
        LEFT JOIN
            CAM_ITEM.DJ_ITEM_CD RWH
        ON RWH.LG_CD = 'WH' AND IT.RECEIVING_WH_CD = RWH.ITEM_CD
        WHERE 1=1

        <if test='transferType != null and !"".equals(transferType)'>
            AND IT.TRANSFER_TYPE = #{transferType}
        </if>

        <if test='startDt != null and !"".equals(startDt)'>
        <![CDATA[
            AND
                DATE_FORMAT(#{startDt}, '%Y%m%d') <= DATE_FORMAT(IT.FORWARDING_DATE, '%Y%m%d')
            AND
                DATE_FORMAT(#{endDt}, '%Y%m%d') >= DATE_FORMAT(IT.FORWARDING_DATE, '%Y%m%d')
        ]]>
        </if>

        <if test='forwardingWhCd != null and !"".equals(forwardingWhCd)'>
            AND IT.FORWARDING_WH_CD = #{forwardingWhCd}
        </if>

        <if test='receivingWhCd != null and !"".equals(receivingWhCd)'>
            AND IT.RECEIVING_WH_CD = #{receivingWhCd}
        </if>


        <choose>
            <when test='searchKeyword != null and !"".equals(searchKeyword)'>
                AND IM.${searchKeyword} LIKE CONCAT('%', #{searchValue}, '%')
            </when>
            <otherwise>
                AND (
                    IM.ITEM_NO LIKE CONCAT('%', #{searchValue}, '%') OR
                    IM.ITEM_NAME LIKE CONCAT('%', #{searchValue}, '%')
                )
            </otherwise>
        </choose>
    </select>
</mapper>